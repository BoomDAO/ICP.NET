using EdjCase.ICP.Agent.Agents;
using EdjCase.ICP.Candid.Models;
using EdjCase.ICP.Candid;
using System.Threading.Tasks;
using Test;
using System.Collections.Generic;
using EdjCase.ICP.Agent.Responses;

namespace Test
{
	public class GovernanceApiClient
	{
		public IAgent Agent { get; }

		public Principal CanisterId { get; }

		public CandidConverter Converter { get; }

		public GovernanceApiClient(IAgent agent, Principal canisterId, CandidConverter converter = default)
		{
			this.Agent = agent;
			this.CanisterId = canisterId;
			this.Converter = converter;
		}

		public async Task<Models.Result> claim_gtc_neurons(Principal arg0, List<Models.NeuronId> arg1)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0), CandidTypedValue.FromObject(arg1));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "claim_gtc_neurons", arg);
			return reply.ToObjects<Models.Result>(this.Converter);
		}

		public async Task<Models.ClaimOrRefreshNeuronFromAccountResponse> claim_or_refresh_neuron_from_account(Models.ClaimOrRefreshNeuronFromAccount arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "claim_or_refresh_neuron_from_account", arg);
			return reply.ToObjects<Models.ClaimOrRefreshNeuronFromAccountResponse>(this.Converter);
		}

		public async Task<string> _get_build_metadata()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_build_metadata", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<string>(this.Converter);
		}

		public async Task<Models.Result_2> _get_full_neuron(ulong arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_full_neuron", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.Result_2>(this.Converter);
		}

		public async Task<Models.Result_2> _get_full_neuron_by_id_or_subaccount(Models.NeuronIdOrSubaccount arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_full_neuron_by_id_or_subaccount", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.Result_2>(this.Converter);
		}

		public async Task<Models.Result_3> _get_monthly_node_provider_rewards()
		{
			CandidArg arg = CandidArg.FromCandid();
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "get_monthly_node_provider_rewards", arg);
			return reply.ToObjects<Models.Result_3>(this.Converter);
		}

		public async Task<Models.NetworkEconomics> _get_network_economics_parameters()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_network_economics_parameters", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.NetworkEconomics>(this.Converter);
		}

		public async Task<List<ulong>> _get_neuron_ids()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_neuron_ids", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<List<ulong>>(this.Converter);
		}

		public async Task<Models.Result_4> _get_neuron_info(ulong arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_neuron_info", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.Result_4>(this.Converter);
		}

		public async Task<Models.Result_4> _get_neuron_info_by_id_or_subaccount(Models.NeuronIdOrSubaccount arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_neuron_info_by_id_or_subaccount", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.Result_4>(this.Converter);
		}

		public async Task<Models.Result_5> _get_node_provider_by_caller(NullValue arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_node_provider_by_caller", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.Result_5>(this.Converter);
		}

		public async Task<List<Models.ProposalInfo>> _get_pending_proposals()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_pending_proposals", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<List<Models.ProposalInfo>>(this.Converter);
		}

		public async Task<OptionalValue<Models.ProposalInfo>> _get_proposal_info(ulong arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_proposal_info", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<OptionalValue<Models.ProposalInfo>>(this.Converter);
		}

		public async Task<Models.ListKnownNeuronsResponse> list_known_neurons()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "list_known_neurons", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.ListKnownNeuronsResponse>(this.Converter);
		}

		public async Task<Models.ListNeuronsResponse> list_neurons(Models.ListNeurons arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "list_neurons", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.ListNeuronsResponse>(this.Converter);
		}

		public async Task<Models.ListNodeProvidersResponse> list_node_providers()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "list_node_providers", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.ListNodeProvidersResponse>(this.Converter);
		}

		public async Task<Models.ListProposalInfoResponse> list_proposals(Models.ListProposalInfo arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "list_proposals", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Models.ListProposalInfoResponse>(this.Converter);
		}

		public async Task<Models.ManageNeuronResponse> manage_neuron(Models.ManageNeuron arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "manage_neuron", arg);
			return reply.ToObjects<Models.ManageNeuronResponse>(this.Converter);
		}

		public async Task<Models.Result> transfer_gtc_neuron(Models.NeuronId arg0, Models.NeuronId arg1)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0), CandidTypedValue.FromObject(arg1));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "transfer_gtc_neuron", arg);
			return reply.ToObjects<Models.Result>(this.Converter);
		}

		public async Task<Models.Result> update_node_provider(Models.UpdateNodeProvider arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "update_node_provider", arg);
			return reply.ToObjects<Models.Result>(this.Converter);
		}
	}
}

Type File: 'AccountIdentifier'

using System.Collections.Generic;

namespace Test.Models
{
	public class AccountIdentifier
	{
		public List<byte> hash { get; set; }

		public AccountIdentifier(List<byte> hash)
		{
			this.hash = hash;
		}

		public AccountIdentifier()
		{
		}
	}
}

Type File: 'Action'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(ActionTag))]
	public class Action
	{
		[VariantTagProperty()]
		public ActionTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Action(ActionTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Action()
		{
		}

		public static Action RegisterKnownNeuron(KnownNeuron info)
		{
			return new Action(ActionTag.RegisterKnownNeuron, info);
		}

		public static Action ManageNeuron(ManageNeuron info)
		{
			return new Action(ActionTag.ManageNeuron, info);
		}

		public static Action ExecuteNnsFunction(ExecuteNnsFunction info)
		{
			return new Action(ActionTag.ExecuteNnsFunction, info);
		}

		public static Action RewardNodeProvider(RewardNodeProvider info)
		{
			return new Action(ActionTag.RewardNodeProvider, info);
		}

		public static Action SetDefaultFollowees(SetDefaultFollowees info)
		{
			return new Action(ActionTag.SetDefaultFollowees, info);
		}

		public static Action RewardNodeProviders(RewardNodeProviders info)
		{
			return new Action(ActionTag.RewardNodeProviders, info);
		}

		public static Action ManageNetworkEconomics(NetworkEconomics info)
		{
			return new Action(ActionTag.ManageNetworkEconomics, info);
		}

		public static Action ApproveGenesisKyc(ApproveGenesisKyc info)
		{
			return new Action(ActionTag.ApproveGenesisKyc, info);
		}

		public static Action AddOrRemoveNodeProvider(AddOrRemoveNodeProvider info)
		{
			return new Action(ActionTag.AddOrRemoveNodeProvider, info);
		}

		public static Action Motion(Motion info)
		{
			return new Action(ActionTag.Motion, info);
		}

		public KnownNeuron AsRegisterKnownNeuron()
		{
			this.ValidateTag(ActionTag.RegisterKnownNeuron);
			return (KnownNeuron)this.Value!;
		}

		public ManageNeuron AsManageNeuron()
		{
			this.ValidateTag(ActionTag.ManageNeuron);
			return (ManageNeuron)this.Value!;
		}

		public ExecuteNnsFunction AsExecuteNnsFunction()
		{
			this.ValidateTag(ActionTag.ExecuteNnsFunction);
			return (ExecuteNnsFunction)this.Value!;
		}

		public RewardNodeProvider AsRewardNodeProvider()
		{
			this.ValidateTag(ActionTag.RewardNodeProvider);
			return (RewardNodeProvider)this.Value!;
		}

		public SetDefaultFollowees AsSetDefaultFollowees()
		{
			this.ValidateTag(ActionTag.SetDefaultFollowees);
			return (SetDefaultFollowees)this.Value!;
		}

		public RewardNodeProviders AsRewardNodeProviders()
		{
			this.ValidateTag(ActionTag.RewardNodeProviders);
			return (RewardNodeProviders)this.Value!;
		}

		public NetworkEconomics AsManageNetworkEconomics()
		{
			this.ValidateTag(ActionTag.ManageNetworkEconomics);
			return (NetworkEconomics)this.Value!;
		}

		public ApproveGenesisKyc AsApproveGenesisKyc()
		{
			this.ValidateTag(ActionTag.ApproveGenesisKyc);
			return (ApproveGenesisKyc)this.Value!;
		}

		public AddOrRemoveNodeProvider AsAddOrRemoveNodeProvider()
		{
			this.ValidateTag(ActionTag.AddOrRemoveNodeProvider);
			return (AddOrRemoveNodeProvider)this.Value!;
		}

		public Motion AsMotion()
		{
			this.ValidateTag(ActionTag.Motion);
			return (Motion)this.Value!;
		}

		private void ValidateTag(ActionTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum ActionTag
	{
		[VariantOptionType(typeof(KnownNeuron))]
		RegisterKnownNeuron,
		[VariantOptionType(typeof(ManageNeuron))]
		ManageNeuron,
		[VariantOptionType(typeof(ExecuteNnsFunction))]
		ExecuteNnsFunction,
		[VariantOptionType(typeof(RewardNodeProvider))]
		RewardNodeProvider,
		[VariantOptionType(typeof(SetDefaultFollowees))]
		SetDefaultFollowees,
		[VariantOptionType(typeof(RewardNodeProviders))]
		RewardNodeProviders,
		[VariantOptionType(typeof(NetworkEconomics))]
		ManageNetworkEconomics,
		[VariantOptionType(typeof(ApproveGenesisKyc))]
		ApproveGenesisKyc,
		[VariantOptionType(typeof(AddOrRemoveNodeProvider))]
		AddOrRemoveNodeProvider,
		[VariantOptionType(typeof(Motion))]
		Motion
	}
}

Type File: 'AddHotKey'

using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class AddHotKey
	{
		public OptionalValue<Principal> new_hot_key { get; set; }

		public AddHotKey(OptionalValue<Principal> newHotKey)
		{
			this.new_hot_key = newHotKey;
		}

		public AddHotKey()
		{
		}
	}
}

Type File: 'AddOrRemoveNodeProvider'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class AddOrRemoveNodeProvider
	{
		public OptionalValue<Change> change { get; set; }

		public AddOrRemoveNodeProvider(OptionalValue<Change> change)
		{
			this.change = change;
		}

		public AddOrRemoveNodeProvider()
		{
		}
	}
}

Type File: 'Amount'

namespace Test.Models
{
	public class Amount
	{
		public ulong e8s { get; set; }

		public Amount(ulong e8s)
		{
			this.e8s = e8s;
		}

		public Amount()
		{
		}
	}
}

Type File: 'ApproveGenesisKyc'

using System.Collections.Generic;
using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class ApproveGenesisKyc
	{
		public List<Principal> principals { get; set; }

		public ApproveGenesisKyc(List<Principal> principals)
		{
			this.principals = principals;
		}

		public ApproveGenesisKyc()
		{
		}
	}
}

Type File: 'Ballot'

namespace Test.Models
{
	public class Ballot
	{
		public int vote { get; set; }

		public ulong voting_power { get; set; }

		public Ballot(int vote, ulong votingPower)
		{
			this.vote = vote;
			this.voting_power = votingPower;
		}

		public Ballot()
		{
		}
	}
}

Type File: 'BallotInfo'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class BallotInfo
	{
		public int vote { get; set; }

		public OptionalValue<NeuronId> proposal_id { get; set; }

		public BallotInfo(int vote, OptionalValue<NeuronId> proposalId)
		{
			this.vote = vote;
			this.proposal_id = proposalId;
		}

		public BallotInfo()
		{
		}
	}
}

Type File: 'By'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(ByTag))]
	public class By
	{
		[VariantTagProperty()]
		public ByTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public By(ByTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected By()
		{
		}

		public static By NeuronIdOrSubaccount(By.NeuronIdOrSubaccountInfo info)
		{
			return new By(ByTag.NeuronIdOrSubaccount, info);
		}

		public static By MemoAndController(ClaimOrRefreshNeuronFromAccount info)
		{
			return new By(ByTag.MemoAndController, info);
		}

		public static By Memo(ulong info)
		{
			return new By(ByTag.Memo, info);
		}

		public By.NeuronIdOrSubaccountInfo AsNeuronIdOrSubaccount()
		{
			this.ValidateTag(ByTag.NeuronIdOrSubaccount);
			return (By.NeuronIdOrSubaccountInfo)this.Value!;
		}

		public ClaimOrRefreshNeuronFromAccount AsMemoAndController()
		{
			this.ValidateTag(ByTag.MemoAndController);
			return (ClaimOrRefreshNeuronFromAccount)this.Value!;
		}

		public ulong AsMemo()
		{
			this.ValidateTag(ByTag.Memo);
			return (ulong)this.Value!;
		}

		private void ValidateTag(ByTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}

		public class NeuronIdOrSubaccountInfo
		{
			public NeuronIdOrSubaccountInfo()
			{
			}
		}
	}

	public enum ByTag
	{
		[VariantOptionType(typeof(By.NeuronIdOrSubaccountInfo))]
		NeuronIdOrSubaccount,
		[VariantOptionType(typeof(ClaimOrRefreshNeuronFromAccount))]
		MemoAndController,
		[VariantOptionType(typeof(ulong))]
		Memo
	}
}

Type File: 'Change'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(ChangeTag))]
	public class Change
	{
		[VariantTagProperty()]
		public ChangeTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Change(ChangeTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Change()
		{
		}

		public static Change ToRemove(NodeProvider info)
		{
			return new Change(ChangeTag.ToRemove, info);
		}

		public static Change ToAdd(NodeProvider info)
		{
			return new Change(ChangeTag.ToAdd, info);
		}

		public NodeProvider AsToRemove()
		{
			this.ValidateTag(ChangeTag.ToRemove);
			return (NodeProvider)this.Value!;
		}

		public NodeProvider AsToAdd()
		{
			this.ValidateTag(ChangeTag.ToAdd);
			return (NodeProvider)this.Value!;
		}

		private void ValidateTag(ChangeTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum ChangeTag
	{
		[VariantOptionType(typeof(NodeProvider))]
		ToRemove,
		[VariantOptionType(typeof(NodeProvider))]
		ToAdd
	}
}

Type File: 'ClaimOrRefresh'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class ClaimOrRefresh
	{
		public OptionalValue<By> by { get; set; }

		public ClaimOrRefresh(OptionalValue<By> by)
		{
			this.by = by;
		}

		public ClaimOrRefresh()
		{
		}
	}
}

Type File: 'ClaimOrRefreshNeuronFromAccount'

using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class ClaimOrRefreshNeuronFromAccount
	{
		public OptionalValue<Principal> controller { get; set; }

		public ulong memo { get; set; }

		public ClaimOrRefreshNeuronFromAccount(OptionalValue<Principal> controller, ulong memo)
		{
			this.controller = controller;
			this.memo = memo;
		}

		public ClaimOrRefreshNeuronFromAccount()
		{
		}
	}
}

Type File: 'ClaimOrRefreshNeuronFromAccountResponse'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class ClaimOrRefreshNeuronFromAccountResponse
	{
		public OptionalValue<Result_1> result { get; set; }

		public ClaimOrRefreshNeuronFromAccountResponse(OptionalValue<Result_1> result)
		{
			this.result = result;
		}

		public ClaimOrRefreshNeuronFromAccountResponse()
		{
		}
	}
}

Type File: 'ClaimOrRefreshResponse'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class ClaimOrRefreshResponse
	{
		public OptionalValue<NeuronId> refreshed_neuron_id { get; set; }

		public ClaimOrRefreshResponse(OptionalValue<NeuronId> refreshedNeuronId)
		{
			this.refreshed_neuron_id = refreshedNeuronId;
		}

		public ClaimOrRefreshResponse()
		{
		}
	}
}

Type File: 'Command'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(CommandTag))]
	public class Command
	{
		[VariantTagProperty()]
		public CommandTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Command(CommandTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Command()
		{
		}

		public static Command Spawn(Spawn info)
		{
			return new Command(CommandTag.Spawn, info);
		}

		public static Command Split(Split info)
		{
			return new Command(CommandTag.Split, info);
		}

		public static Command Follow(Follow info)
		{
			return new Command(CommandTag.Follow, info);
		}

		public static Command ClaimOrRefresh(ClaimOrRefresh info)
		{
			return new Command(CommandTag.ClaimOrRefresh, info);
		}

		public static Command Configure(Configure info)
		{
			return new Command(CommandTag.Configure, info);
		}

		public static Command RegisterVote(RegisterVote info)
		{
			return new Command(CommandTag.RegisterVote, info);
		}

		public static Command Merge(Merge info)
		{
			return new Command(CommandTag.Merge, info);
		}

		public static Command DisburseToNeuron(DisburseToNeuron info)
		{
			return new Command(CommandTag.DisburseToNeuron, info);
		}

		public static Command MakeProposal(Proposal info)
		{
			return new Command(CommandTag.MakeProposal, info);
		}

		public static Command MergeMaturity(MergeMaturity info)
		{
			return new Command(CommandTag.MergeMaturity, info);
		}

		public static Command Disburse(Disburse info)
		{
			return new Command(CommandTag.Disburse, info);
		}

		public Spawn AsSpawn()
		{
			this.ValidateTag(CommandTag.Spawn);
			return (Spawn)this.Value!;
		}

		public Split AsSplit()
		{
			this.ValidateTag(CommandTag.Split);
			return (Split)this.Value!;
		}

		public Follow AsFollow()
		{
			this.ValidateTag(CommandTag.Follow);
			return (Follow)this.Value!;
		}

		public ClaimOrRefresh AsClaimOrRefresh()
		{
			this.ValidateTag(CommandTag.ClaimOrRefresh);
			return (ClaimOrRefresh)this.Value!;
		}

		public Configure AsConfigure()
		{
			this.ValidateTag(CommandTag.Configure);
			return (Configure)this.Value!;
		}

		public RegisterVote AsRegisterVote()
		{
			this.ValidateTag(CommandTag.RegisterVote);
			return (RegisterVote)this.Value!;
		}

		public Merge AsMerge()
		{
			this.ValidateTag(CommandTag.Merge);
			return (Merge)this.Value!;
		}

		public DisburseToNeuron AsDisburseToNeuron()
		{
			this.ValidateTag(CommandTag.DisburseToNeuron);
			return (DisburseToNeuron)this.Value!;
		}

		public Proposal AsMakeProposal()
		{
			this.ValidateTag(CommandTag.MakeProposal);
			return (Proposal)this.Value!;
		}

		public MergeMaturity AsMergeMaturity()
		{
			this.ValidateTag(CommandTag.MergeMaturity);
			return (MergeMaturity)this.Value!;
		}

		public Disburse AsDisburse()
		{
			this.ValidateTag(CommandTag.Disburse);
			return (Disburse)this.Value!;
		}

		private void ValidateTag(CommandTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum CommandTag
	{
		[VariantOptionType(typeof(Spawn))]
		Spawn,
		[VariantOptionType(typeof(Split))]
		Split,
		[VariantOptionType(typeof(Follow))]
		Follow,
		[VariantOptionType(typeof(ClaimOrRefresh))]
		ClaimOrRefresh,
		[VariantOptionType(typeof(Configure))]
		Configure,
		[VariantOptionType(typeof(RegisterVote))]
		RegisterVote,
		[VariantOptionType(typeof(Merge))]
		Merge,
		[VariantOptionType(typeof(DisburseToNeuron))]
		DisburseToNeuron,
		[VariantOptionType(typeof(Proposal))]
		MakeProposal,
		[VariantOptionType(typeof(MergeMaturity))]
		MergeMaturity,
		[VariantOptionType(typeof(Disburse))]
		Disburse
	}
}

Type File: 'Command_1'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(Command_1Tag))]
	public class Command_1
	{
		[VariantTagProperty()]
		public Command_1Tag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Command_1(Command_1Tag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Command_1()
		{
		}

		public static Command_1 Error(GovernanceError info)
		{
			return new Command_1(Command_1Tag.Error, info);
		}

		public static Command_1 Spawn(SpawnResponse info)
		{
			return new Command_1(Command_1Tag.Spawn, info);
		}

		public static Command_1 Split(SpawnResponse info)
		{
			return new Command_1(Command_1Tag.Split, info);
		}

		public static Command_1 Follow(Command_1.FollowInfo info)
		{
			return new Command_1(Command_1Tag.Follow, info);
		}

		public static Command_1 ClaimOrRefresh(ClaimOrRefreshResponse info)
		{
			return new Command_1(Command_1Tag.ClaimOrRefresh, info);
		}

		public static Command_1 Configure(Command_1.ConfigureInfo info)
		{
			return new Command_1(Command_1Tag.Configure, info);
		}

		public static Command_1 RegisterVote(Command_1.RegisterVoteInfo info)
		{
			return new Command_1(Command_1Tag.RegisterVote, info);
		}

		public static Command_1 Merge(Command_1.MergeInfo info)
		{
			return new Command_1(Command_1Tag.Merge, info);
		}

		public static Command_1 DisburseToNeuron(SpawnResponse info)
		{
			return new Command_1(Command_1Tag.DisburseToNeuron, info);
		}

		public static Command_1 MakeProposal(MakeProposalResponse info)
		{
			return new Command_1(Command_1Tag.MakeProposal, info);
		}

		public static Command_1 MergeMaturity(MergeMaturityResponse info)
		{
			return new Command_1(Command_1Tag.MergeMaturity, info);
		}

		public static Command_1 Disburse(DisburseResponse info)
		{
			return new Command_1(Command_1Tag.Disburse, info);
		}

		public GovernanceError AsError()
		{
			this.ValidateTag(Command_1Tag.Error);
			return (GovernanceError)this.Value!;
		}

		public SpawnResponse AsSpawn()
		{
			this.ValidateTag(Command_1Tag.Spawn);
			return (SpawnResponse)this.Value!;
		}

		public SpawnResponse AsSplit()
		{
			this.ValidateTag(Command_1Tag.Split);
			return (SpawnResponse)this.Value!;
		}

		public Command_1.FollowInfo AsFollow()
		{
			this.ValidateTag(Command_1Tag.Follow);
			return (Command_1.FollowInfo)this.Value!;
		}

		public ClaimOrRefreshResponse AsClaimOrRefresh()
		{
			this.ValidateTag(Command_1Tag.ClaimOrRefresh);
			return (ClaimOrRefreshResponse)this.Value!;
		}

		public Command_1.ConfigureInfo AsConfigure()
		{
			this.ValidateTag(Command_1Tag.Configure);
			return (Command_1.ConfigureInfo)this.Value!;
		}

		public Command_1.RegisterVoteInfo AsRegisterVote()
		{
			this.ValidateTag(Command_1Tag.RegisterVote);
			return (Command_1.RegisterVoteInfo)this.Value!;
		}

		public Command_1.MergeInfo AsMerge()
		{
			this.ValidateTag(Command_1Tag.Merge);
			return (Command_1.MergeInfo)this.Value!;
		}

		public SpawnResponse AsDisburseToNeuron()
		{
			this.ValidateTag(Command_1Tag.DisburseToNeuron);
			return (SpawnResponse)this.Value!;
		}

		public MakeProposalResponse AsMakeProposal()
		{
			this.ValidateTag(Command_1Tag.MakeProposal);
			return (MakeProposalResponse)this.Value!;
		}

		public MergeMaturityResponse AsMergeMaturity()
		{
			this.ValidateTag(Command_1Tag.MergeMaturity);
			return (MergeMaturityResponse)this.Value!;
		}

		public DisburseResponse AsDisburse()
		{
			this.ValidateTag(Command_1Tag.Disburse);
			return (DisburseResponse)this.Value!;
		}

		private void ValidateTag(Command_1Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}

		public class FollowInfo
		{
			public FollowInfo()
			{
			}
		}

		public class ConfigureInfo
		{
			public ConfigureInfo()
			{
			}
		}

		public class RegisterVoteInfo
		{
			public RegisterVoteInfo()
			{
			}
		}

		public class MergeInfo
		{
			public MergeInfo()
			{
			}
		}
	}

	public enum Command_1Tag
	{
		[VariantOptionType(typeof(GovernanceError))]
		Error,
		[VariantOptionType(typeof(SpawnResponse))]
		Spawn,
		[VariantOptionType(typeof(SpawnResponse))]
		Split,
		[VariantOptionType(typeof(Command_1.FollowInfo))]
		Follow,
		[VariantOptionType(typeof(ClaimOrRefreshResponse))]
		ClaimOrRefresh,
		[VariantOptionType(typeof(Command_1.ConfigureInfo))]
		Configure,
		[VariantOptionType(typeof(Command_1.RegisterVoteInfo))]
		RegisterVote,
		[VariantOptionType(typeof(Command_1.MergeInfo))]
		Merge,
		[VariantOptionType(typeof(SpawnResponse))]
		DisburseToNeuron,
		[VariantOptionType(typeof(MakeProposalResponse))]
		MakeProposal,
		[VariantOptionType(typeof(MergeMaturityResponse))]
		MergeMaturity,
		[VariantOptionType(typeof(DisburseResponse))]
		Disburse
	}
}

Type File: 'Command_2'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(Command_2Tag))]
	public class Command_2
	{
		[VariantTagProperty()]
		public Command_2Tag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Command_2(Command_2Tag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Command_2()
		{
		}

		public static Command_2 Spawn(Spawn info)
		{
			return new Command_2(Command_2Tag.Spawn, info);
		}

		public static Command_2 Split(Split info)
		{
			return new Command_2(Command_2Tag.Split, info);
		}

		public static Command_2 Configure(Configure info)
		{
			return new Command_2(Command_2Tag.Configure, info);
		}

		public static Command_2 Merge(Merge info)
		{
			return new Command_2(Command_2Tag.Merge, info);
		}

		public static Command_2 DisburseToNeuron(DisburseToNeuron info)
		{
			return new Command_2(Command_2Tag.DisburseToNeuron, info);
		}

		public static Command_2 ClaimOrRefreshNeuron(ClaimOrRefresh info)
		{
			return new Command_2(Command_2Tag.ClaimOrRefreshNeuron, info);
		}

		public static Command_2 MergeMaturity(MergeMaturity info)
		{
			return new Command_2(Command_2Tag.MergeMaturity, info);
		}

		public static Command_2 Disburse(Disburse info)
		{
			return new Command_2(Command_2Tag.Disburse, info);
		}

		public Spawn AsSpawn()
		{
			this.ValidateTag(Command_2Tag.Spawn);
			return (Spawn)this.Value!;
		}

		public Split AsSplit()
		{
			this.ValidateTag(Command_2Tag.Split);
			return (Split)this.Value!;
		}

		public Configure AsConfigure()
		{
			this.ValidateTag(Command_2Tag.Configure);
			return (Configure)this.Value!;
		}

		public Merge AsMerge()
		{
			this.ValidateTag(Command_2Tag.Merge);
			return (Merge)this.Value!;
		}

		public DisburseToNeuron AsDisburseToNeuron()
		{
			this.ValidateTag(Command_2Tag.DisburseToNeuron);
			return (DisburseToNeuron)this.Value!;
		}

		public ClaimOrRefresh AsClaimOrRefreshNeuron()
		{
			this.ValidateTag(Command_2Tag.ClaimOrRefreshNeuron);
			return (ClaimOrRefresh)this.Value!;
		}

		public MergeMaturity AsMergeMaturity()
		{
			this.ValidateTag(Command_2Tag.MergeMaturity);
			return (MergeMaturity)this.Value!;
		}

		public Disburse AsDisburse()
		{
			this.ValidateTag(Command_2Tag.Disburse);
			return (Disburse)this.Value!;
		}

		private void ValidateTag(Command_2Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Command_2Tag
	{
		[VariantOptionType(typeof(Spawn))]
		Spawn,
		[VariantOptionType(typeof(Split))]
		Split,
		[VariantOptionType(typeof(Configure))]
		Configure,
		[VariantOptionType(typeof(Merge))]
		Merge,
		[VariantOptionType(typeof(DisburseToNeuron))]
		DisburseToNeuron,
		[VariantOptionType(typeof(ClaimOrRefresh))]
		ClaimOrRefreshNeuron,
		[VariantOptionType(typeof(MergeMaturity))]
		MergeMaturity,
		[VariantOptionType(typeof(Disburse))]
		Disburse
	}
}

Type File: 'Configure'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class Configure
	{
		public OptionalValue<Operation> operation { get; set; }

		public Configure(OptionalValue<Operation> operation)
		{
			this.operation = operation;
		}

		public Configure()
		{
		}
	}
}

Type File: 'Disburse'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class Disburse
	{
		public OptionalValue<AccountIdentifier> to_account { get; set; }

		public OptionalValue<Amount> amount { get; set; }

		public Disburse(OptionalValue<AccountIdentifier> toAccount, OptionalValue<Amount> amount)
		{
			this.to_account = toAccount;
			this.amount = amount;
		}

		public Disburse()
		{
		}
	}
}

Type File: 'DisburseResponse'

namespace Test.Models
{
	public class DisburseResponse
	{
		public ulong transfer_block_height { get; set; }

		public DisburseResponse(ulong transferBlockHeight)
		{
			this.transfer_block_height = transferBlockHeight;
		}

		public DisburseResponse()
		{
		}
	}
}

Type File: 'DisburseToNeuron'

using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class DisburseToNeuron
	{
		public ulong dissolve_delay_seconds { get; set; }

		public bool kyc_verified { get; set; }

		public ulong amount_e8s { get; set; }

		public OptionalValue<Principal> new_controller { get; set; }

		public ulong nonce { get; set; }

		public DisburseToNeuron(ulong dissolveDelaySeconds, bool kycVerified, ulong amountE8s, OptionalValue<Principal> newController, ulong nonce)
		{
			this.dissolve_delay_seconds = dissolveDelaySeconds;
			this.kyc_verified = kycVerified;
			this.amount_e8s = amountE8s;
			this.new_controller = newController;
			this.nonce = nonce;
		}

		public DisburseToNeuron()
		{
		}
	}
}

Type File: 'DissolveState'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(DissolveStateTag))]
	public class DissolveState
	{
		[VariantTagProperty()]
		public DissolveStateTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public DissolveState(DissolveStateTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected DissolveState()
		{
		}

		public static DissolveState DissolveDelaySeconds(ulong info)
		{
			return new DissolveState(DissolveStateTag.DissolveDelaySeconds, info);
		}

		public static DissolveState WhenDissolvedTimestampSeconds(ulong info)
		{
			return new DissolveState(DissolveStateTag.WhenDissolvedTimestampSeconds, info);
		}

		public ulong AsDissolveDelaySeconds()
		{
			this.ValidateTag(DissolveStateTag.DissolveDelaySeconds);
			return (ulong)this.Value!;
		}

		public ulong AsWhenDissolvedTimestampSeconds()
		{
			this.ValidateTag(DissolveStateTag.WhenDissolvedTimestampSeconds);
			return (ulong)this.Value!;
		}

		private void ValidateTag(DissolveStateTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum DissolveStateTag
	{
		[VariantOptionType(typeof(ulong))]
		DissolveDelaySeconds,
		[VariantOptionType(typeof(ulong))]
		WhenDissolvedTimestampSeconds
	}
}

Type File: 'ExecuteNnsFunction'

using System.Collections.Generic;

namespace Test.Models
{
	public class ExecuteNnsFunction
	{
		public int nns_function { get; set; }

		public List<byte> payload { get; set; }

		public ExecuteNnsFunction(int nnsFunction, List<byte> payload)
		{
			this.nns_function = nnsFunction;
			this.payload = payload;
		}

		public ExecuteNnsFunction()
		{
		}
	}
}

Type File: 'Follow'

using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class Follow
	{
		public int topic { get; set; }

		public List<NeuronId> followees { get; set; }

		public Follow(int topic, List<NeuronId> followees)
		{
			this.topic = topic;
			this.followees = followees;
		}

		public Follow()
		{
		}
	}
}

Type File: 'Followees'

using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class Followees
	{
		public List<NeuronId> followees { get; set; }

		public Followees(List<NeuronId> followees)
		{
			this.followees = followees;
		}

		public Followees()
		{
		}
	}
}

Type File: 'Governance'

using System.Collections.Generic;
using Test.Models;
using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class Governance
	{
		public List<(int, Followees)> default_followees { get; set; }

		public ulong wait_for_quiet_threshold_seconds { get; set; }

		public OptionalValue<GovernanceCachedMetrics> metrics { get; set; }

		public List<NodeProvider> node_providers { get; set; }

		public OptionalValue<NetworkEconomics> economics { get; set; }

		public OptionalValue<RewardEvent> latest_reward_event { get; set; }

		public List<NeuronStakeTransfer> to_claim_transfers { get; set; }

		public ulong short_voting_period_seconds { get; set; }

		public List<(ulong, ProposalData)> proposals { get; set; }

		public List<(ulong, NeuronInFlightCommand)> in_flight_commands { get; set; }

		public List<(ulong, Neuron)> neurons { get; set; }

		public ulong genesis_timestamp_seconds { get; set; }

		public Governance(List<(int, Followees)> defaultFollowees, ulong waitForQuietThresholdSeconds, OptionalValue<GovernanceCachedMetrics> metrics, List<NodeProvider> nodeProviders, OptionalValue<NetworkEconomics> economics, OptionalValue<RewardEvent> latestRewardEvent, List<NeuronStakeTransfer> toClaimTransfers, ulong shortVotingPeriodSeconds, List<(ulong, ProposalData)> proposals, List<(ulong, NeuronInFlightCommand)> inFlightCommands, List<(ulong, Neuron)> neurons, ulong genesisTimestampSeconds)
		{
			this.default_followees = defaultFollowees;
			this.wait_for_quiet_threshold_seconds = waitForQuietThresholdSeconds;
			this.metrics = metrics;
			this.node_providers = nodeProviders;
			this.economics = economics;
			this.latest_reward_event = latestRewardEvent;
			this.to_claim_transfers = toClaimTransfers;
			this.short_voting_period_seconds = shortVotingPeriodSeconds;
			this.proposals = proposals;
			this.in_flight_commands = inFlightCommands;
			this.neurons = neurons;
			this.genesis_timestamp_seconds = genesisTimestampSeconds;
		}

		public Governance()
		{
		}
	}
}

Type File: 'GovernanceCachedMetrics'

using System.Collections.Generic;

namespace Test.Models
{
	public class GovernanceCachedMetrics
	{
		public List<(ulong, double)> not_dissolving_neurons_e8s_buckets { get; set; }

		public ulong garbage_collectable_neurons_count { get; set; }

		public ulong neurons_with_invalid_stake_count { get; set; }

		public List<(ulong, ulong)> not_dissolving_neurons_count_buckets { get; set; }

		public ulong total_supply_icp { get; set; }

		public ulong neurons_with_less_than_6_months_dissolve_delay_count { get; set; }

		public ulong dissolved_neurons_count { get; set; }

		public ulong total_staked_e8s { get; set; }

		public ulong not_dissolving_neurons_count { get; set; }

		public ulong dissolved_neurons_e8s { get; set; }

		public ulong neurons_with_less_than_6_months_dissolve_delay_e8s { get; set; }

		public List<(ulong, ulong)> dissolving_neurons_count_buckets { get; set; }

		public ulong dissolving_neurons_count { get; set; }

		public List<(ulong, double)> dissolving_neurons_e8s_buckets { get; set; }

		public ulong community_fund_total_staked_e8s { get; set; }

		public ulong timestamp_seconds { get; set; }

		public GovernanceCachedMetrics(List<(ulong, double)> notDissolvingNeuronsE8sBuckets, ulong garbageCollectableNeuronsCount, ulong neuronsWithInvalidStakeCount, List<(ulong, ulong)> notDissolvingNeuronsCountBuckets, ulong totalSupplyIcp, ulong neuronsWithLessThan6MonthsDissolveDelayCount, ulong dissolvedNeuronsCount, ulong totalStakedE8s, ulong notDissolvingNeuronsCount, ulong dissolvedNeuronsE8s, ulong neuronsWithLessThan6MonthsDissolveDelayE8s, List<(ulong, ulong)> dissolvingNeuronsCountBuckets, ulong dissolvingNeuronsCount, List<(ulong, double)> dissolvingNeuronsE8sBuckets, ulong communityFundTotalStakedE8s, ulong timestampSeconds)
		{
			this.not_dissolving_neurons_e8s_buckets = notDissolvingNeuronsE8sBuckets;
			this.garbage_collectable_neurons_count = garbageCollectableNeuronsCount;
			this.neurons_with_invalid_stake_count = neuronsWithInvalidStakeCount;
			this.not_dissolving_neurons_count_buckets = notDissolvingNeuronsCountBuckets;
			this.total_supply_icp = totalSupplyIcp;
			this.neurons_with_less_than_6_months_dissolve_delay_count = neuronsWithLessThan6MonthsDissolveDelayCount;
			this.dissolved_neurons_count = dissolvedNeuronsCount;
			this.total_staked_e8s = totalStakedE8s;
			this.not_dissolving_neurons_count = notDissolvingNeuronsCount;
			this.dissolved_neurons_e8s = dissolvedNeuronsE8s;
			this.neurons_with_less_than_6_months_dissolve_delay_e8s = neuronsWithLessThan6MonthsDissolveDelayE8s;
			this.dissolving_neurons_count_buckets = dissolvingNeuronsCountBuckets;
			this.dissolving_neurons_count = dissolvingNeuronsCount;
			this.dissolving_neurons_e8s_buckets = dissolvingNeuronsE8sBuckets;
			this.community_fund_total_staked_e8s = communityFundTotalStakedE8s;
			this.timestamp_seconds = timestampSeconds;
		}

		public GovernanceCachedMetrics()
		{
		}
	}
}

Type File: 'GovernanceError'

namespace Test.Models
{
	public class GovernanceError
	{
		public string error_message { get; set; }

		public int error_type { get; set; }

		public GovernanceError(string errorMessage, int errorType)
		{
			this.error_message = errorMessage;
			this.error_type = errorType;
		}

		public GovernanceError()
		{
		}
	}
}

Type File: 'IncreaseDissolveDelay'

namespace Test.Models
{
	public class IncreaseDissolveDelay
	{
		public uint additional_dissolve_delay_seconds { get; set; }

		public IncreaseDissolveDelay(uint additionalDissolveDelaySeconds)
		{
			this.additional_dissolve_delay_seconds = additionalDissolveDelaySeconds;
		}

		public IncreaseDissolveDelay()
		{
		}
	}
}

Type File: 'KnownNeuron'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class KnownNeuron
	{
		public OptionalValue<NeuronId> id { get; set; }

		public OptionalValue<KnownNeuronData> known_neuron_data { get; set; }

		public KnownNeuron(OptionalValue<NeuronId> id, OptionalValue<KnownNeuronData> knownNeuronData)
		{
			this.id = id;
			this.known_neuron_data = knownNeuronData;
		}

		public KnownNeuron()
		{
		}
	}
}

Type File: 'KnownNeuronData'

using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class KnownNeuronData
	{
		public string name { get; set; }

		public OptionalValue<string> description { get; set; }

		public KnownNeuronData(string name, OptionalValue<string> description)
		{
			this.name = name;
			this.description = description;
		}

		public KnownNeuronData()
		{
		}
	}
}

Type File: 'ListKnownNeuronsResponse'

using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class ListKnownNeuronsResponse
	{
		public List<KnownNeuron> known_neurons { get; set; }

		public ListKnownNeuronsResponse(List<KnownNeuron> knownNeurons)
		{
			this.known_neurons = knownNeurons;
		}

		public ListKnownNeuronsResponse()
		{
		}
	}
}

Type File: 'ListNeurons'

using System.Collections.Generic;

namespace Test.Models
{
	public class ListNeurons
	{
		public List<ulong> neuron_ids { get; set; }

		public bool include_neurons_readable_by_caller { get; set; }

		public ListNeurons(List<ulong> neuronIds, bool includeNeuronsReadableByCaller)
		{
			this.neuron_ids = neuronIds;
			this.include_neurons_readable_by_caller = includeNeuronsReadableByCaller;
		}

		public ListNeurons()
		{
		}
	}
}

Type File: 'ListNeuronsResponse'

using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class ListNeuronsResponse
	{
		public List<(ulong, NeuronInfo)> neuron_infos { get; set; }

		public List<Neuron> full_neurons { get; set; }

		public ListNeuronsResponse(List<(ulong, NeuronInfo)> neuronInfos, List<Neuron> fullNeurons)
		{
			this.neuron_infos = neuronInfos;
			this.full_neurons = fullNeurons;
		}

		public ListNeuronsResponse()
		{
		}
	}
}

Type File: 'ListNodeProvidersResponse'

using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class ListNodeProvidersResponse
	{
		public List<NodeProvider> node_providers { get; set; }

		public ListNodeProvidersResponse(List<NodeProvider> nodeProviders)
		{
			this.node_providers = nodeProviders;
		}

		public ListNodeProvidersResponse()
		{
		}
	}
}

Type File: 'ListProposalInfo'

using System.Collections.Generic;
using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class ListProposalInfo
	{
		public List<int> include_reward_status { get; set; }

		public OptionalValue<NeuronId> before_proposal { get; set; }

		public uint limit { get; set; }

		public List<int> exclude_topic { get; set; }

		public List<int> include_status { get; set; }

		public ListProposalInfo(List<int> includeRewardStatus, OptionalValue<NeuronId> beforeProposal, uint limit, List<int> excludeTopic, List<int> includeStatus)
		{
			this.include_reward_status = includeRewardStatus;
			this.before_proposal = beforeProposal;
			this.limit = limit;
			this.exclude_topic = excludeTopic;
			this.include_status = includeStatus;
		}

		public ListProposalInfo()
		{
		}
	}
}

Type File: 'ListProposalInfoResponse'

using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class ListProposalInfoResponse
	{
		public List<ProposalInfo> proposal_info { get; set; }

		public ListProposalInfoResponse(List<ProposalInfo> proposalInfo)
		{
			this.proposal_info = proposalInfo;
		}

		public ListProposalInfoResponse()
		{
		}
	}
}

Type File: 'MakeProposalResponse'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class MakeProposalResponse
	{
		public OptionalValue<NeuronId> proposal_id { get; set; }

		public MakeProposalResponse(OptionalValue<NeuronId> proposalId)
		{
			this.proposal_id = proposalId;
		}

		public MakeProposalResponse()
		{
		}
	}
}

Type File: 'ManageNeuron'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class ManageNeuron
	{
		public OptionalValue<NeuronId> id { get; set; }

		public OptionalValue<Command> command { get; set; }

		public OptionalValue<NeuronIdOrSubaccount> neuron_id_or_subaccount { get; set; }

		public ManageNeuron(OptionalValue<NeuronId> id, OptionalValue<Command> command, OptionalValue<NeuronIdOrSubaccount> neuronIdOrSubaccount)
		{
			this.id = id;
			this.command = command;
			this.neuron_id_or_subaccount = neuronIdOrSubaccount;
		}

		public ManageNeuron()
		{
		}
	}
}

Type File: 'ManageNeuronResponse'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class ManageNeuronResponse
	{
		public OptionalValue<Command_1> command { get; set; }

		public ManageNeuronResponse(OptionalValue<Command_1> command)
		{
			this.command = command;
		}

		public ManageNeuronResponse()
		{
		}
	}
}

Type File: 'Merge'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class Merge
	{
		public OptionalValue<NeuronId> source_neuron_id { get; set; }

		public Merge(OptionalValue<NeuronId> sourceNeuronId)
		{
			this.source_neuron_id = sourceNeuronId;
		}

		public Merge()
		{
		}
	}
}

Type File: 'MergeMaturity'

namespace Test.Models
{
	public class MergeMaturity
	{
		public uint percentage_to_merge { get; set; }

		public MergeMaturity(uint percentageToMerge)
		{
			this.percentage_to_merge = percentageToMerge;
		}

		public MergeMaturity()
		{
		}
	}
}

Type File: 'MergeMaturityResponse'

namespace Test.Models
{
	public class MergeMaturityResponse
	{
		public ulong merged_maturity_e8s { get; set; }

		public ulong new_stake_e8s { get; set; }

		public MergeMaturityResponse(ulong mergedMaturityE8s, ulong newStakeE8s)
		{
			this.merged_maturity_e8s = mergedMaturityE8s;
			this.new_stake_e8s = newStakeE8s;
		}

		public MergeMaturityResponse()
		{
		}
	}
}

Type File: 'Motion'

namespace Test.Models
{
	public class Motion
	{
		public string motion_text { get; set; }

		public Motion(string motionText)
		{
			this.motion_text = motionText;
		}

		public Motion()
		{
		}
	}
}

Type File: 'NetworkEconomics'

namespace Test.Models
{
	public class NetworkEconomics
	{
		public ulong neuron_minimum_stake_e8s { get; set; }

		public uint max_proposals_to_keep_per_topic { get; set; }

		public ulong neuron_management_fee_per_proposal_e8s { get; set; }

		public ulong reject_cost_e8s { get; set; }

		public ulong transaction_fee_e8s { get; set; }

		public ulong neuron_spawn_dissolve_delay_seconds { get; set; }

		public ulong minimum_icp_xdr_rate { get; set; }

		public ulong maximum_node_provider_rewards_e8s { get; set; }

		public NetworkEconomics(ulong neuronMinimumStakeE8s, uint maxProposalsToKeepPerTopic, ulong neuronManagementFeePerProposalE8s, ulong rejectCostE8s, ulong transactionFeeE8s, ulong neuronSpawnDissolveDelaySeconds, ulong minimumIcpXdrRate, ulong maximumNodeProviderRewardsE8s)
		{
			this.neuron_minimum_stake_e8s = neuronMinimumStakeE8s;
			this.max_proposals_to_keep_per_topic = maxProposalsToKeepPerTopic;
			this.neuron_management_fee_per_proposal_e8s = neuronManagementFeePerProposalE8s;
			this.reject_cost_e8s = rejectCostE8s;
			this.transaction_fee_e8s = transactionFeeE8s;
			this.neuron_spawn_dissolve_delay_seconds = neuronSpawnDissolveDelaySeconds;
			this.minimum_icp_xdr_rate = minimumIcpXdrRate;
			this.maximum_node_provider_rewards_e8s = maximumNodeProviderRewardsE8s;
		}

		public NetworkEconomics()
		{
		}
	}
}

Type File: 'Neuron'

using EdjCase.ICP.Candid.Models;
using Test.Models;
using System.Collections.Generic;

namespace Test.Models
{
	public class Neuron
	{
		public OptionalValue<NeuronId> id { get; set; }

		public OptionalValue<Principal> controller { get; set; }

		public List<BallotInfo> recent_ballots { get; set; }

		public bool kyc_verified { get; set; }

		public bool not_for_profit { get; set; }

		public ulong maturity_e8s_equivalent { get; set; }

		public ulong cached_neuron_stake_e8s { get; set; }

		public ulong created_timestamp_seconds { get; set; }

		public ulong aging_since_timestamp_seconds { get; set; }

		public List<Principal> hot_keys { get; set; }

		public List<byte> account { get; set; }

		public OptionalValue<ulong> joined_community_fund_timestamp_seconds { get; set; }

		public OptionalValue<DissolveState> dissolve_state { get; set; }

		public List<(int, Followees)> followees { get; set; }

		public ulong neuron_fees_e8s { get; set; }

		public OptionalValue<NeuronStakeTransfer> transfer { get; set; }

		public OptionalValue<KnownNeuronData> known_neuron_data { get; set; }

		public Neuron(OptionalValue<NeuronId> id, OptionalValue<Principal> controller, List<BallotInfo> recentBallots, bool kycVerified, bool notForProfit, ulong maturityE8sEquivalent, ulong cachedNeuronStakeE8s, ulong createdTimestampSeconds, ulong agingSinceTimestampSeconds, List<Principal> hotKeys, List<byte> account, OptionalValue<ulong> joinedCommunityFundTimestampSeconds, OptionalValue<DissolveState> dissolveState, List<(int, Followees)> followees, ulong neuronFeesE8s, OptionalValue<NeuronStakeTransfer> transfer, OptionalValue<KnownNeuronData> knownNeuronData)
		{
			this.id = id;
			this.controller = controller;
			this.recent_ballots = recentBallots;
			this.kyc_verified = kycVerified;
			this.not_for_profit = notForProfit;
			this.maturity_e8s_equivalent = maturityE8sEquivalent;
			this.cached_neuron_stake_e8s = cachedNeuronStakeE8s;
			this.created_timestamp_seconds = createdTimestampSeconds;
			this.aging_since_timestamp_seconds = agingSinceTimestampSeconds;
			this.hot_keys = hotKeys;
			this.account = account;
			this.joined_community_fund_timestamp_seconds = joinedCommunityFundTimestampSeconds;
			this.dissolve_state = dissolveState;
			this.followees = followees;
			this.neuron_fees_e8s = neuronFeesE8s;
			this.transfer = transfer;
			this.known_neuron_data = knownNeuronData;
		}

		public Neuron()
		{
		}
	}
}

Type File: 'NeuronId'

namespace Test.Models
{
	public class NeuronId
	{
		public ulong id { get; set; }

		public NeuronId(ulong id)
		{
			this.id = id;
		}

		public NeuronId()
		{
		}
	}
}

Type File: 'NeuronIdOrSubaccount'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System.Collections.Generic;
using System;

namespace Test.Models
{
	[Variant(typeof(NeuronIdOrSubaccountTag))]
	public class NeuronIdOrSubaccount
	{
		[VariantTagProperty()]
		public NeuronIdOrSubaccountTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public NeuronIdOrSubaccount(NeuronIdOrSubaccountTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected NeuronIdOrSubaccount()
		{
		}

		public static NeuronIdOrSubaccount Subaccount(List<byte> info)
		{
			return new NeuronIdOrSubaccount(NeuronIdOrSubaccountTag.Subaccount, info);
		}

		public static NeuronIdOrSubaccount NeuronId(NeuronId info)
		{
			return new NeuronIdOrSubaccount(NeuronIdOrSubaccountTag.NeuronId, info);
		}

		public List<byte> AsSubaccount()
		{
			this.ValidateTag(NeuronIdOrSubaccountTag.Subaccount);
			return (List<byte>)this.Value!;
		}

		public NeuronId AsNeuronId()
		{
			this.ValidateTag(NeuronIdOrSubaccountTag.NeuronId);
			return (NeuronId)this.Value!;
		}

		private void ValidateTag(NeuronIdOrSubaccountTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum NeuronIdOrSubaccountTag
	{
		[VariantOptionType(typeof(List<byte>))]
		Subaccount,
		[VariantOptionType(typeof(NeuronId))]
		NeuronId
	}
}

Type File: 'NeuronInFlightCommand'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class NeuronInFlightCommand
	{
		public OptionalValue<Command_2> command { get; set; }

		public ulong timestamp { get; set; }

		public NeuronInFlightCommand(OptionalValue<Command_2> command, ulong timestamp)
		{
			this.command = command;
			this.timestamp = timestamp;
		}

		public NeuronInFlightCommand()
		{
		}
	}
}

Type File: 'NeuronInfo'

using System.Collections.Generic;
using Test.Models;
using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class NeuronInfo
	{
		public ulong dissolve_delay_seconds { get; set; }

		public List<BallotInfo> recent_ballots { get; set; }

		public ulong created_timestamp_seconds { get; set; }

		public int state { get; set; }

		public ulong stake_e8s { get; set; }

		public OptionalValue<ulong> joined_community_fund_timestamp_seconds { get; set; }

		public ulong retrieved_at_timestamp_seconds { get; set; }

		public OptionalValue<KnownNeuronData> known_neuron_data { get; set; }

		public ulong voting_power { get; set; }

		public ulong age_seconds { get; set; }

		public NeuronInfo(ulong dissolveDelaySeconds, List<BallotInfo> recentBallots, ulong createdTimestampSeconds, int state, ulong stakeE8s, OptionalValue<ulong> joinedCommunityFundTimestampSeconds, ulong retrievedAtTimestampSeconds, OptionalValue<KnownNeuronData> knownNeuronData, ulong votingPower, ulong ageSeconds)
		{
			this.dissolve_delay_seconds = dissolveDelaySeconds;
			this.recent_ballots = recentBallots;
			this.created_timestamp_seconds = createdTimestampSeconds;
			this.state = state;
			this.stake_e8s = stakeE8s;
			this.joined_community_fund_timestamp_seconds = joinedCommunityFundTimestampSeconds;
			this.retrieved_at_timestamp_seconds = retrievedAtTimestampSeconds;
			this.known_neuron_data = knownNeuronData;
			this.voting_power = votingPower;
			this.age_seconds = ageSeconds;
		}

		public NeuronInfo()
		{
		}
	}
}

Type File: 'NeuronStakeTransfer'

using System.Collections.Generic;
using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class NeuronStakeTransfer
	{
		public List<byte> to_subaccount { get; set; }

		public ulong neuron_stake_e8s { get; set; }

		public OptionalValue<Principal> from { get; set; }

		public ulong memo { get; set; }

		public List<byte> from_subaccount { get; set; }

		public ulong transfer_timestamp { get; set; }

		public ulong block_height { get; set; }

		public NeuronStakeTransfer(List<byte> toSubaccount, ulong neuronStakeE8s, OptionalValue<Principal> from, ulong memo, List<byte> fromSubaccount, ulong transferTimestamp, ulong blockHeight)
		{
			this.to_subaccount = toSubaccount;
			this.neuron_stake_e8s = neuronStakeE8s;
			this.from = from;
			this.memo = memo;
			this.from_subaccount = fromSubaccount;
			this.transfer_timestamp = transferTimestamp;
			this.block_height = blockHeight;
		}

		public NeuronStakeTransfer()
		{
		}
	}
}

Type File: 'NodeProvider'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class NodeProvider
	{
		public OptionalValue<Principal> id { get; set; }

		public OptionalValue<AccountIdentifier> reward_account { get; set; }

		public NodeProvider(OptionalValue<Principal> id, OptionalValue<AccountIdentifier> rewardAccount)
		{
			this.id = id;
			this.reward_account = rewardAccount;
		}

		public NodeProvider()
		{
		}
	}
}

Type File: 'Operation'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(OperationTag))]
	public class Operation
	{
		[VariantTagProperty()]
		public OperationTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Operation(OperationTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Operation()
		{
		}

		public static Operation RemoveHotKey(RemoveHotKey info)
		{
			return new Operation(OperationTag.RemoveHotKey, info);
		}

		public static Operation AddHotKey(AddHotKey info)
		{
			return new Operation(OperationTag.AddHotKey, info);
		}

		public static Operation StopDissolving(Operation.StopDissolvingInfo info)
		{
			return new Operation(OperationTag.StopDissolving, info);
		}

		public static Operation StartDissolving(Operation.StartDissolvingInfo info)
		{
			return new Operation(OperationTag.StartDissolving, info);
		}

		public static Operation IncreaseDissolveDelay(IncreaseDissolveDelay info)
		{
			return new Operation(OperationTag.IncreaseDissolveDelay, info);
		}

		public static Operation JoinCommunityFund(Operation.JoinCommunityFundInfo info)
		{
			return new Operation(OperationTag.JoinCommunityFund, info);
		}

		public static Operation SetDissolveTimestamp(SetDissolveTimestamp info)
		{
			return new Operation(OperationTag.SetDissolveTimestamp, info);
		}

		public RemoveHotKey AsRemoveHotKey()
		{
			this.ValidateTag(OperationTag.RemoveHotKey);
			return (RemoveHotKey)this.Value!;
		}

		public AddHotKey AsAddHotKey()
		{
			this.ValidateTag(OperationTag.AddHotKey);
			return (AddHotKey)this.Value!;
		}

		public Operation.StopDissolvingInfo AsStopDissolving()
		{
			this.ValidateTag(OperationTag.StopDissolving);
			return (Operation.StopDissolvingInfo)this.Value!;
		}

		public Operation.StartDissolvingInfo AsStartDissolving()
		{
			this.ValidateTag(OperationTag.StartDissolving);
			return (Operation.StartDissolvingInfo)this.Value!;
		}

		public IncreaseDissolveDelay AsIncreaseDissolveDelay()
		{
			this.ValidateTag(OperationTag.IncreaseDissolveDelay);
			return (IncreaseDissolveDelay)this.Value!;
		}

		public Operation.JoinCommunityFundInfo AsJoinCommunityFund()
		{
			this.ValidateTag(OperationTag.JoinCommunityFund);
			return (Operation.JoinCommunityFundInfo)this.Value!;
		}

		public SetDissolveTimestamp AsSetDissolveTimestamp()
		{
			this.ValidateTag(OperationTag.SetDissolveTimestamp);
			return (SetDissolveTimestamp)this.Value!;
		}

		private void ValidateTag(OperationTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}

		public class StopDissolvingInfo
		{
			public StopDissolvingInfo()
			{
			}
		}

		public class StartDissolvingInfo
		{
			public StartDissolvingInfo()
			{
			}
		}

		public class JoinCommunityFundInfo
		{
			public JoinCommunityFundInfo()
			{
			}
		}
	}

	public enum OperationTag
	{
		[VariantOptionType(typeof(RemoveHotKey))]
		RemoveHotKey,
		[VariantOptionType(typeof(AddHotKey))]
		AddHotKey,
		[VariantOptionType(typeof(Operation.StopDissolvingInfo))]
		StopDissolving,
		[VariantOptionType(typeof(Operation.StartDissolvingInfo))]
		StartDissolving,
		[VariantOptionType(typeof(IncreaseDissolveDelay))]
		IncreaseDissolveDelay,
		[VariantOptionType(typeof(Operation.JoinCommunityFundInfo))]
		JoinCommunityFund,
		[VariantOptionType(typeof(SetDissolveTimestamp))]
		SetDissolveTimestamp
	}
}

Type File: 'Proposal'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class Proposal
	{
		public string url { get; set; }

		public OptionalValue<string> title { get; set; }

		public OptionalValue<Action> action { get; set; }

		public string summary { get; set; }

		public Proposal(string url, OptionalValue<string> title, OptionalValue<Action> action, string summary)
		{
			this.url = url;
			this.title = title;
			this.action = action;
			this.summary = summary;
		}

		public Proposal()
		{
		}
	}
}

Type File: 'ProposalData'

using EdjCase.ICP.Candid.Models;
using Test.Models;
using System.Collections.Generic;

namespace Test.Models
{
	public class ProposalData
	{
		public OptionalValue<NeuronId> id { get; set; }

		public OptionalValue<GovernanceError> failure_reason { get; set; }

		public List<(ulong, Ballot)> ballots { get; set; }

		public ulong proposal_timestamp_seconds { get; set; }

		public ulong reward_event_round { get; set; }

		public ulong failed_timestamp_seconds { get; set; }

		public ulong reject_cost_e8s { get; set; }

		public OptionalValue<Tally> latest_tally { get; set; }

		public ulong decided_timestamp_seconds { get; set; }

		public OptionalValue<Proposal> proposal { get; set; }

		public OptionalValue<NeuronId> proposer { get; set; }

		public OptionalValue<WaitForQuietState> wait_for_quiet_state { get; set; }

		public ulong executed_timestamp_seconds { get; set; }

		public ProposalData(OptionalValue<NeuronId> id, OptionalValue<GovernanceError> failureReason, List<(ulong, Ballot)> ballots, ulong proposalTimestampSeconds, ulong rewardEventRound, ulong failedTimestampSeconds, ulong rejectCostE8s, OptionalValue<Tally> latestTally, ulong decidedTimestampSeconds, OptionalValue<Proposal> proposal, OptionalValue<NeuronId> proposer, OptionalValue<WaitForQuietState> waitForQuietState, ulong executedTimestampSeconds)
		{
			this.id = id;
			this.failure_reason = failureReason;
			this.ballots = ballots;
			this.proposal_timestamp_seconds = proposalTimestampSeconds;
			this.reward_event_round = rewardEventRound;
			this.failed_timestamp_seconds = failedTimestampSeconds;
			this.reject_cost_e8s = rejectCostE8s;
			this.latest_tally = latestTally;
			this.decided_timestamp_seconds = decidedTimestampSeconds;
			this.proposal = proposal;
			this.proposer = proposer;
			this.wait_for_quiet_state = waitForQuietState;
			this.executed_timestamp_seconds = executedTimestampSeconds;
		}

		public ProposalData()
		{
		}
	}
}

Type File: 'ProposalInfo'

using EdjCase.ICP.Candid.Models;
using Test.Models;
using System.Collections.Generic;

namespace Test.Models
{
	public class ProposalInfo
	{
		public OptionalValue<NeuronId> id { get; set; }

		public int status { get; set; }

		public int topic { get; set; }

		public OptionalValue<GovernanceError> failure_reason { get; set; }

		public List<(ulong, Ballot)> ballots { get; set; }

		public ulong proposal_timestamp_seconds { get; set; }

		public ulong reward_event_round { get; set; }

		public OptionalValue<ulong> deadline_timestamp_seconds { get; set; }

		public ulong failed_timestamp_seconds { get; set; }

		public ulong reject_cost_e8s { get; set; }

		public OptionalValue<Tally> latest_tally { get; set; }

		public int reward_status { get; set; }

		public ulong decided_timestamp_seconds { get; set; }

		public OptionalValue<Proposal> proposal { get; set; }

		public OptionalValue<NeuronId> proposer { get; set; }

		public ulong executed_timestamp_seconds { get; set; }

		public ProposalInfo(OptionalValue<NeuronId> id, int status, int topic, OptionalValue<GovernanceError> failureReason, List<(ulong, Ballot)> ballots, ulong proposalTimestampSeconds, ulong rewardEventRound, OptionalValue<ulong> deadlineTimestampSeconds, ulong failedTimestampSeconds, ulong rejectCostE8s, OptionalValue<Tally> latestTally, int rewardStatus, ulong decidedTimestampSeconds, OptionalValue<Proposal> proposal, OptionalValue<NeuronId> proposer, ulong executedTimestampSeconds)
		{
			this.id = id;
			this.status = status;
			this.topic = topic;
			this.failure_reason = failureReason;
			this.ballots = ballots;
			this.proposal_timestamp_seconds = proposalTimestampSeconds;
			this.reward_event_round = rewardEventRound;
			this.deadline_timestamp_seconds = deadlineTimestampSeconds;
			this.failed_timestamp_seconds = failedTimestampSeconds;
			this.reject_cost_e8s = rejectCostE8s;
			this.latest_tally = latestTally;
			this.reward_status = rewardStatus;
			this.decided_timestamp_seconds = decidedTimestampSeconds;
			this.proposal = proposal;
			this.proposer = proposer;
			this.executed_timestamp_seconds = executedTimestampSeconds;
		}

		public ProposalInfo()
		{
		}
	}
}

Type File: 'RegisterVote'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class RegisterVote
	{
		public int vote { get; set; }

		public OptionalValue<NeuronId> proposal { get; set; }

		public RegisterVote(int vote, OptionalValue<NeuronId> proposal)
		{
			this.vote = vote;
			this.proposal = proposal;
		}

		public RegisterVote()
		{
		}
	}
}

Type File: 'RemoveHotKey'

using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class RemoveHotKey
	{
		public OptionalValue<Principal> hot_key_to_remove { get; set; }

		public RemoveHotKey(OptionalValue<Principal> hotKeyToRemove)
		{
			this.hot_key_to_remove = hotKeyToRemove;
		}

		public RemoveHotKey()
		{
		}
	}
}

Type File: 'Result'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(ResultTag))]
	public class Result
	{
		[VariantTagProperty()]
		public ResultTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Result(ResultTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result()
		{
		}

		public static Result Ok()
		{
			return new Result(ResultTag.Ok, null);
		}

		public static Result Err(GovernanceError info)
		{
			return new Result(ResultTag.Err, info);
		}

		public GovernanceError AsErr()
		{
			this.ValidateTag(ResultTag.Err);
			return (GovernanceError)this.Value!;
		}

		private void ValidateTag(ResultTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum ResultTag
	{
		Ok,
		[VariantOptionType(typeof(GovernanceError))]
		Err
	}
}

Type File: 'Result_1'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(Result_1Tag))]
	public class Result_1
	{
		[VariantTagProperty()]
		public Result_1Tag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Result_1(Result_1Tag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result_1()
		{
		}

		public static Result_1 Error(GovernanceError info)
		{
			return new Result_1(Result_1Tag.Error, info);
		}

		public static Result_1 NeuronId(NeuronId info)
		{
			return new Result_1(Result_1Tag.NeuronId, info);
		}

		public GovernanceError AsError()
		{
			this.ValidateTag(Result_1Tag.Error);
			return (GovernanceError)this.Value!;
		}

		public NeuronId AsNeuronId()
		{
			this.ValidateTag(Result_1Tag.NeuronId);
			return (NeuronId)this.Value!;
		}

		private void ValidateTag(Result_1Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result_1Tag
	{
		[VariantOptionType(typeof(GovernanceError))]
		Error,
		[VariantOptionType(typeof(NeuronId))]
		NeuronId
	}
}

Type File: 'Result_2'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(Result_2Tag))]
	public class Result_2
	{
		[VariantTagProperty()]
		public Result_2Tag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Result_2(Result_2Tag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result_2()
		{
		}

		public static Result_2 Ok(Neuron info)
		{
			return new Result_2(Result_2Tag.Ok, info);
		}

		public static Result_2 Err(GovernanceError info)
		{
			return new Result_2(Result_2Tag.Err, info);
		}

		public Neuron AsOk()
		{
			this.ValidateTag(Result_2Tag.Ok);
			return (Neuron)this.Value!;
		}

		public GovernanceError AsErr()
		{
			this.ValidateTag(Result_2Tag.Err);
			return (GovernanceError)this.Value!;
		}

		private void ValidateTag(Result_2Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result_2Tag
	{
		[VariantOptionType(typeof(Neuron))]
		Ok,
		[VariantOptionType(typeof(GovernanceError))]
		Err
	}
}

Type File: 'Result_3'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(Result_3Tag))]
	public class Result_3
	{
		[VariantTagProperty()]
		public Result_3Tag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Result_3(Result_3Tag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result_3()
		{
		}

		public static Result_3 Ok(RewardNodeProviders info)
		{
			return new Result_3(Result_3Tag.Ok, info);
		}

		public static Result_3 Err(GovernanceError info)
		{
			return new Result_3(Result_3Tag.Err, info);
		}

		public RewardNodeProviders AsOk()
		{
			this.ValidateTag(Result_3Tag.Ok);
			return (RewardNodeProviders)this.Value!;
		}

		public GovernanceError AsErr()
		{
			this.ValidateTag(Result_3Tag.Err);
			return (GovernanceError)this.Value!;
		}

		private void ValidateTag(Result_3Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result_3Tag
	{
		[VariantOptionType(typeof(RewardNodeProviders))]
		Ok,
		[VariantOptionType(typeof(GovernanceError))]
		Err
	}
}

Type File: 'Result_4'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(Result_4Tag))]
	public class Result_4
	{
		[VariantTagProperty()]
		public Result_4Tag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Result_4(Result_4Tag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result_4()
		{
		}

		public static Result_4 Ok(NeuronInfo info)
		{
			return new Result_4(Result_4Tag.Ok, info);
		}

		public static Result_4 Err(GovernanceError info)
		{
			return new Result_4(Result_4Tag.Err, info);
		}

		public NeuronInfo AsOk()
		{
			this.ValidateTag(Result_4Tag.Ok);
			return (NeuronInfo)this.Value!;
		}

		public GovernanceError AsErr()
		{
			this.ValidateTag(Result_4Tag.Err);
			return (GovernanceError)this.Value!;
		}

		private void ValidateTag(Result_4Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result_4Tag
	{
		[VariantOptionType(typeof(NeuronInfo))]
		Ok,
		[VariantOptionType(typeof(GovernanceError))]
		Err
	}
}

Type File: 'Result_5'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(Result_5Tag))]
	public class Result_5
	{
		[VariantTagProperty()]
		public Result_5Tag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public Result_5(Result_5Tag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result_5()
		{
		}

		public static Result_5 Ok(NodeProvider info)
		{
			return new Result_5(Result_5Tag.Ok, info);
		}

		public static Result_5 Err(GovernanceError info)
		{
			return new Result_5(Result_5Tag.Err, info);
		}

		public NodeProvider AsOk()
		{
			this.ValidateTag(Result_5Tag.Ok);
			return (NodeProvider)this.Value!;
		}

		public GovernanceError AsErr()
		{
			this.ValidateTag(Result_5Tag.Err);
			return (GovernanceError)this.Value!;
		}

		private void ValidateTag(Result_5Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result_5Tag
	{
		[VariantOptionType(typeof(NodeProvider))]
		Ok,
		[VariantOptionType(typeof(GovernanceError))]
		Err
	}
}

Type File: 'RewardEvent'

using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class RewardEvent
	{
		public ulong day_after_genesis { get; set; }

		public ulong actual_timestamp_seconds { get; set; }

		public ulong distributed_e8s_equivalent { get; set; }

		public List<NeuronId> settled_proposals { get; set; }

		public RewardEvent(ulong dayAfterGenesis, ulong actualTimestampSeconds, ulong distributedE8sEquivalent, List<NeuronId> settledProposals)
		{
			this.day_after_genesis = dayAfterGenesis;
			this.actual_timestamp_seconds = actualTimestampSeconds;
			this.distributed_e8s_equivalent = distributedE8sEquivalent;
			this.settled_proposals = settledProposals;
		}

		public RewardEvent()
		{
		}
	}
}

Type File: 'RewardMode'

using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(RewardModeTag))]
	public class RewardMode
	{
		[VariantTagProperty()]
		public RewardModeTag Tag { get; set; }

		[VariantValueProperty()]
		public object Value { get; set; }

		public RewardMode(RewardModeTag tag, object value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected RewardMode()
		{
		}

		public static RewardMode RewardToNeuron(RewardToNeuron info)
		{
			return new RewardMode(RewardModeTag.RewardToNeuron, info);
		}

		public static RewardMode RewardToAccount(RewardToAccount info)
		{
			return new RewardMode(RewardModeTag.RewardToAccount, info);
		}

		public RewardToNeuron AsRewardToNeuron()
		{
			this.ValidateTag(RewardModeTag.RewardToNeuron);
			return (RewardToNeuron)this.Value!;
		}

		public RewardToAccount AsRewardToAccount()
		{
			this.ValidateTag(RewardModeTag.RewardToAccount);
			return (RewardToAccount)this.Value!;
		}

		private void ValidateTag(RewardModeTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum RewardModeTag
	{
		[VariantOptionType(typeof(RewardToNeuron))]
		RewardToNeuron,
		[VariantOptionType(typeof(RewardToAccount))]
		RewardToAccount
	}
}

Type File: 'RewardNodeProvider'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class RewardNodeProvider
	{
		public OptionalValue<NodeProvider> node_provider { get; set; }

		public OptionalValue<RewardMode> reward_mode { get; set; }

		public ulong amount_e8s { get; set; }

		public RewardNodeProvider(OptionalValue<NodeProvider> nodeProvider, OptionalValue<RewardMode> rewardMode, ulong amountE8s)
		{
			this.node_provider = nodeProvider;
			this.reward_mode = rewardMode;
			this.amount_e8s = amountE8s;
		}

		public RewardNodeProvider()
		{
		}
	}
}

Type File: 'RewardNodeProviders'

using EdjCase.ICP.Candid.Models;
using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class RewardNodeProviders
	{
		public OptionalValue<bool> use_registry_derived_rewards { get; set; }

		public List<RewardNodeProvider> rewards { get; set; }

		public RewardNodeProviders(OptionalValue<bool> useRegistryDerivedRewards, List<RewardNodeProvider> rewards)
		{
			this.use_registry_derived_rewards = useRegistryDerivedRewards;
			this.rewards = rewards;
		}

		public RewardNodeProviders()
		{
		}
	}
}

Type File: 'RewardToAccount'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class RewardToAccount
	{
		public OptionalValue<AccountIdentifier> to_account { get; set; }

		public RewardToAccount(OptionalValue<AccountIdentifier> toAccount)
		{
			this.to_account = toAccount;
		}

		public RewardToAccount()
		{
		}
	}
}

Type File: 'RewardToNeuron'

namespace Test.Models
{
	public class RewardToNeuron
	{
		public ulong dissolve_delay_seconds { get; set; }

		public RewardToNeuron(ulong dissolveDelaySeconds)
		{
			this.dissolve_delay_seconds = dissolveDelaySeconds;
		}

		public RewardToNeuron()
		{
		}
	}
}

Type File: 'SetDefaultFollowees'

using System.Collections.Generic;
using Test.Models;

namespace Test.Models
{
	public class SetDefaultFollowees
	{
		public List<(int, Followees)> default_followees { get; set; }

		public SetDefaultFollowees(List<(int, Followees)> defaultFollowees)
		{
			this.default_followees = defaultFollowees;
		}

		public SetDefaultFollowees()
		{
		}
	}
}

Type File: 'SetDissolveTimestamp'

namespace Test.Models
{
	public class SetDissolveTimestamp
	{
		public ulong dissolve_timestamp_seconds { get; set; }

		public SetDissolveTimestamp(ulong dissolveTimestampSeconds)
		{
			this.dissolve_timestamp_seconds = dissolveTimestampSeconds;
		}

		public SetDissolveTimestamp()
		{
		}
	}
}

Type File: 'Spawn'

using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class Spawn
	{
		public OptionalValue<uint> percentage_to_spawn { get; set; }

		public OptionalValue<Principal> new_controller { get; set; }

		public OptionalValue<ulong> nonce { get; set; }

		public Spawn(OptionalValue<uint> percentageToSpawn, OptionalValue<Principal> newController, OptionalValue<ulong> nonce)
		{
			this.percentage_to_spawn = percentageToSpawn;
			this.new_controller = newController;
			this.nonce = nonce;
		}

		public Spawn()
		{
		}
	}
}

Type File: 'SpawnResponse'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class SpawnResponse
	{
		public OptionalValue<NeuronId> created_neuron_id { get; set; }

		public SpawnResponse(OptionalValue<NeuronId> createdNeuronId)
		{
			this.created_neuron_id = createdNeuronId;
		}

		public SpawnResponse()
		{
		}
	}
}

Type File: 'Split'

namespace Test.Models
{
	public class Split
	{
		public ulong amount_e8s { get; set; }

		public Split(ulong amountE8s)
		{
			this.amount_e8s = amountE8s;
		}

		public Split()
		{
		}
	}
}

Type File: 'Tally'

namespace Test.Models
{
	public class Tally
	{
		public ulong no { get; set; }

		public ulong yes { get; set; }

		public ulong total { get; set; }

		public ulong timestamp_seconds { get; set; }

		public Tally(ulong no, ulong yes, ulong total, ulong timestampSeconds)
		{
			this.no = no;
			this.yes = yes;
			this.total = total;
			this.timestamp_seconds = timestampSeconds;
		}

		public Tally()
		{
		}
	}
}

Type File: 'UpdateNodeProvider'

using EdjCase.ICP.Candid.Models;
using Test.Models;

namespace Test.Models
{
	public class UpdateNodeProvider
	{
		public OptionalValue<AccountIdentifier> reward_account { get; set; }

		public UpdateNodeProvider(OptionalValue<AccountIdentifier> rewardAccount)
		{
			this.reward_account = rewardAccount;
		}

		public UpdateNodeProvider()
		{
		}
	}
}

Type File: 'WaitForQuietState'

namespace Test.Models
{
	public class WaitForQuietState
	{
		public ulong current_deadline_timestamp_seconds { get; set; }

		public WaitForQuietState(ulong currentDeadlineTimestampSeconds)
		{
			this.current_deadline_timestamp_seconds = currentDeadlineTimestampSeconds;
		}

		public WaitForQuietState()
		{
		}
	}
}
