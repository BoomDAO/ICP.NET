{
  "Name": {},
  "ClientFile": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\nusing EdjCase.ICP.Agent.Agents;\nusing EdjCase.ICP.Agent.Responses;\nusing EdjCase.ICP.Candid.Models;\nusing Test.Models;\n\nnamespace Test\n{\n\tpublic class GovernanceApiClient\n\t{\n\t\tpublic IAgent Agent { get; }\n\t\tpublic Principal CanisterId { get; }\n\t\tpublic GovernanceApiClient(EdjCase.ICP.Agent.Agents.IAgent agent, EdjCase.ICP.Candid.Models.Principal canisterId)\n\t\t{\n\t\t\tthis.Agent = agent ?? throw new ArgumentNullException(nameof(agent));\n\t\t\tthis.CanisterId = canisterId ?? throw new ArgumentNullException(nameof(canisterId));\n\t\t}\n\t\tpublic async Task<Result> ClaimGtcNeurons(EdjCase.ICP.Candid.Models.Principal arg0, System.Collections.Generic.List<NeuronId> arg1)\n\t\t{\n\t\t\tstring method = \"claim_gtc_neurons\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tCandidTypedValue p1 = CandidTypedValue.FromObject(arg1);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg);\n\t\t\tResult r0 = responseArg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ClaimOrRefreshNeuronFromAccountResponse> ClaimOrRefreshNeuronFromAccount(ClaimOrRefreshNeuronFromAccount arg0)\n\t\t{\n\t\t\tstring method = \"claim_or_refresh_neuron_from_account\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg);\n\t\t\tClaimOrRefreshNeuronFromAccountResponse r0 = responseArg.Values[0].ToObject<ClaimOrRefreshNeuronFromAccountResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<string> GetBuildMetadata()\n\t\t{\n\t\t\tstring method = \"get_build_metadata\";\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tstring r0 = reply.Arg.Values[0].ToObject<string>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result2> GetFullNeuron(ulong arg0)\n\t\t{\n\t\t\tstring method = \"get_full_neuron\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tResult2 r0 = reply.Arg.Values[0].ToObject<Result2>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result2> GetFullNeuronByIdOrSubaccount(NeuronIdOrSubaccount arg0)\n\t\t{\n\t\t\tstring method = \"get_full_neuron_by_id_or_subaccount\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tResult2 r0 = reply.Arg.Values[0].ToObject<Result2>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result3> GetMonthlyNodeProviderRewards()\n\t\t{\n\t\t\tstring method = \"get_monthly_node_provider_rewards\";\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg);\n\t\t\tResult3 r0 = responseArg.Values[0].ToObject<Result3>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<NetworkEconomics> GetNetworkEconomicsParameters()\n\t\t{\n\t\t\tstring method = \"get_network_economics_parameters\";\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tNetworkEconomics r0 = reply.Arg.Values[0].ToObject<NetworkEconomics>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<System.Collections.Generic.List<ulong>> GetNeuronIds()\n\t\t{\n\t\t\tstring method = \"get_neuron_ids\";\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tSystem.Collections.Generic.List<ulong> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<ulong>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result4> GetNeuronInfo(ulong arg0)\n\t\t{\n\t\t\tstring method = \"get_neuron_info\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tResult4 r0 = reply.Arg.Values[0].ToObject<Result4>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result4> GetNeuronInfoByIdOrSubaccount(NeuronIdOrSubaccount arg0)\n\t\t{\n\t\t\tstring method = \"get_neuron_info_by_id_or_subaccount\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tResult4 r0 = reply.Arg.Values[0].ToObject<Result4>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result5> GetNodeProviderByCaller()\n\t\t{\n\t\t\tstring method = \"get_node_provider_by_caller\";\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tResult5 r0 = reply.Arg.Values[0].ToObject<Result5>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<System.Collections.Generic.List<ProposalInfo>> GetPendingProposals()\n\t\t{\n\t\t\tstring method = \"get_pending_proposals\";\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tSystem.Collections.Generic.List<ProposalInfo> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<ProposalInfo>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<EdjCase.ICP.Candid.Models.OptionalValue<ProposalInfo>> GetProposalInfo(ulong arg0)\n\t\t{\n\t\t\tstring method = \"get_proposal_info\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tEdjCase.ICP.Candid.Models.OptionalValue<ProposalInfo> r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Candid.Models.OptionalValue<ProposalInfo>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListKnownNeuronsResponse> ListKnownNeurons()\n\t\t{\n\t\t\tstring method = \"list_known_neurons\";\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tListKnownNeuronsResponse r0 = reply.Arg.Values[0].ToObject<ListKnownNeuronsResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListNeuronsResponse> ListNeurons(ListNeurons arg0)\n\t\t{\n\t\t\tstring method = \"list_neurons\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tListNeuronsResponse r0 = reply.Arg.Values[0].ToObject<ListNeuronsResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListNodeProvidersResponse> ListNodeProviders()\n\t\t{\n\t\t\tstring method = \"list_node_providers\";\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tListNodeProvidersResponse r0 = reply.Arg.Values[0].ToObject<ListNodeProvidersResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListProposalInfoResponse> ListProposals(ListProposalInfo arg0)\n\t\t{\n\t\t\tstring method = \"list_proposals\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg);\n\t\t\tCandidArg reply = response.ThrowOrGetReply();\n\t\t\tListProposalInfoResponse r0 = reply.Arg.Values[0].ToObject<ListProposalInfoResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ManageNeuronResponse> ManageNeuron(ManageNeuron arg0)\n\t\t{\n\t\t\tstring method = \"manage_neuron\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg);\n\t\t\tManageNeuronResponse r0 = responseArg.Values[0].ToObject<ManageNeuronResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result> TransferGtcNeuron(NeuronId arg0, NeuronId arg1)\n\t\t{\n\t\t\tstring method = \"transfer_gtc_neuron\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tCandidTypedValue p1 = CandidTypedValue.FromObject(arg1);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg);\n\t\t\tResult r0 = responseArg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result> UpdateNodeProvider(UpdateNodeProvider arg0)\n\t\t{\n\t\t\tstring method = \"update_node_provider\";\n\t\t\tCandidTypedValue p0 = CandidTypedValue.FromObject(arg0);\n\t\t\tvar candidArgs = new List<CandidTypedValue>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg);\n\t\t\tResult r0 = responseArg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t}\n}\n\n",
  "DataModelFiles": [
    {
      "Item1": "AccountIdentifier",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class AccountIdentifier\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"hash\")]\n\t\tpublic System.Collections.Generic.List<byte> Hash { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Action",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(ActionTag))]\n\tpublic class Action\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic ActionTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Action(ActionTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Action()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Action RegisterKnownNeuron(KnownNeuron info)\n\t\t{\n\t\t\treturn new Action(ActionTag.RegisterKnownNeuron, info);\n\t\t}\n\t\t\n\t\tpublic KnownNeuron AsRegisterKnownNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.RegisterKnownNeuron);\n\t\t\treturn (KnownNeuron)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action ManageNeuron(ManageNeuron info)\n\t\t{\n\t\t\treturn new Action(ActionTag.ManageNeuron, info);\n\t\t}\n\t\t\n\t\tpublic ManageNeuron AsManageNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.ManageNeuron);\n\t\t\treturn (ManageNeuron)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action ExecuteNnsFunction(ExecuteNnsFunction info)\n\t\t{\n\t\t\treturn new Action(ActionTag.ExecuteNnsFunction, info);\n\t\t}\n\t\t\n\t\tpublic ExecuteNnsFunction AsExecuteNnsFunction()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.ExecuteNnsFunction);\n\t\t\treturn (ExecuteNnsFunction)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action RewardNodeProvider(RewardNodeProvider info)\n\t\t{\n\t\t\treturn new Action(ActionTag.RewardNodeProvider, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProvider AsRewardNodeProvider()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.RewardNodeProvider);\n\t\t\treturn (RewardNodeProvider)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action SetDefaultFollowees(SetDefaultFollowees info)\n\t\t{\n\t\t\treturn new Action(ActionTag.SetDefaultFollowees, info);\n\t\t}\n\t\t\n\t\tpublic SetDefaultFollowees AsSetDefaultFollowees()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.SetDefaultFollowees);\n\t\t\treturn (SetDefaultFollowees)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action RewardNodeProviders(RewardNodeProviders info)\n\t\t{\n\t\t\treturn new Action(ActionTag.RewardNodeProviders, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProviders AsRewardNodeProviders()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.RewardNodeProviders);\n\t\t\treturn (RewardNodeProviders)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action ManageNetworkEconomics(NetworkEconomics info)\n\t\t{\n\t\t\treturn new Action(ActionTag.ManageNetworkEconomics, info);\n\t\t}\n\t\t\n\t\tpublic NetworkEconomics AsManageNetworkEconomics()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.ManageNetworkEconomics);\n\t\t\treturn (NetworkEconomics)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action ApproveGenesisKyc(ApproveGenesisKyc info)\n\t\t{\n\t\t\treturn new Action(ActionTag.ApproveGenesisKyc, info);\n\t\t}\n\t\t\n\t\tpublic ApproveGenesisKyc AsApproveGenesisKyc()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.ApproveGenesisKyc);\n\t\t\treturn (ApproveGenesisKyc)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action AddOrRemoveNodeProvider(AddOrRemoveNodeProvider info)\n\t\t{\n\t\t\treturn new Action(ActionTag.AddOrRemoveNodeProvider, info);\n\t\t}\n\t\t\n\t\tpublic AddOrRemoveNodeProvider AsAddOrRemoveNodeProvider()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.AddOrRemoveNodeProvider);\n\t\t\treturn (AddOrRemoveNodeProvider)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Action Motion(Motion info)\n\t\t{\n\t\t\treturn new Action(ActionTag.Motion, info);\n\t\t}\n\t\t\n\t\tpublic Motion AsMotion()\n\t\t{\n\t\t\tthis.ValidateTag(ActionTag.Motion);\n\t\t\treturn (Motion)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(ActionTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum ActionTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RegisterKnownNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(KnownNeuron))]\n\t\tRegisterKnownNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ManageNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ManageNeuron))]\n\t\tManageNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ExecuteNnsFunction\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ExecuteNnsFunction))]\n\t\tExecuteNnsFunction,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RewardNodeProvider\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(RewardNodeProvider))]\n\t\tRewardNodeProvider,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"SetDefaultFollowees\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(SetDefaultFollowees))]\n\t\tSetDefaultFollowees,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RewardNodeProviders\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(RewardNodeProviders))]\n\t\tRewardNodeProviders,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ManageNetworkEconomics\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(NetworkEconomics))]\n\t\tManageNetworkEconomics,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ApproveGenesisKyc\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ApproveGenesisKyc))]\n\t\tApproveGenesisKyc,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"AddOrRemoveNodeProvider\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(AddOrRemoveNodeProvider))]\n\t\tAddOrRemoveNodeProvider,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Motion\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Motion))]\n\t\tMotion,\n\t}\n}\n\n"
    },
    {
      "Item1": "AddHotKey",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class AddHotKey\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"new_hot_key\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewHotKey { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "AddOrRemoveNodeProvider",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class AddOrRemoveNodeProvider\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"change\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Change> Change { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Amount",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Amount\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"e8s\")]\n\t\tpublic ulong E8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ApproveGenesisKyc",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ApproveGenesisKyc\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"principals\")]\n\t\tpublic System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> Principals { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Ballot",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Ballot\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"vote\")]\n\t\tpublic int Vote { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"voting_power\")]\n\t\tpublic ulong VotingPower { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "BallotInfo",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class BallotInfo\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"vote\")]\n\t\tpublic int Vote { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> ProposalId { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "By",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(ByTag))]\n\tpublic class By\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic ByTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate By(ByTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected By()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic class O0\n\t\t{\n\t\t}\n\t\tpublic static By NeuronIdOrSubaccount(By.O0 info)\n\t\t{\n\t\t\treturn new By(ByTag.NeuronIdOrSubaccount, info);\n\t\t}\n\t\t\n\t\tpublic By.O0 AsNeuronIdOrSubaccount()\n\t\t{\n\t\t\tthis.ValidateTag(ByTag.NeuronIdOrSubaccount);\n\t\t\treturn (By.O0)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static By MemoAndController(ClaimOrRefreshNeuronFromAccount info)\n\t\t{\n\t\t\treturn new By(ByTag.MemoAndController, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefreshNeuronFromAccount AsMemoAndController()\n\t\t{\n\t\t\tthis.ValidateTag(ByTag.MemoAndController);\n\t\t\treturn (ClaimOrRefreshNeuronFromAccount)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static By Memo(ulong info)\n\t\t{\n\t\t\treturn new By(ByTag.Memo, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsMemo()\n\t\t{\n\t\t\tthis.ValidateTag(ByTag.Memo);\n\t\t\treturn (ulong)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(ByTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum ByTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"NeuronIdOrSubaccount\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(By.O0))]\n\t\tNeuronIdOrSubaccount,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MemoAndController\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ClaimOrRefreshNeuronFromAccount))]\n\t\tMemoAndController,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Memo\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ulong))]\n\t\tMemo,\n\t}\n}\n\n"
    },
    {
      "Item1": "Change",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(ChangeTag))]\n\tpublic class Change\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic ChangeTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Change(ChangeTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Change()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Change ToRemove(NodeProvider info)\n\t\t{\n\t\t\treturn new Change(ChangeTag.ToRemove, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsToRemove()\n\t\t{\n\t\t\tthis.ValidateTag(ChangeTag.ToRemove);\n\t\t\treturn (NodeProvider)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Change ToAdd(NodeProvider info)\n\t\t{\n\t\t\treturn new Change(ChangeTag.ToAdd, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsToAdd()\n\t\t{\n\t\t\tthis.ValidateTag(ChangeTag.ToAdd);\n\t\t\treturn (NodeProvider)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(ChangeTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum ChangeTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ToRemove\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(NodeProvider))]\n\t\tToRemove,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ToAdd\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(NodeProvider))]\n\t\tToAdd,\n\t}\n}\n\n"
    },
    {
      "Item1": "ClaimOrRefresh",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefresh\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"by\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<By> By { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ClaimOrRefreshNeuronFromAccount",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshNeuronFromAccount\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"controller\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Controller { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"memo\")]\n\t\tpublic ulong Memo { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ClaimOrRefreshNeuronFromAccountResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshNeuronFromAccountResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"result\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Result1> Result { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ClaimOrRefreshResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"refreshed_neuron_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> RefreshedNeuronId { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Command",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(CommandTag))]\n\tpublic class Command\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic CommandTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Command(CommandTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Command()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command Spawn(Spawn info)\n\t\t{\n\t\t\treturn new Command(CommandTag.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic Spawn AsSpawn()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.Spawn);\n\t\t\treturn (Spawn)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command Split(Split info)\n\t\t{\n\t\t\treturn new Command(CommandTag.Split, info);\n\t\t}\n\t\t\n\t\tpublic Split AsSplit()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.Split);\n\t\t\treturn (Split)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command Follow(Follow info)\n\t\t{\n\t\t\treturn new Command(CommandTag.Follow, info);\n\t\t}\n\t\t\n\t\tpublic Follow AsFollow()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.Follow);\n\t\t\treturn (Follow)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command ClaimOrRefresh(ClaimOrRefresh info)\n\t\t{\n\t\t\treturn new Command(CommandTag.ClaimOrRefresh, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefresh AsClaimOrRefresh()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.ClaimOrRefresh);\n\t\t\treturn (ClaimOrRefresh)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command Configure(Configure info)\n\t\t{\n\t\t\treturn new Command(CommandTag.Configure, info);\n\t\t}\n\t\t\n\t\tpublic Configure AsConfigure()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.Configure);\n\t\t\treturn (Configure)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command RegisterVote(RegisterVote info)\n\t\t{\n\t\t\treturn new Command(CommandTag.RegisterVote, info);\n\t\t}\n\t\t\n\t\tpublic RegisterVote AsRegisterVote()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.RegisterVote);\n\t\t\treturn (RegisterVote)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command Merge(Merge info)\n\t\t{\n\t\t\treturn new Command(CommandTag.Merge, info);\n\t\t}\n\t\t\n\t\tpublic Merge AsMerge()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.Merge);\n\t\t\treturn (Merge)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command DisburseToNeuron(DisburseToNeuron info)\n\t\t{\n\t\t\treturn new Command(CommandTag.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic DisburseToNeuron AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.DisburseToNeuron);\n\t\t\treturn (DisburseToNeuron)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command MakeProposal(Proposal info)\n\t\t{\n\t\t\treturn new Command(CommandTag.MakeProposal, info);\n\t\t}\n\t\t\n\t\tpublic Proposal AsMakeProposal()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.MakeProposal);\n\t\t\treturn (Proposal)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command MergeMaturity(MergeMaturity info)\n\t\t{\n\t\t\treturn new Command(CommandTag.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturity AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.MergeMaturity);\n\t\t\treturn (MergeMaturity)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command Disburse(Disburse info)\n\t\t{\n\t\t\treturn new Command(CommandTag.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic Disburse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateTag(CommandTag.Disburse);\n\t\t\treturn (Disburse)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(CommandTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum CommandTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Spawn\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Spawn))]\n\t\tSpawn,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Split\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Split))]\n\t\tSplit,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Follow\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Follow))]\n\t\tFollow,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ClaimOrRefresh\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ClaimOrRefresh))]\n\t\tClaimOrRefresh,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Configure\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Configure))]\n\t\tConfigure,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RegisterVote\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(RegisterVote))]\n\t\tRegisterVote,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Merge\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Merge))]\n\t\tMerge,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"DisburseToNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(DisburseToNeuron))]\n\t\tDisburseToNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MakeProposal\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Proposal))]\n\t\tMakeProposal,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MergeMaturity\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(MergeMaturity))]\n\t\tMergeMaturity,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Disburse\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Disburse))]\n\t\tDisburse,\n\t}\n}\n\n"
    },
    {
      "Item1": "Command1",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Command1Tag))]\n\tpublic class Command1\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic Command1Tag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Command1(Command1Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Command1()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command1 Error(GovernanceError info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.Error, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsError()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.Error);\n\t\t\treturn (GovernanceError)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Spawn(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsSpawn()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.Spawn);\n\t\t\treturn (SpawnResponse)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Split(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.Split, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsSplit()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.Split);\n\t\t\treturn (SpawnResponse)this.Value!;\n\t\t}\n\t\t\n\t\tpublic class O3\n\t\t{\n\t\t}\n\t\tpublic static Command1 Follow(Command1.O3 info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.Follow, info);\n\t\t}\n\t\t\n\t\tpublic Command1.O3 AsFollow()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.Follow);\n\t\t\treturn (Command1.O3)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 ClaimOrRefresh(ClaimOrRefreshResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.ClaimOrRefresh, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefreshResponse AsClaimOrRefresh()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.ClaimOrRefresh);\n\t\t\treturn (ClaimOrRefreshResponse)this.Value!;\n\t\t}\n\t\t\n\t\tpublic class O5\n\t\t{\n\t\t}\n\t\tpublic static Command1 Configure(Command1.O5 info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.Configure, info);\n\t\t}\n\t\t\n\t\tpublic Command1.O5 AsConfigure()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.Configure);\n\t\t\treturn (Command1.O5)this.Value!;\n\t\t}\n\t\t\n\t\tpublic class O6\n\t\t{\n\t\t}\n\t\tpublic static Command1 RegisterVote(Command1.O6 info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.RegisterVote, info);\n\t\t}\n\t\t\n\t\tpublic Command1.O6 AsRegisterVote()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.RegisterVote);\n\t\t\treturn (Command1.O6)this.Value!;\n\t\t}\n\t\t\n\t\tpublic class O7\n\t\t{\n\t\t}\n\t\tpublic static Command1 Merge(Command1.O7 info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.Merge, info);\n\t\t}\n\t\t\n\t\tpublic Command1.O7 AsMerge()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.Merge);\n\t\t\treturn (Command1.O7)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 DisburseToNeuron(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.DisburseToNeuron);\n\t\t\treturn (SpawnResponse)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 MakeProposal(MakeProposalResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.MakeProposal, info);\n\t\t}\n\t\t\n\t\tpublic MakeProposalResponse AsMakeProposal()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.MakeProposal);\n\t\t\treturn (MakeProposalResponse)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 MergeMaturity(MergeMaturityResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturityResponse AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.MergeMaturity);\n\t\t\treturn (MergeMaturityResponse)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Disburse(DisburseResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Tag.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic DisburseResponse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateTag(Command1Tag.Disburse);\n\t\t\treturn (DisburseResponse)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(Command1Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum Command1Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Error\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(GovernanceError))]\n\t\tError,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Spawn\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(SpawnResponse))]\n\t\tSpawn,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Split\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(SpawnResponse))]\n\t\tSplit,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Follow\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Command1.O3))]\n\t\tFollow,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ClaimOrRefresh\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ClaimOrRefreshResponse))]\n\t\tClaimOrRefresh,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Configure\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Command1.O5))]\n\t\tConfigure,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RegisterVote\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Command1.O6))]\n\t\tRegisterVote,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Merge\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Command1.O7))]\n\t\tMerge,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"DisburseToNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(SpawnResponse))]\n\t\tDisburseToNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MakeProposal\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(MakeProposalResponse))]\n\t\tMakeProposal,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MergeMaturity\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(MergeMaturityResponse))]\n\t\tMergeMaturity,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Disburse\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(DisburseResponse))]\n\t\tDisburse,\n\t}\n}\n\n"
    },
    {
      "Item1": "Command2",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Command2Tag))]\n\tpublic class Command2\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic Command2Tag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Command2(Command2Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Command2()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command2 Spawn(Spawn info)\n\t\t{\n\t\t\treturn new Command2(Command2Tag.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic Spawn AsSpawn()\n\t\t{\n\t\t\tthis.ValidateTag(Command2Tag.Spawn);\n\t\t\treturn (Spawn)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 Split(Split info)\n\t\t{\n\t\t\treturn new Command2(Command2Tag.Split, info);\n\t\t}\n\t\t\n\t\tpublic Split AsSplit()\n\t\t{\n\t\t\tthis.ValidateTag(Command2Tag.Split);\n\t\t\treturn (Split)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 Configure(Configure info)\n\t\t{\n\t\t\treturn new Command2(Command2Tag.Configure, info);\n\t\t}\n\t\t\n\t\tpublic Configure AsConfigure()\n\t\t{\n\t\t\tthis.ValidateTag(Command2Tag.Configure);\n\t\t\treturn (Configure)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 Merge(Merge info)\n\t\t{\n\t\t\treturn new Command2(Command2Tag.Merge, info);\n\t\t}\n\t\t\n\t\tpublic Merge AsMerge()\n\t\t{\n\t\t\tthis.ValidateTag(Command2Tag.Merge);\n\t\t\treturn (Merge)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 DisburseToNeuron(DisburseToNeuron info)\n\t\t{\n\t\t\treturn new Command2(Command2Tag.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic DisburseToNeuron AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Command2Tag.DisburseToNeuron);\n\t\t\treturn (DisburseToNeuron)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 ClaimOrRefreshNeuron(ClaimOrRefresh info)\n\t\t{\n\t\t\treturn new Command2(Command2Tag.ClaimOrRefreshNeuron, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefresh AsClaimOrRefreshNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Command2Tag.ClaimOrRefreshNeuron);\n\t\t\treturn (ClaimOrRefresh)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 MergeMaturity(MergeMaturity info)\n\t\t{\n\t\t\treturn new Command2(Command2Tag.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturity AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateTag(Command2Tag.MergeMaturity);\n\t\t\treturn (MergeMaturity)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 Disburse(Disburse info)\n\t\t{\n\t\t\treturn new Command2(Command2Tag.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic Disburse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateTag(Command2Tag.Disburse);\n\t\t\treturn (Disburse)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(Command2Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum Command2Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Spawn\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Spawn))]\n\t\tSpawn,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Split\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Split))]\n\t\tSplit,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Configure\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Configure))]\n\t\tConfigure,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Merge\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Merge))]\n\t\tMerge,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"DisburseToNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(DisburseToNeuron))]\n\t\tDisburseToNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ClaimOrRefreshNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ClaimOrRefresh))]\n\t\tClaimOrRefreshNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MergeMaturity\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(MergeMaturity))]\n\t\tMergeMaturity,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Disburse\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Disburse))]\n\t\tDisburse,\n\t}\n}\n\n"
    },
    {
      "Item1": "Configure",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Configure\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"operation\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Operation> Operation { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Disburse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Disburse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"to_account\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<AccountIdentifier> ToAccount { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"amount\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Amount> Amount { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "DisburseResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class DisburseResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"transfer_block_height\")]\n\t\tpublic ulong TransferBlockHeight { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "DisburseToNeuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class DisburseToNeuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_delay_seconds\")]\n\t\tpublic ulong DissolveDelaySeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"kyc_verified\")]\n\t\tpublic bool KycVerified { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"amount_e8s\")]\n\t\tpublic ulong AmountE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"new_controller\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewController { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"nonce\")]\n\t\tpublic ulong Nonce { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "DissolveState",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(DissolveStateTag))]\n\tpublic class DissolveState\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic DissolveStateTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate DissolveState(DissolveStateTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected DissolveState()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static DissolveState DissolveDelaySeconds(ulong info)\n\t\t{\n\t\t\treturn new DissolveState(DissolveStateTag.DissolveDelaySeconds, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsDissolveDelaySeconds()\n\t\t{\n\t\t\tthis.ValidateTag(DissolveStateTag.DissolveDelaySeconds);\n\t\t\treturn (ulong)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static DissolveState WhenDissolvedTimestampSeconds(ulong info)\n\t\t{\n\t\t\treturn new DissolveState(DissolveStateTag.WhenDissolvedTimestampSeconds, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsWhenDissolvedTimestampSeconds()\n\t\t{\n\t\t\tthis.ValidateTag(DissolveStateTag.WhenDissolvedTimestampSeconds);\n\t\t\treturn (ulong)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(DissolveStateTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum DissolveStateTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"DissolveDelaySeconds\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ulong))]\n\t\tDissolveDelaySeconds,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"WhenDissolvedTimestampSeconds\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(ulong))]\n\t\tWhenDissolvedTimestampSeconds,\n\t}\n}\n\n"
    },
    {
      "Item1": "ExecuteNnsFunction",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ExecuteNnsFunction\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"nns_function\")]\n\t\tpublic int NnsFunction { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"payload\")]\n\t\tpublic System.Collections.Generic.List<byte> Payload { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Follow",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Follow\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"topic\")]\n\t\tpublic int Topic { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"followees\")]\n\t\tpublic System.Collections.Generic.List<NeuronId> Followees { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Followees",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Followees\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"followees\")]\n\t\tpublic System.Collections.Generic.List<NeuronId> Followees_ { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Governance",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Governance\n\t{\n\t\tpublic class R0V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"default_followees\")]\n\t\tpublic System.Collections.Generic.List<R0V0> DefaultFollowees { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"wait_for_quiet_threshold_seconds\")]\n\t\tpublic ulong WaitForQuietThresholdSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"metrics\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<GovernanceCachedMetrics> Metrics { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"node_providers\")]\n\t\tpublic System.Collections.Generic.List<NodeProvider> NodeProviders { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"economics\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NetworkEconomics> Economics { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"latest_reward_event\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<RewardEvent> LatestRewardEvent { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"to_claim_transfers\")]\n\t\tpublic System.Collections.Generic.List<NeuronStakeTransfer> ToClaimTransfers { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"short_voting_period_seconds\")]\n\t\tpublic ulong ShortVotingPeriodSeconds { get; set; }\n\t\t\n\t\tpublic class R8V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic ProposalData F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposals\")]\n\t\tpublic System.Collections.Generic.List<R8V0> Proposals { get; set; }\n\t\t\n\t\tpublic class R9V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic NeuronInFlightCommand F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"in_flight_commands\")]\n\t\tpublic System.Collections.Generic.List<R9V0> InFlightCommands { get; set; }\n\t\t\n\t\tpublic class R10V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Neuron F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neurons\")]\n\t\tpublic System.Collections.Generic.List<R10V0> Neurons { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"genesis_timestamp_seconds\")]\n\t\tpublic ulong GenesisTimestampSeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "GovernanceCachedMetrics",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class GovernanceCachedMetrics\n\t{\n\t\tpublic class R0V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic double F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"not_dissolving_neurons_e8s_buckets\")]\n\t\tpublic System.Collections.Generic.List<R0V0> NotDissolvingNeuronsE8sBuckets { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"garbage_collectable_neurons_count\")]\n\t\tpublic ulong GarbageCollectableNeuronsCount { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neurons_with_invalid_stake_count\")]\n\t\tpublic ulong NeuronsWithInvalidStakeCount { get; set; }\n\t\t\n\t\tpublic class R3V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic ulong F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"not_dissolving_neurons_count_buckets\")]\n\t\tpublic System.Collections.Generic.List<R3V0> NotDissolvingNeuronsCountBuckets { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"total_supply_icp\")]\n\t\tpublic ulong TotalSupplyIcp { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neurons_with_less_than_6_months_dissolve_delay_count\")]\n\t\tpublic ulong NeuronsWithLessThan6MonthsDissolveDelayCount { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolved_neurons_count\")]\n\t\tpublic ulong DissolvedNeuronsCount { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"total_staked_e8s\")]\n\t\tpublic ulong TotalStakedE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"not_dissolving_neurons_count\")]\n\t\tpublic ulong NotDissolvingNeuronsCount { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolved_neurons_e8s\")]\n\t\tpublic ulong DissolvedNeuronsE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neurons_with_less_than_6_months_dissolve_delay_e8s\")]\n\t\tpublic ulong NeuronsWithLessThan6MonthsDissolveDelayE8s { get; set; }\n\t\t\n\t\tpublic class R11V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic ulong F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolving_neurons_count_buckets\")]\n\t\tpublic System.Collections.Generic.List<R11V0> DissolvingNeuronsCountBuckets { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolving_neurons_count\")]\n\t\tpublic ulong DissolvingNeuronsCount { get; set; }\n\t\t\n\t\tpublic class R13V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic double F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolving_neurons_e8s_buckets\")]\n\t\tpublic System.Collections.Generic.List<R13V0> DissolvingNeuronsE8sBuckets { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"community_fund_total_staked_e8s\")]\n\t\tpublic ulong CommunityFundTotalStakedE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"timestamp_seconds\")]\n\t\tpublic ulong TimestampSeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "GovernanceError",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class GovernanceError\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"error_message\")]\n\t\tpublic string ErrorMessage { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"error_type\")]\n\t\tpublic int ErrorType { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "IncreaseDissolveDelay",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class IncreaseDissolveDelay\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"additional_dissolve_delay_seconds\")]\n\t\tpublic uint AdditionalDissolveDelaySeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "KnownNeuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class KnownNeuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> Id { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"known_neuron_data\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<KnownNeuronData> KnownNeuronData { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "KnownNeuronData",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class KnownNeuronData\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"name\")]\n\t\tpublic string Name { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"description\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<string> Description { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListKnownNeuronsResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ListKnownNeuronsResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"known_neurons\")]\n\t\tpublic System.Collections.Generic.List<KnownNeuron> KnownNeurons { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListNeurons",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ListNeurons\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_ids\")]\n\t\tpublic System.Collections.Generic.List<ulong> NeuronIds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"include_neurons_readable_by_caller\")]\n\t\tpublic bool IncludeNeuronsReadableByCaller { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListNeuronsResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ListNeuronsResponse\n\t{\n\t\tpublic class R0V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic NeuronInfo F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_infos\")]\n\t\tpublic System.Collections.Generic.List<R0V0> NeuronInfos { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"full_neurons\")]\n\t\tpublic System.Collections.Generic.List<Neuron> FullNeurons { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListNodeProvidersResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ListNodeProvidersResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"node_providers\")]\n\t\tpublic System.Collections.Generic.List<NodeProvider> NodeProviders { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListProposalInfo",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ListProposalInfo\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"include_reward_status\")]\n\t\tpublic System.Collections.Generic.List<int> IncludeRewardStatus { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"before_proposal\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> BeforeProposal { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"limit\")]\n\t\tpublic uint Limit { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"exclude_topic\")]\n\t\tpublic System.Collections.Generic.List<int> ExcludeTopic { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"include_status\")]\n\t\tpublic System.Collections.Generic.List<int> IncludeStatus { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListProposalInfoResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ListProposalInfoResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_info\")]\n\t\tpublic System.Collections.Generic.List<ProposalInfo> ProposalInfo { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "MakeProposalResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class MakeProposalResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> ProposalId { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ManageNeuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ManageNeuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> Id { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"command\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Command> Command { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_id_or_subaccount\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronIdOrSubaccount> NeuronIdOrSubaccount { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ManageNeuronResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ManageNeuronResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"command\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Command1> Command { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Merge",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Merge\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"source_neuron_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> SourceNeuronId { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "MergeMaturity",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class MergeMaturity\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"percentage_to_merge\")]\n\t\tpublic uint PercentageToMerge { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "MergeMaturityResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class MergeMaturityResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"merged_maturity_e8s\")]\n\t\tpublic ulong MergedMaturityE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"new_stake_e8s\")]\n\t\tpublic ulong NewStakeE8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Motion",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Motion\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"motion_text\")]\n\t\tpublic string MotionText { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NetworkEconomics",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class NetworkEconomics\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_minimum_stake_e8s\")]\n\t\tpublic ulong NeuronMinimumStakeE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"max_proposals_to_keep_per_topic\")]\n\t\tpublic uint MaxProposalsToKeepPerTopic { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_management_fee_per_proposal_e8s\")]\n\t\tpublic ulong NeuronManagementFeePerProposalE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reject_cost_e8s\")]\n\t\tpublic ulong RejectCostE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"transaction_fee_e8s\")]\n\t\tpublic ulong TransactionFeeE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_spawn_dissolve_delay_seconds\")]\n\t\tpublic ulong NeuronSpawnDissolveDelaySeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"minimum_icp_xdr_rate\")]\n\t\tpublic ulong MinimumIcpXdrRate { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"maximum_node_provider_rewards_e8s\")]\n\t\tpublic ulong MaximumNodeProviderRewardsE8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Neuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Neuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> Id { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"controller\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Controller { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"recent_ballots\")]\n\t\tpublic System.Collections.Generic.List<BallotInfo> RecentBallots { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"kyc_verified\")]\n\t\tpublic bool KycVerified { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"not_for_profit\")]\n\t\tpublic bool NotForProfit { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"maturity_e8s_equivalent\")]\n\t\tpublic ulong MaturityE8sEquivalent { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"cached_neuron_stake_e8s\")]\n\t\tpublic ulong CachedNeuronStakeE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"created_timestamp_seconds\")]\n\t\tpublic ulong CreatedTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"aging_since_timestamp_seconds\")]\n\t\tpublic ulong AgingSinceTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"hot_keys\")]\n\t\tpublic System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> HotKeys { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"account\")]\n\t\tpublic System.Collections.Generic.List<byte> Account { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"joined_community_fund_timestamp_seconds\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<ulong> JoinedCommunityFundTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_state\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<DissolveState> DissolveState { get; set; }\n\t\t\n\t\tpublic class R13V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"followees\")]\n\t\tpublic System.Collections.Generic.List<R13V0> Followees { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_fees_e8s\")]\n\t\tpublic ulong NeuronFeesE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"transfer\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronStakeTransfer> Transfer { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"known_neuron_data\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<KnownNeuronData> KnownNeuronData { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronId",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class NeuronId\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic ulong Id { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronIdOrSubaccount",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(NeuronIdOrSubaccountTag))]\n\tpublic class NeuronIdOrSubaccount\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic NeuronIdOrSubaccountTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate NeuronIdOrSubaccount(NeuronIdOrSubaccountTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected NeuronIdOrSubaccount()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static NeuronIdOrSubaccount Subaccount(System.Collections.Generic.List<byte> info)\n\t\t{\n\t\t\treturn new NeuronIdOrSubaccount(NeuronIdOrSubaccountTag.Subaccount, info);\n\t\t}\n\t\t\n\t\tpublic System.Collections.Generic.List<byte> AsSubaccount()\n\t\t{\n\t\t\tthis.ValidateTag(NeuronIdOrSubaccountTag.Subaccount);\n\t\t\treturn (System.Collections.Generic.List<byte>)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static NeuronIdOrSubaccount NeuronId(NeuronId info)\n\t\t{\n\t\t\treturn new NeuronIdOrSubaccount(NeuronIdOrSubaccountTag.NeuronId, info);\n\t\t}\n\t\t\n\t\tpublic NeuronId AsNeuronId()\n\t\t{\n\t\t\tthis.ValidateTag(NeuronIdOrSubaccountTag.NeuronId);\n\t\t\treturn (NeuronId)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(NeuronIdOrSubaccountTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum NeuronIdOrSubaccountTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Subaccount\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.Collections.Generic.List<byte>))]\n\t\tSubaccount,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"NeuronId\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(NeuronId))]\n\t\tNeuronId,\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronInFlightCommand",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class NeuronInFlightCommand\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"command\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Command2> Command { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"timestamp\")]\n\t\tpublic ulong Timestamp { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronInfo",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class NeuronInfo\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_delay_seconds\")]\n\t\tpublic ulong DissolveDelaySeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"recent_ballots\")]\n\t\tpublic System.Collections.Generic.List<BallotInfo> RecentBallots { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"created_timestamp_seconds\")]\n\t\tpublic ulong CreatedTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"state\")]\n\t\tpublic int State { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"stake_e8s\")]\n\t\tpublic ulong StakeE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"joined_community_fund_timestamp_seconds\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<ulong> JoinedCommunityFundTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"retrieved_at_timestamp_seconds\")]\n\t\tpublic ulong RetrievedAtTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"known_neuron_data\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<KnownNeuronData> KnownNeuronData { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"voting_power\")]\n\t\tpublic ulong VotingPower { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"age_seconds\")]\n\t\tpublic ulong AgeSeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronStakeTransfer",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class NeuronStakeTransfer\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"to_subaccount\")]\n\t\tpublic System.Collections.Generic.List<byte> ToSubaccount { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_stake_e8s\")]\n\t\tpublic ulong NeuronStakeE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"from\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> From { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"memo\")]\n\t\tpublic ulong Memo { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"from_subaccount\")]\n\t\tpublic System.Collections.Generic.List<byte> FromSubaccount { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"transfer_timestamp\")]\n\t\tpublic ulong TransferTimestamp { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"block_height\")]\n\t\tpublic ulong BlockHeight { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NodeProvider",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class NodeProvider\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Id { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_account\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<AccountIdentifier> RewardAccount { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Operation",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(OperationTag))]\n\tpublic class Operation\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic OperationTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Operation(OperationTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Operation()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Operation RemoveHotKey(RemoveHotKey info)\n\t\t{\n\t\t\treturn new Operation(OperationTag.RemoveHotKey, info);\n\t\t}\n\t\t\n\t\tpublic RemoveHotKey AsRemoveHotKey()\n\t\t{\n\t\t\tthis.ValidateTag(OperationTag.RemoveHotKey);\n\t\t\treturn (RemoveHotKey)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Operation AddHotKey(AddHotKey info)\n\t\t{\n\t\t\treturn new Operation(OperationTag.AddHotKey, info);\n\t\t}\n\t\t\n\t\tpublic AddHotKey AsAddHotKey()\n\t\t{\n\t\t\tthis.ValidateTag(OperationTag.AddHotKey);\n\t\t\treturn (AddHotKey)this.Value!;\n\t\t}\n\t\t\n\t\tpublic class O2\n\t\t{\n\t\t}\n\t\tpublic static Operation StopDissolving(Operation.O2 info)\n\t\t{\n\t\t\treturn new Operation(OperationTag.StopDissolving, info);\n\t\t}\n\t\t\n\t\tpublic Operation.O2 AsStopDissolving()\n\t\t{\n\t\t\tthis.ValidateTag(OperationTag.StopDissolving);\n\t\t\treturn (Operation.O2)this.Value!;\n\t\t}\n\t\t\n\t\tpublic class O3\n\t\t{\n\t\t}\n\t\tpublic static Operation StartDissolving(Operation.O3 info)\n\t\t{\n\t\t\treturn new Operation(OperationTag.StartDissolving, info);\n\t\t}\n\t\t\n\t\tpublic Operation.O3 AsStartDissolving()\n\t\t{\n\t\t\tthis.ValidateTag(OperationTag.StartDissolving);\n\t\t\treturn (Operation.O3)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Operation IncreaseDissolveDelay(IncreaseDissolveDelay info)\n\t\t{\n\t\t\treturn new Operation(OperationTag.IncreaseDissolveDelay, info);\n\t\t}\n\t\t\n\t\tpublic IncreaseDissolveDelay AsIncreaseDissolveDelay()\n\t\t{\n\t\t\tthis.ValidateTag(OperationTag.IncreaseDissolveDelay);\n\t\t\treturn (IncreaseDissolveDelay)this.Value!;\n\t\t}\n\t\t\n\t\tpublic class O5\n\t\t{\n\t\t}\n\t\tpublic static Operation JoinCommunityFund(Operation.O5 info)\n\t\t{\n\t\t\treturn new Operation(OperationTag.JoinCommunityFund, info);\n\t\t}\n\t\t\n\t\tpublic Operation.O5 AsJoinCommunityFund()\n\t\t{\n\t\t\tthis.ValidateTag(OperationTag.JoinCommunityFund);\n\t\t\treturn (Operation.O5)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Operation SetDissolveTimestamp(SetDissolveTimestamp info)\n\t\t{\n\t\t\treturn new Operation(OperationTag.SetDissolveTimestamp, info);\n\t\t}\n\t\t\n\t\tpublic SetDissolveTimestamp AsSetDissolveTimestamp()\n\t\t{\n\t\t\tthis.ValidateTag(OperationTag.SetDissolveTimestamp);\n\t\t\treturn (SetDissolveTimestamp)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(OperationTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum OperationTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RemoveHotKey\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(RemoveHotKey))]\n\t\tRemoveHotKey,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"AddHotKey\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(AddHotKey))]\n\t\tAddHotKey,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"StopDissolving\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Operation.O2))]\n\t\tStopDissolving,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"StartDissolving\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Operation.O3))]\n\t\tStartDissolving,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"IncreaseDissolveDelay\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(IncreaseDissolveDelay))]\n\t\tIncreaseDissolveDelay,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"JoinCommunityFund\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Operation.O5))]\n\t\tJoinCommunityFund,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"SetDissolveTimestamp\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(SetDissolveTimestamp))]\n\t\tSetDissolveTimestamp,\n\t}\n}\n\n"
    },
    {
      "Item1": "Proposal",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Proposal\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"url\")]\n\t\tpublic string Url { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"title\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<string> Title { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"action\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Action> Action { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"summary\")]\n\t\tpublic string Summary { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ProposalData",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ProposalData\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> Id { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"failure_reason\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<GovernanceError> FailureReason { get; set; }\n\t\t\n\t\tpublic class R2V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Ballot F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ballots\")]\n\t\tpublic System.Collections.Generic.List<R2V0> Ballots { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_timestamp_seconds\")]\n\t\tpublic ulong ProposalTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_event_round\")]\n\t\tpublic ulong RewardEventRound { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"failed_timestamp_seconds\")]\n\t\tpublic ulong FailedTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reject_cost_e8s\")]\n\t\tpublic ulong RejectCostE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"latest_tally\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Tally> LatestTally { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"decided_timestamp_seconds\")]\n\t\tpublic ulong DecidedTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Proposal> Proposal { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposer\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> Proposer { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"wait_for_quiet_state\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<WaitForQuietState> WaitForQuietState { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"executed_timestamp_seconds\")]\n\t\tpublic ulong ExecutedTimestampSeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ProposalInfo",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class ProposalInfo\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> Id { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"status\")]\n\t\tpublic int Status { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"topic\")]\n\t\tpublic int Topic { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"failure_reason\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<GovernanceError> FailureReason { get; set; }\n\t\t\n\t\tpublic class R4V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Ballot F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ballots\")]\n\t\tpublic System.Collections.Generic.List<R4V0> Ballots { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_timestamp_seconds\")]\n\t\tpublic ulong ProposalTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_event_round\")]\n\t\tpublic ulong RewardEventRound { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"deadline_timestamp_seconds\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<ulong> DeadlineTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"failed_timestamp_seconds\")]\n\t\tpublic ulong FailedTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reject_cost_e8s\")]\n\t\tpublic ulong RejectCostE8s { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"latest_tally\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Tally> LatestTally { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_status\")]\n\t\tpublic int RewardStatus { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"decided_timestamp_seconds\")]\n\t\tpublic ulong DecidedTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Proposal> Proposal { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposer\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> Proposer { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"executed_timestamp_seconds\")]\n\t\tpublic ulong ExecutedTimestampSeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RegisterVote",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class RegisterVote\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"vote\")]\n\t\tpublic int Vote { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> Proposal { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RemoveHotKey",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class RemoveHotKey\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"hot_key_to_remove\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> HotKeyToRemove { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Result",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(ResultTag))]\n\tpublic class Result\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic ResultTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Result(ResultTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Result()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result Ok()\n\t\t{\n\t\t\treturn new Result(ResultTag.Ok, null);\n\t\t}\n\t\t\n\t\tpublic static Result Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result(ResultTag.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(ResultTag.Err);\n\t\t\treturn (GovernanceError)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(ResultTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum ResultTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(GovernanceError))]\n\t\tErr,\n\t}\n}\n\n"
    },
    {
      "Item1": "Result1",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Result1Tag))]\n\tpublic class Result1\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic Result1Tag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Result1(Result1Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Result1()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result1 Error(GovernanceError info)\n\t\t{\n\t\t\treturn new Result1(Result1Tag.Error, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsError()\n\t\t{\n\t\t\tthis.ValidateTag(Result1Tag.Error);\n\t\t\treturn (GovernanceError)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Result1 NeuronId(NeuronId info)\n\t\t{\n\t\t\treturn new Result1(Result1Tag.NeuronId, info);\n\t\t}\n\t\t\n\t\tpublic NeuronId AsNeuronId()\n\t\t{\n\t\t\tthis.ValidateTag(Result1Tag.NeuronId);\n\t\t\treturn (NeuronId)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(Result1Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum Result1Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Error\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(GovernanceError))]\n\t\tError,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"NeuronId\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(NeuronId))]\n\t\tNeuronId,\n\t}\n}\n\n"
    },
    {
      "Item1": "Result2",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Result2Tag))]\n\tpublic class Result2\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic Result2Tag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Result2(Result2Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Result2()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result2 Ok(Neuron info)\n\t\t{\n\t\t\treturn new Result2(Result2Tag.Ok, info);\n\t\t}\n\t\t\n\t\tpublic Neuron AsOk()\n\t\t{\n\t\t\tthis.ValidateTag(Result2Tag.Ok);\n\t\t\treturn (Neuron)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Result2 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result2(Result2Tag.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Result2Tag.Err);\n\t\t\treturn (GovernanceError)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(Result2Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum Result2Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Neuron))]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(GovernanceError))]\n\t\tErr,\n\t}\n}\n\n"
    },
    {
      "Item1": "Result3",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Result3Tag))]\n\tpublic class Result3\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic Result3Tag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Result3(Result3Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Result3()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result3 Ok(RewardNodeProviders info)\n\t\t{\n\t\t\treturn new Result3(Result3Tag.Ok, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProviders AsOk()\n\t\t{\n\t\t\tthis.ValidateTag(Result3Tag.Ok);\n\t\t\treturn (RewardNodeProviders)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Result3 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result3(Result3Tag.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Result3Tag.Err);\n\t\t\treturn (GovernanceError)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(Result3Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum Result3Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(RewardNodeProviders))]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(GovernanceError))]\n\t\tErr,\n\t}\n}\n\n"
    },
    {
      "Item1": "Result4",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Result4Tag))]\n\tpublic class Result4\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic Result4Tag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Result4(Result4Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Result4()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result4 Ok(NeuronInfo info)\n\t\t{\n\t\t\treturn new Result4(Result4Tag.Ok, info);\n\t\t}\n\t\t\n\t\tpublic NeuronInfo AsOk()\n\t\t{\n\t\t\tthis.ValidateTag(Result4Tag.Ok);\n\t\t\treturn (NeuronInfo)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Result4 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result4(Result4Tag.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Result4Tag.Err);\n\t\t\treturn (GovernanceError)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(Result4Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum Result4Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(NeuronInfo))]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(GovernanceError))]\n\t\tErr,\n\t}\n}\n\n"
    },
    {
      "Item1": "Result5",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Result5Tag))]\n\tpublic class Result5\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic Result5Tag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate Result5(Result5Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected Result5()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result5 Ok(NodeProvider info)\n\t\t{\n\t\t\treturn new Result5(Result5Tag.Ok, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsOk()\n\t\t{\n\t\t\tthis.ValidateTag(Result5Tag.Ok);\n\t\t\treturn (NodeProvider)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static Result5 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result5(Result5Tag.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Result5Tag.Err);\n\t\t\treturn (GovernanceError)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(Result5Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum Result5Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(NodeProvider))]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(GovernanceError))]\n\t\tErr,\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardEvent",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class RewardEvent\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"day_after_genesis\")]\n\t\tpublic ulong DayAfterGenesis { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"actual_timestamp_seconds\")]\n\t\tpublic ulong ActualTimestampSeconds { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"distributed_e8s_equivalent\")]\n\t\tpublic ulong DistributedE8sEquivalent { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"settled_proposals\")]\n\t\tpublic System.Collections.Generic.List<NeuronId> SettledProposals { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardMode",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(RewardModeTag))]\n\tpublic class RewardMode\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute]\n\t\tpublic RewardModeTag Tag { get; set; }\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute]\n\t\tpublic object? Value { get; set; }\n\t\tprivate RewardMode(RewardModeTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\t\t\n\t\tprotected RewardMode()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static RewardMode RewardToNeuron(RewardToNeuron info)\n\t\t{\n\t\t\treturn new RewardMode(RewardModeTag.RewardToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic RewardToNeuron AsRewardToNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(RewardModeTag.RewardToNeuron);\n\t\t\treturn (RewardToNeuron)this.Value!;\n\t\t}\n\t\t\n\t\tpublic static RewardMode RewardToAccount(RewardToAccount info)\n\t\t{\n\t\t\treturn new RewardMode(RewardModeTag.RewardToAccount, info);\n\t\t}\n\t\t\n\t\tpublic RewardToAccount AsRewardToAccount()\n\t\t{\n\t\t\tthis.ValidateTag(RewardModeTag.RewardToAccount);\n\t\t\treturn (RewardToAccount)this.Value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateTag(RewardModeTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum RewardModeTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RewardToNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(RewardToNeuron))]\n\t\tRewardToNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RewardToAccount\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(RewardToAccount))]\n\t\tRewardToAccount,\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardNodeProvider",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class RewardNodeProvider\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"node_provider\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NodeProvider> NodeProvider { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_mode\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<RewardMode> RewardMode { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"amount_e8s\")]\n\t\tpublic ulong AmountE8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardNodeProviders",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class RewardNodeProviders\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"use_registry_derived_rewards\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<bool> UseRegistryDerivedRewards { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"rewards\")]\n\t\tpublic System.Collections.Generic.List<RewardNodeProvider> Rewards { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardToAccount",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class RewardToAccount\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"to_account\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<AccountIdentifier> ToAccount { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardToNeuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class RewardToNeuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_delay_seconds\")]\n\t\tpublic ulong DissolveDelaySeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "SetDefaultFollowees",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class SetDefaultFollowees\n\t{\n\t\tpublic class R0V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"default_followees\")]\n\t\tpublic System.Collections.Generic.List<R0V0> DefaultFollowees { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "SetDissolveTimestamp",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class SetDissolveTimestamp\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_timestamp_seconds\")]\n\t\tpublic ulong DissolveTimestampSeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Spawn",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Spawn\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"percentage_to_spawn\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<uint> PercentageToSpawn { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"new_controller\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewController { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"nonce\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<ulong> Nonce { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "SpawnResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class SpawnResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"created_neuron_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<NeuronId> CreatedNeuronId { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Split",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Split\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"amount_e8s\")]\n\t\tpublic ulong AmountE8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Tally",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class Tally\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"no\")]\n\t\tpublic ulong No { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"yes\")]\n\t\tpublic ulong Yes { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"total\")]\n\t\tpublic ulong Total { get; set; }\n\t\t\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"timestamp_seconds\")]\n\t\tpublic ulong TimestampSeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "UpdateNodeProvider",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class UpdateNodeProvider\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_account\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<AccountIdentifier> RewardAccount { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "WaitForQuietState",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mapping;\nusing EdjCase.ICP.Candid;\n\nnamespace Test.Models\n{\n\tpublic class WaitForQuietState\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"current_deadline_timestamp_seconds\")]\n\t\tpublic ulong CurrentDeadlineTimestampSeconds { get; set; }\n\t\t\n\t}\n}\n\n"
    }
  ],
  "AliasFile": null
}
