{
  "Name": "GovernanceApiClient",
  "ClientFile": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\nusing EdjCase.ICP.Agent.Agents;\nusing EdjCase.ICP.Agent.Responses;\nusing EdjCase.ICP.Agent.Auth;\nusing EdjCase.ICP.Candid.Models;\nusing Test.Models;\n\nnamespace Test\n{\n\tpublic class GovernanceApiClient\n\t{\n\t\tpublic IAgent Agent { get; }\n\t\tpublic Principal CanisterId { get; }\n\t\tpublic GovernanceApiClient(IAgent agent, Principal canisterId)\n\t\t{\n\t\t\tthis.Agent = agent ?? throw new ArgumentNullException(nameof(agent));\n\t\t\tthis.CanisterId = canisterId ?? throw new ArgumentNullException(nameof(canisterId));\n\t\t}\n\t\tpublic async Task<Result> claim_gtc_neurons(EdjCase.ICP.Candid.Models.Principal arg0, List<NeuronId> arg1, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"claim_gtc_neurons\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.Models.Principal>(arg0, false);\n\t\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<List<NeuronId>>(arg1, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tResult r0 = responseArg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ClaimOrRefreshNeuronFromAccountResponse> claim_or_refresh_neuron_from_account(ClaimOrRefreshNeuronFromAccount arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"claim_or_refresh_neuron_from_account\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ClaimOrRefreshNeuronFromAccount>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tClaimOrRefreshNeuronFromAccountResponse r0 = responseArg.Values[0].ToObject<ClaimOrRefreshNeuronFromAccountResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<string> get_build_metadata(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_build_metadata\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tstring r0 = reply.Arg.Values[0].ToObject<string>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result_2> get_full_neuron(ulong arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_full_neuron\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ulong>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult_2 r0 = reply.Arg.Values[0].ToObject<Result_2>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result_2> get_full_neuron_by_id_or_subaccount(NeuronIdOrSubaccount arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_full_neuron_by_id_or_subaccount\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<NeuronIdOrSubaccount>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult_2 r0 = reply.Arg.Values[0].ToObject<Result_2>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result_3> get_monthly_node_provider_rewards(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_monthly_node_provider_rewards\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tResult_3 r0 = responseArg.Values[0].ToObject<Result_3>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<NetworkEconomics> get_network_economics_parameters(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_network_economics_parameters\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tNetworkEconomics r0 = reply.Arg.Values[0].ToObject<NetworkEconomics>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<List<ulong>> get_neuron_ids(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_neuron_ids\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tList<ulong> r0 = reply.Arg.Values[0].ToObject<List<ulong>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result_4> get_neuron_info(ulong arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_neuron_info\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ulong>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult_4 r0 = reply.Arg.Values[0].ToObject<Result_4>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result_4> get_neuron_info_by_id_or_subaccount(NeuronIdOrSubaccount arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_neuron_info_by_id_or_subaccount\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<NeuronIdOrSubaccount>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult_4 r0 = reply.Arg.Values[0].ToObject<Result_4>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result_5> get_node_provider_by_caller(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_node_provider_by_caller\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.Null();\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult_5 r0 = reply.Arg.Values[0].ToObject<Result_5>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<List<ProposalInfo>> get_pending_proposals(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_pending_proposals\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tList<ProposalInfo> r0 = reply.Arg.Values[0].ToObject<List<ProposalInfo>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ProposalInfo?> get_proposal_info(ulong arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_proposal_info\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ulong>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tProposalInfo? r0 = reply.Arg.Values[0].ToObjectOrDefault<ProposalInfo?>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListKnownNeuronsResponse> list_known_neurons(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"list_known_neurons\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tListKnownNeuronsResponse r0 = reply.Arg.Values[0].ToObject<ListKnownNeuronsResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListNeuronsResponse> list_neurons(ListNeurons arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"list_neurons\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ListNeurons>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tListNeuronsResponse r0 = reply.Arg.Values[0].ToObject<ListNeuronsResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListNodeProvidersResponse> list_node_providers(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"list_node_providers\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tListNodeProvidersResponse r0 = reply.Arg.Values[0].ToObject<ListNodeProvidersResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListProposalInfoResponse> list_proposals(ListProposalInfo arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"list_proposals\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ListProposalInfo>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tListProposalInfoResponse r0 = reply.Arg.Values[0].ToObject<ListProposalInfoResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ManageNeuronResponse> manage_neuron(ManageNeuron arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"manage_neuron\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ManageNeuron>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tManageNeuronResponse r0 = responseArg.Values[0].ToObject<ManageNeuronResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result> transfer_gtc_neuron(NeuronId arg0, NeuronId arg1, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"transfer_gtc_neuron\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<NeuronId>(arg0, false);\n\t\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<NeuronId>(arg1, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tResult r0 = responseArg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result> update_node_provider(UpdateNodeProvider arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"update_node_provider\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<UpdateNodeProvider>(arg0, false);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg responseArg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tResult r0 = responseArg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t}\n}\n\n",
  "DataModelFiles": [
    {
      "Item1": "AccountIdentifier",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class AccountIdentifier\n\t{\n\t\tpublic List<byte> hash { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Action",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum ActionType\n\t{\n\t\tRegisterKnownNeuron,\n\t\tManageNeuron,\n\t\tExecuteNnsFunction,\n\t\tRewardNodeProvider,\n\t\tSetDefaultFollowees,\n\t\tRewardNodeProviders,\n\t\tManageNetworkEconomics,\n\t\tApproveGenesisKyc,\n\t\tAddOrRemoveNodeProvider,\n\t\tMotion,\n\t}\n\tpublic class Action : EdjCase.ICP.Candid.CandidVariantValueBase<ActionType>\n\t{\n\t\tpublic Action(ActionType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Action()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Action RegisterKnownNeuron(KnownNeuron info)\n\t\t{\n\t\t\treturn new Action(ActionType.RegisterKnownNeuron, info);\n\t\t}\n\t\t\n\t\tpublic KnownNeuron AsRegisterKnownNeuron()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.RegisterKnownNeuron);\n\t\t\treturn (KnownNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action ManageNeuron(ManageNeuron info)\n\t\t{\n\t\t\treturn new Action(ActionType.ManageNeuron, info);\n\t\t}\n\t\t\n\t\tpublic ManageNeuron AsManageNeuron()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.ManageNeuron);\n\t\t\treturn (ManageNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action ExecuteNnsFunction(ExecuteNnsFunction info)\n\t\t{\n\t\t\treturn new Action(ActionType.ExecuteNnsFunction, info);\n\t\t}\n\t\t\n\t\tpublic ExecuteNnsFunction AsExecuteNnsFunction()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.ExecuteNnsFunction);\n\t\t\treturn (ExecuteNnsFunction)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action RewardNodeProvider(RewardNodeProvider info)\n\t\t{\n\t\t\treturn new Action(ActionType.RewardNodeProvider, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProvider AsRewardNodeProvider()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.RewardNodeProvider);\n\t\t\treturn (RewardNodeProvider)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action SetDefaultFollowees(SetDefaultFollowees info)\n\t\t{\n\t\t\treturn new Action(ActionType.SetDefaultFollowees, info);\n\t\t}\n\t\t\n\t\tpublic SetDefaultFollowees AsSetDefaultFollowees()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.SetDefaultFollowees);\n\t\t\treturn (SetDefaultFollowees)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action RewardNodeProviders(RewardNodeProviders info)\n\t\t{\n\t\t\treturn new Action(ActionType.RewardNodeProviders, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProviders AsRewardNodeProviders()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.RewardNodeProviders);\n\t\t\treturn (RewardNodeProviders)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action ManageNetworkEconomics(NetworkEconomics info)\n\t\t{\n\t\t\treturn new Action(ActionType.ManageNetworkEconomics, info);\n\t\t}\n\t\t\n\t\tpublic NetworkEconomics AsManageNetworkEconomics()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.ManageNetworkEconomics);\n\t\t\treturn (NetworkEconomics)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action ApproveGenesisKyc(ApproveGenesisKyc info)\n\t\t{\n\t\t\treturn new Action(ActionType.ApproveGenesisKyc, info);\n\t\t}\n\t\t\n\t\tpublic ApproveGenesisKyc AsApproveGenesisKyc()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.ApproveGenesisKyc);\n\t\t\treturn (ApproveGenesisKyc)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action AddOrRemoveNodeProvider(AddOrRemoveNodeProvider info)\n\t\t{\n\t\t\treturn new Action(ActionType.AddOrRemoveNodeProvider, info);\n\t\t}\n\t\t\n\t\tpublic AddOrRemoveNodeProvider AsAddOrRemoveNodeProvider()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.AddOrRemoveNodeProvider);\n\t\t\treturn (AddOrRemoveNodeProvider)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action Motion(Motion info)\n\t\t{\n\t\t\treturn new Action(ActionType.Motion, info);\n\t\t}\n\t\t\n\t\tpublic Motion AsMotion()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.Motion);\n\t\t\treturn (Motion)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "AddHotKey",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class AddHotKey\n\t{\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? new_hot_key { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "AddOrRemoveNodeProvider",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class AddOrRemoveNodeProvider\n\t{\n\t\tpublic Change? change { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Amount",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Amount\n\t{\n\t\tpublic ulong e8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ApproveGenesisKyc",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ApproveGenesisKyc\n\t{\n\t\tpublic List<EdjCase.ICP.Candid.Models.Principal> principals { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Ballot",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Ballot\n\t{\n\t\tpublic int vote { get; set; }\n\t\t\n\t\tpublic ulong voting_power { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "BallotInfo",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class BallotInfo\n\t{\n\t\tpublic int vote { get; set; }\n\t\t\n\t\tpublic NeuronId? proposal_id { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "By",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum ByType\n\t{\n\t\tNeuronIdOrSubaccount,\n\t\tMemoAndController,\n\t\tMemo,\n\t}\n\tpublic class By : EdjCase.ICP.Candid.CandidVariantValueBase<ByType>\n\t{\n\t\tpublic By(ByType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected By()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static By NeuronIdOrSubaccount(NeuronIdOrSubaccountInfo info)\n\t\t{\n\t\t\treturn new By(ByType.NeuronIdOrSubaccount, info);\n\t\t}\n\t\t\n\t\tpublic NeuronIdOrSubaccountInfo AsNeuronIdOrSubaccount()\n\t\t{\n\t\t\tthis.ValidateType(ByType.NeuronIdOrSubaccount);\n\t\t\treturn (NeuronIdOrSubaccountInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static By MemoAndController(ClaimOrRefreshNeuronFromAccount info)\n\t\t{\n\t\t\treturn new By(ByType.MemoAndController, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefreshNeuronFromAccount AsMemoAndController()\n\t\t{\n\t\t\tthis.ValidateType(ByType.MemoAndController);\n\t\t\treturn (ClaimOrRefreshNeuronFromAccount)this.value!;\n\t\t}\n\t\t\n\t\tpublic static By Memo(ulong info)\n\t\t{\n\t\t\treturn new By(ByType.Memo, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsMemo()\n\t\t{\n\t\t\tthis.ValidateType(ByType.Memo);\n\t\t\treturn (ulong)this.value!;\n\t\t}\n\t\t\n\t\tpublic class NeuronIdOrSubaccountInfo\n\t\t{\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "Change",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum ChangeType\n\t{\n\t\tToRemove,\n\t\tToAdd,\n\t}\n\tpublic class Change : EdjCase.ICP.Candid.CandidVariantValueBase<ChangeType>\n\t{\n\t\tpublic Change(ChangeType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Change()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Change ToRemove(NodeProvider info)\n\t\t{\n\t\t\treturn new Change(ChangeType.ToRemove, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsToRemove()\n\t\t{\n\t\t\tthis.ValidateType(ChangeType.ToRemove);\n\t\t\treturn (NodeProvider)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Change ToAdd(NodeProvider info)\n\t\t{\n\t\t\treturn new Change(ChangeType.ToAdd, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsToAdd()\n\t\t{\n\t\t\tthis.ValidateType(ChangeType.ToAdd);\n\t\t\treturn (NodeProvider)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ClaimOrRefresh",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefresh\n\t{\n\t\tpublic By? by { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ClaimOrRefreshNeuronFromAccount",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshNeuronFromAccount\n\t{\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? controller { get; set; }\n\t\t\n\t\tpublic ulong memo { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ClaimOrRefreshNeuronFromAccountResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshNeuronFromAccountResponse\n\t{\n\t\tpublic Result_1? result { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ClaimOrRefreshResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshResponse\n\t{\n\t\tpublic NeuronId? refreshed_neuron_id { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Command",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum CommandType\n\t{\n\t\tSpawn,\n\t\tSplit,\n\t\tFollow,\n\t\tClaimOrRefresh,\n\t\tConfigure,\n\t\tRegisterVote,\n\t\tMerge,\n\t\tDisburseToNeuron,\n\t\tMakeProposal,\n\t\tMergeMaturity,\n\t\tDisburse,\n\t}\n\tpublic class Command : EdjCase.ICP.Candid.CandidVariantValueBase<CommandType>\n\t{\n\t\tpublic Command(CommandType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Command()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command Spawn(Spawn info)\n\t\t{\n\t\t\treturn new Command(CommandType.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic Spawn AsSpawn()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Spawn);\n\t\t\treturn (Spawn)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Split(Split info)\n\t\t{\n\t\t\treturn new Command(CommandType.Split, info);\n\t\t}\n\t\t\n\t\tpublic Split AsSplit()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Split);\n\t\t\treturn (Split)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Follow(Follow info)\n\t\t{\n\t\t\treturn new Command(CommandType.Follow, info);\n\t\t}\n\t\t\n\t\tpublic Follow AsFollow()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Follow);\n\t\t\treturn (Follow)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command ClaimOrRefresh(ClaimOrRefresh info)\n\t\t{\n\t\t\treturn new Command(CommandType.ClaimOrRefresh, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefresh AsClaimOrRefresh()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.ClaimOrRefresh);\n\t\t\treturn (ClaimOrRefresh)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Configure(Configure info)\n\t\t{\n\t\t\treturn new Command(CommandType.Configure, info);\n\t\t}\n\t\t\n\t\tpublic Configure AsConfigure()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Configure);\n\t\t\treturn (Configure)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command RegisterVote(RegisterVote info)\n\t\t{\n\t\t\treturn new Command(CommandType.RegisterVote, info);\n\t\t}\n\t\t\n\t\tpublic RegisterVote AsRegisterVote()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.RegisterVote);\n\t\t\treturn (RegisterVote)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Merge(Merge info)\n\t\t{\n\t\t\treturn new Command(CommandType.Merge, info);\n\t\t}\n\t\t\n\t\tpublic Merge AsMerge()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Merge);\n\t\t\treturn (Merge)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command DisburseToNeuron(DisburseToNeuron info)\n\t\t{\n\t\t\treturn new Command(CommandType.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic DisburseToNeuron AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.DisburseToNeuron);\n\t\t\treturn (DisburseToNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command MakeProposal(Proposal info)\n\t\t{\n\t\t\treturn new Command(CommandType.MakeProposal, info);\n\t\t}\n\t\t\n\t\tpublic Proposal AsMakeProposal()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.MakeProposal);\n\t\t\treturn (Proposal)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command MergeMaturity(MergeMaturity info)\n\t\t{\n\t\t\treturn new Command(CommandType.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturity AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.MergeMaturity);\n\t\t\treturn (MergeMaturity)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Disburse(Disburse info)\n\t\t{\n\t\t\treturn new Command(CommandType.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic Disburse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Disburse);\n\t\t\treturn (Disburse)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Command_1",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum Command_1Type\n\t{\n\t\tError,\n\t\tSpawn,\n\t\tSplit,\n\t\tFollow,\n\t\tClaimOrRefresh,\n\t\tConfigure,\n\t\tRegisterVote,\n\t\tMerge,\n\t\tDisburseToNeuron,\n\t\tMakeProposal,\n\t\tMergeMaturity,\n\t\tDisburse,\n\t}\n\tpublic class Command_1 : EdjCase.ICP.Candid.CandidVariantValueBase<Command_1Type>\n\t{\n\t\tpublic Command_1(Command_1Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Command_1()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command_1 Error(GovernanceError info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.Error, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsError()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.Error);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 Spawn(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsSpawn()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.Spawn);\n\t\t\treturn (SpawnResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 Split(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.Split, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsSplit()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.Split);\n\t\t\treturn (SpawnResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 Follow(FollowInfo info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.Follow, info);\n\t\t}\n\t\t\n\t\tpublic FollowInfo AsFollow()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.Follow);\n\t\t\treturn (FollowInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 ClaimOrRefresh(ClaimOrRefreshResponse info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.ClaimOrRefresh, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefreshResponse AsClaimOrRefresh()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.ClaimOrRefresh);\n\t\t\treturn (ClaimOrRefreshResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 Configure(ConfigureInfo info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.Configure, info);\n\t\t}\n\t\t\n\t\tpublic ConfigureInfo AsConfigure()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.Configure);\n\t\t\treturn (ConfigureInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 RegisterVote(RegisterVoteInfo info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.RegisterVote, info);\n\t\t}\n\t\t\n\t\tpublic RegisterVoteInfo AsRegisterVote()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.RegisterVote);\n\t\t\treturn (RegisterVoteInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 Merge(MergeInfo info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.Merge, info);\n\t\t}\n\t\t\n\t\tpublic MergeInfo AsMerge()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.Merge);\n\t\t\treturn (MergeInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 DisburseToNeuron(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.DisburseToNeuron);\n\t\t\treturn (SpawnResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 MakeProposal(MakeProposalResponse info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.MakeProposal, info);\n\t\t}\n\t\t\n\t\tpublic MakeProposalResponse AsMakeProposal()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.MakeProposal);\n\t\t\treturn (MakeProposalResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 MergeMaturity(MergeMaturityResponse info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturityResponse AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.MergeMaturity);\n\t\t\treturn (MergeMaturityResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_1 Disburse(DisburseResponse info)\n\t\t{\n\t\t\treturn new Command_1(Command_1Type.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic DisburseResponse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateType(Command_1Type.Disburse);\n\t\t\treturn (DisburseResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic class FollowInfo\n\t\t{\n\t\t}\n\t\tpublic class ConfigureInfo\n\t\t{\n\t\t}\n\t\tpublic class RegisterVoteInfo\n\t\t{\n\t\t}\n\t\tpublic class MergeInfo\n\t\t{\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "Command_2",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum Command_2Type\n\t{\n\t\tSpawn,\n\t\tSplit,\n\t\tConfigure,\n\t\tMerge,\n\t\tDisburseToNeuron,\n\t\tClaimOrRefreshNeuron,\n\t\tMergeMaturity,\n\t\tDisburse,\n\t}\n\tpublic class Command_2 : EdjCase.ICP.Candid.CandidVariantValueBase<Command_2Type>\n\t{\n\t\tpublic Command_2(Command_2Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Command_2()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command_2 Spawn(Spawn info)\n\t\t{\n\t\t\treturn new Command_2(Command_2Type.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic Spawn AsSpawn()\n\t\t{\n\t\t\tthis.ValidateType(Command_2Type.Spawn);\n\t\t\treturn (Spawn)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_2 Split(Split info)\n\t\t{\n\t\t\treturn new Command_2(Command_2Type.Split, info);\n\t\t}\n\t\t\n\t\tpublic Split AsSplit()\n\t\t{\n\t\t\tthis.ValidateType(Command_2Type.Split);\n\t\t\treturn (Split)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_2 Configure(Configure info)\n\t\t{\n\t\t\treturn new Command_2(Command_2Type.Configure, info);\n\t\t}\n\t\t\n\t\tpublic Configure AsConfigure()\n\t\t{\n\t\t\tthis.ValidateType(Command_2Type.Configure);\n\t\t\treturn (Configure)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_2 Merge(Merge info)\n\t\t{\n\t\t\treturn new Command_2(Command_2Type.Merge, info);\n\t\t}\n\t\t\n\t\tpublic Merge AsMerge()\n\t\t{\n\t\t\tthis.ValidateType(Command_2Type.Merge);\n\t\t\treturn (Merge)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_2 DisburseToNeuron(DisburseToNeuron info)\n\t\t{\n\t\t\treturn new Command_2(Command_2Type.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic DisburseToNeuron AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateType(Command_2Type.DisburseToNeuron);\n\t\t\treturn (DisburseToNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_2 ClaimOrRefreshNeuron(ClaimOrRefresh info)\n\t\t{\n\t\t\treturn new Command_2(Command_2Type.ClaimOrRefreshNeuron, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefresh AsClaimOrRefreshNeuron()\n\t\t{\n\t\t\tthis.ValidateType(Command_2Type.ClaimOrRefreshNeuron);\n\t\t\treturn (ClaimOrRefresh)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_2 MergeMaturity(MergeMaturity info)\n\t\t{\n\t\t\treturn new Command_2(Command_2Type.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturity AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateType(Command_2Type.MergeMaturity);\n\t\t\treturn (MergeMaturity)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command_2 Disburse(Disburse info)\n\t\t{\n\t\t\treturn new Command_2(Command_2Type.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic Disburse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateType(Command_2Type.Disburse);\n\t\t\treturn (Disburse)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Configure",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Configure\n\t{\n\t\tpublic Operation? operation { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Disburse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Disburse\n\t{\n\t\tpublic AccountIdentifier? to_account { get; set; }\n\t\t\n\t\tpublic Amount? amount { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "DisburseResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class DisburseResponse\n\t{\n\t\tpublic ulong transfer_block_height { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "DisburseToNeuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class DisburseToNeuron\n\t{\n\t\tpublic ulong dissolve_delay_seconds { get; set; }\n\t\t\n\t\tpublic bool kyc_verified { get; set; }\n\t\t\n\t\tpublic ulong amount_e8s { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? new_controller { get; set; }\n\t\t\n\t\tpublic ulong nonce { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "DissolveState",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum DissolveStateType\n\t{\n\t\tDissolveDelaySeconds,\n\t\tWhenDissolvedTimestampSeconds,\n\t}\n\tpublic class DissolveState : EdjCase.ICP.Candid.CandidVariantValueBase<DissolveStateType>\n\t{\n\t\tpublic DissolveState(DissolveStateType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected DissolveState()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static DissolveState DissolveDelaySeconds(ulong info)\n\t\t{\n\t\t\treturn new DissolveState(DissolveStateType.DissolveDelaySeconds, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsDissolveDelaySeconds()\n\t\t{\n\t\t\tthis.ValidateType(DissolveStateType.DissolveDelaySeconds);\n\t\t\treturn (ulong)this.value!;\n\t\t}\n\t\t\n\t\tpublic static DissolveState WhenDissolvedTimestampSeconds(ulong info)\n\t\t{\n\t\t\treturn new DissolveState(DissolveStateType.WhenDissolvedTimestampSeconds, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsWhenDissolvedTimestampSeconds()\n\t\t{\n\t\t\tthis.ValidateType(DissolveStateType.WhenDissolvedTimestampSeconds);\n\t\t\treturn (ulong)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ExecuteNnsFunction",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ExecuteNnsFunction\n\t{\n\t\tpublic int nns_function { get; set; }\n\t\t\n\t\tpublic List<byte> payload { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Follow",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Follow\n\t{\n\t\tpublic int topic { get; set; }\n\t\t\n\t\tpublic List<NeuronId> followees { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Followees",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Followees\n\t{\n\t\tpublic List<NeuronId> followees { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Governance",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Governance\n\t{\n\t\tpublic List<default_followeesInfo> default_followees { get; set; }\n\t\t\n\t\tpublic ulong wait_for_quiet_threshold_seconds { get; set; }\n\t\t\n\t\tpublic GovernanceCachedMetrics? metrics { get; set; }\n\t\t\n\t\tpublic List<NodeProvider> node_providers { get; set; }\n\t\t\n\t\tpublic NetworkEconomics? economics { get; set; }\n\t\t\n\t\tpublic RewardEvent? latest_reward_event { get; set; }\n\t\t\n\t\tpublic List<NeuronStakeTransfer> to_claim_transfers { get; set; }\n\t\t\n\t\tpublic ulong short_voting_period_seconds { get; set; }\n\t\t\n\t\tpublic List<proposalsInfo> proposals { get; set; }\n\t\t\n\t\tpublic List<in_flight_commandsInfo> in_flight_commands { get; set; }\n\t\t\n\t\tpublic List<neuronsInfo> neurons { get; set; }\n\t\t\n\t\tpublic ulong genesis_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic class default_followeesInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class proposalsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic ProposalData F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class in_flight_commandsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic NeuronInFlightCommand F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class neuronsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic Neuron F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "GovernanceCachedMetrics",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class GovernanceCachedMetrics\n\t{\n\t\tpublic List<not_dissolving_neurons_e8s_bucketsInfo> not_dissolving_neurons_e8s_buckets { get; set; }\n\t\t\n\t\tpublic ulong garbage_collectable_neurons_count { get; set; }\n\t\t\n\t\tpublic ulong neurons_with_invalid_stake_count { get; set; }\n\t\t\n\t\tpublic List<not_dissolving_neurons_count_bucketsInfo> not_dissolving_neurons_count_buckets { get; set; }\n\t\t\n\t\tpublic ulong total_supply_icp { get; set; }\n\t\t\n\t\tpublic ulong neurons_with_less_than_6_months_dissolve_delay_count { get; set; }\n\t\t\n\t\tpublic ulong dissolved_neurons_count { get; set; }\n\t\t\n\t\tpublic ulong total_staked_e8s { get; set; }\n\t\t\n\t\tpublic ulong not_dissolving_neurons_count { get; set; }\n\t\t\n\t\tpublic ulong dissolved_neurons_e8s { get; set; }\n\t\t\n\t\tpublic ulong neurons_with_less_than_6_months_dissolve_delay_e8s { get; set; }\n\t\t\n\t\tpublic List<dissolving_neurons_count_bucketsInfo> dissolving_neurons_count_buckets { get; set; }\n\t\t\n\t\tpublic ulong dissolving_neurons_count { get; set; }\n\t\t\n\t\tpublic List<dissolving_neurons_e8s_bucketsInfo> dissolving_neurons_e8s_buckets { get; set; }\n\t\t\n\t\tpublic ulong community_fund_total_staked_e8s { get; set; }\n\t\t\n\t\tpublic ulong timestamp_seconds { get; set; }\n\t\t\n\t\tpublic class not_dissolving_neurons_e8s_bucketsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic double F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class not_dissolving_neurons_count_bucketsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic ulong F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class dissolving_neurons_count_bucketsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic ulong F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class dissolving_neurons_e8s_bucketsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic double F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "GovernanceError",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class GovernanceError\n\t{\n\t\tpublic string error_message { get; set; }\n\t\t\n\t\tpublic int error_type { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "IncreaseDissolveDelay",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class IncreaseDissolveDelay\n\t{\n\t\tpublic uint additional_dissolve_delay_seconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "KnownNeuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class KnownNeuron\n\t{\n\t\tpublic NeuronId? id { get; set; }\n\t\t\n\t\tpublic KnownNeuronData? known_neuron_data { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "KnownNeuronData",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class KnownNeuronData\n\t{\n\t\tpublic string name { get; set; }\n\t\t\n\t\tpublic string? description { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListKnownNeuronsResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ListKnownNeuronsResponse\n\t{\n\t\tpublic List<KnownNeuron> known_neurons { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListNeurons",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ListNeurons\n\t{\n\t\tpublic List<ulong> neuron_ids { get; set; }\n\t\t\n\t\tpublic bool include_neurons_readable_by_caller { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListNeuronsResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ListNeuronsResponse\n\t{\n\t\tpublic List<neuron_infosInfo> neuron_infos { get; set; }\n\t\t\n\t\tpublic List<Neuron> full_neurons { get; set; }\n\t\t\n\t\tpublic class neuron_infosInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic NeuronInfo F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "ListNodeProvidersResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ListNodeProvidersResponse\n\t{\n\t\tpublic List<NodeProvider> node_providers { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListProposalInfo",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ListProposalInfo\n\t{\n\t\tpublic List<int> include_reward_status { get; set; }\n\t\t\n\t\tpublic NeuronId? before_proposal { get; set; }\n\t\t\n\t\tpublic uint limit { get; set; }\n\t\t\n\t\tpublic List<int> exclude_topic { get; set; }\n\t\t\n\t\tpublic List<int> include_status { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ListProposalInfoResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ListProposalInfoResponse\n\t{\n\t\tpublic List<ProposalInfo> proposal_info { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "MakeProposalResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class MakeProposalResponse\n\t{\n\t\tpublic NeuronId? proposal_id { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ManageNeuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ManageNeuron\n\t{\n\t\tpublic NeuronId? id { get; set; }\n\t\t\n\t\tpublic Command? command { get; set; }\n\t\t\n\t\tpublic NeuronIdOrSubaccount? neuron_id_or_subaccount { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ManageNeuronResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ManageNeuronResponse\n\t{\n\t\tpublic Command_1? command { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Merge",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Merge\n\t{\n\t\tpublic NeuronId? source_neuron_id { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "MergeMaturity",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class MergeMaturity\n\t{\n\t\tpublic uint percentage_to_merge { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "MergeMaturityResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class MergeMaturityResponse\n\t{\n\t\tpublic ulong merged_maturity_e8s { get; set; }\n\t\t\n\t\tpublic ulong new_stake_e8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Motion",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Motion\n\t{\n\t\tpublic string motion_text { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NetworkEconomics",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class NetworkEconomics\n\t{\n\t\tpublic ulong neuron_minimum_stake_e8s { get; set; }\n\t\t\n\t\tpublic uint max_proposals_to_keep_per_topic { get; set; }\n\t\t\n\t\tpublic ulong neuron_management_fee_per_proposal_e8s { get; set; }\n\t\t\n\t\tpublic ulong reject_cost_e8s { get; set; }\n\t\t\n\t\tpublic ulong transaction_fee_e8s { get; set; }\n\t\t\n\t\tpublic ulong neuron_spawn_dissolve_delay_seconds { get; set; }\n\t\t\n\t\tpublic ulong minimum_icp_xdr_rate { get; set; }\n\t\t\n\t\tpublic ulong maximum_node_provider_rewards_e8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Neuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Neuron\n\t{\n\t\tpublic NeuronId? id { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? controller { get; set; }\n\t\t\n\t\tpublic List<BallotInfo> recent_ballots { get; set; }\n\t\t\n\t\tpublic bool kyc_verified { get; set; }\n\t\t\n\t\tpublic bool not_for_profit { get; set; }\n\t\t\n\t\tpublic ulong maturity_e8s_equivalent { get; set; }\n\t\t\n\t\tpublic ulong cached_neuron_stake_e8s { get; set; }\n\t\t\n\t\tpublic ulong created_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic ulong aging_since_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic List<EdjCase.ICP.Candid.Models.Principal> hot_keys { get; set; }\n\t\t\n\t\tpublic List<byte> account { get; set; }\n\t\t\n\t\tpublic ulong? joined_community_fund_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic DissolveState? dissolve_state { get; set; }\n\t\t\n\t\tpublic List<followeesInfo> followees { get; set; }\n\t\t\n\t\tpublic ulong neuron_fees_e8s { get; set; }\n\t\t\n\t\tpublic NeuronStakeTransfer? transfer { get; set; }\n\t\t\n\t\tpublic KnownNeuronData? known_neuron_data { get; set; }\n\t\t\n\t\tpublic class followeesInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronId",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class NeuronId\n\t{\n\t\tpublic ulong id { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronIdOrSubaccount",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum NeuronIdOrSubaccountType\n\t{\n\t\tSubaccount,\n\t\tNeuronId,\n\t}\n\tpublic class NeuronIdOrSubaccount : EdjCase.ICP.Candid.CandidVariantValueBase<NeuronIdOrSubaccountType>\n\t{\n\t\tpublic NeuronIdOrSubaccount(NeuronIdOrSubaccountType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected NeuronIdOrSubaccount()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static NeuronIdOrSubaccount Subaccount(List<byte> info)\n\t\t{\n\t\t\treturn new NeuronIdOrSubaccount(NeuronIdOrSubaccountType.Subaccount, info);\n\t\t}\n\t\t\n\t\tpublic List<byte> AsSubaccount()\n\t\t{\n\t\t\tthis.ValidateType(NeuronIdOrSubaccountType.Subaccount);\n\t\t\treturn (List<byte>)this.value!;\n\t\t}\n\t\t\n\t\tpublic static NeuronIdOrSubaccount NeuronId(NeuronId info)\n\t\t{\n\t\t\treturn new NeuronIdOrSubaccount(NeuronIdOrSubaccountType.NeuronId, info);\n\t\t}\n\t\t\n\t\tpublic NeuronId AsNeuronId()\n\t\t{\n\t\t\tthis.ValidateType(NeuronIdOrSubaccountType.NeuronId);\n\t\t\treturn (NeuronId)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronInFlightCommand",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class NeuronInFlightCommand\n\t{\n\t\tpublic Command_2? command { get; set; }\n\t\t\n\t\tpublic ulong timestamp { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronInfo",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class NeuronInfo\n\t{\n\t\tpublic ulong dissolve_delay_seconds { get; set; }\n\t\t\n\t\tpublic List<BallotInfo> recent_ballots { get; set; }\n\t\t\n\t\tpublic ulong created_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic int state { get; set; }\n\t\t\n\t\tpublic ulong stake_e8s { get; set; }\n\t\t\n\t\tpublic ulong? joined_community_fund_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic ulong retrieved_at_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic KnownNeuronData? known_neuron_data { get; set; }\n\t\t\n\t\tpublic ulong voting_power { get; set; }\n\t\t\n\t\tpublic ulong age_seconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NeuronStakeTransfer",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class NeuronStakeTransfer\n\t{\n\t\tpublic List<byte> to_subaccount { get; set; }\n\t\t\n\t\tpublic ulong neuron_stake_e8s { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? from { get; set; }\n\t\t\n\t\tpublic ulong memo { get; set; }\n\t\t\n\t\tpublic List<byte> from_subaccount { get; set; }\n\t\t\n\t\tpublic ulong transfer_timestamp { get; set; }\n\t\t\n\t\tpublic ulong block_height { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "NodeProvider",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class NodeProvider\n\t{\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? id { get; set; }\n\t\t\n\t\tpublic AccountIdentifier? reward_account { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Operation",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum OperationType\n\t{\n\t\tRemoveHotKey,\n\t\tAddHotKey,\n\t\tStopDissolving,\n\t\tStartDissolving,\n\t\tIncreaseDissolveDelay,\n\t\tJoinCommunityFund,\n\t\tSetDissolveTimestamp,\n\t}\n\tpublic class Operation : EdjCase.ICP.Candid.CandidVariantValueBase<OperationType>\n\t{\n\t\tpublic Operation(OperationType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Operation()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Operation RemoveHotKey(RemoveHotKey info)\n\t\t{\n\t\t\treturn new Operation(OperationType.RemoveHotKey, info);\n\t\t}\n\t\t\n\t\tpublic RemoveHotKey AsRemoveHotKey()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.RemoveHotKey);\n\t\t\treturn (RemoveHotKey)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation AddHotKey(AddHotKey info)\n\t\t{\n\t\t\treturn new Operation(OperationType.AddHotKey, info);\n\t\t}\n\t\t\n\t\tpublic AddHotKey AsAddHotKey()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.AddHotKey);\n\t\t\treturn (AddHotKey)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation StopDissolving(StopDissolvingInfo info)\n\t\t{\n\t\t\treturn new Operation(OperationType.StopDissolving, info);\n\t\t}\n\t\t\n\t\tpublic StopDissolvingInfo AsStopDissolving()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.StopDissolving);\n\t\t\treturn (StopDissolvingInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation StartDissolving(StartDissolvingInfo info)\n\t\t{\n\t\t\treturn new Operation(OperationType.StartDissolving, info);\n\t\t}\n\t\t\n\t\tpublic StartDissolvingInfo AsStartDissolving()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.StartDissolving);\n\t\t\treturn (StartDissolvingInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation IncreaseDissolveDelay(IncreaseDissolveDelay info)\n\t\t{\n\t\t\treturn new Operation(OperationType.IncreaseDissolveDelay, info);\n\t\t}\n\t\t\n\t\tpublic IncreaseDissolveDelay AsIncreaseDissolveDelay()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.IncreaseDissolveDelay);\n\t\t\treturn (IncreaseDissolveDelay)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation JoinCommunityFund(JoinCommunityFundInfo info)\n\t\t{\n\t\t\treturn new Operation(OperationType.JoinCommunityFund, info);\n\t\t}\n\t\t\n\t\tpublic JoinCommunityFundInfo AsJoinCommunityFund()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.JoinCommunityFund);\n\t\t\treturn (JoinCommunityFundInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation SetDissolveTimestamp(SetDissolveTimestamp info)\n\t\t{\n\t\t\treturn new Operation(OperationType.SetDissolveTimestamp, info);\n\t\t}\n\t\t\n\t\tpublic SetDissolveTimestamp AsSetDissolveTimestamp()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.SetDissolveTimestamp);\n\t\t\treturn (SetDissolveTimestamp)this.value!;\n\t\t}\n\t\t\n\t\tpublic class StopDissolvingInfo\n\t\t{\n\t\t}\n\t\tpublic class StartDissolvingInfo\n\t\t{\n\t\t}\n\t\tpublic class JoinCommunityFundInfo\n\t\t{\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "Proposal",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Proposal\n\t{\n\t\tpublic string url { get; set; }\n\t\t\n\t\tpublic string? title { get; set; }\n\t\t\n\t\tpublic Action? action { get; set; }\n\t\t\n\t\tpublic string summary { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "ProposalData",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ProposalData\n\t{\n\t\tpublic NeuronId? id { get; set; }\n\t\t\n\t\tpublic GovernanceError? failure_reason { get; set; }\n\t\t\n\t\tpublic List<ballotsInfo> ballots { get; set; }\n\t\t\n\t\tpublic ulong proposal_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic ulong reward_event_round { get; set; }\n\t\t\n\t\tpublic ulong failed_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic ulong reject_cost_e8s { get; set; }\n\t\t\n\t\tpublic Tally? latest_tally { get; set; }\n\t\t\n\t\tpublic ulong decided_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic Proposal? proposal { get; set; }\n\t\t\n\t\tpublic NeuronId? proposer { get; set; }\n\t\t\n\t\tpublic WaitForQuietState? wait_for_quiet_state { get; set; }\n\t\t\n\t\tpublic ulong executed_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic class ballotsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic Ballot F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "ProposalInfo",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class ProposalInfo\n\t{\n\t\tpublic NeuronId? id { get; set; }\n\t\t\n\t\tpublic int status { get; set; }\n\t\t\n\t\tpublic int topic { get; set; }\n\t\t\n\t\tpublic GovernanceError? failure_reason { get; set; }\n\t\t\n\t\tpublic List<ballotsInfo> ballots { get; set; }\n\t\t\n\t\tpublic ulong proposal_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic ulong reward_event_round { get; set; }\n\t\t\n\t\tpublic ulong? deadline_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic ulong failed_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic ulong reject_cost_e8s { get; set; }\n\t\t\n\t\tpublic Tally? latest_tally { get; set; }\n\t\t\n\t\tpublic int reward_status { get; set; }\n\t\t\n\t\tpublic ulong decided_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic Proposal? proposal { get; set; }\n\t\t\n\t\tpublic NeuronId? proposer { get; set; }\n\t\t\n\t\tpublic ulong executed_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic class ballotsInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic Ballot F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "RegisterVote",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class RegisterVote\n\t{\n\t\tpublic int vote { get; set; }\n\t\t\n\t\tpublic NeuronId? proposal { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RemoveHotKey",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class RemoveHotKey\n\t{\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? hot_key_to_remove { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Result",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum ResultType\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result : EdjCase.ICP.Candid.CandidVariantValueBase<ResultType>\n\t{\n\t\tpublic Result(ResultType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result Ok()\n\t\t{\n\t\t\treturn new Result(ResultType.Ok, null);\n\t\t}\n\t\t\n\t\tpublic static Result Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result(ResultType.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(ResultType.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Result_1",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum Result_1Type\n\t{\n\t\tError,\n\t\tNeuronId,\n\t}\n\tpublic class Result_1 : EdjCase.ICP.Candid.CandidVariantValueBase<Result_1Type>\n\t{\n\t\tpublic Result_1(Result_1Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result_1()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result_1 Error(GovernanceError info)\n\t\t{\n\t\t\treturn new Result_1(Result_1Type.Error, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsError()\n\t\t{\n\t\t\tthis.ValidateType(Result_1Type.Error);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result_1 NeuronId(NeuronId info)\n\t\t{\n\t\t\treturn new Result_1(Result_1Type.NeuronId, info);\n\t\t}\n\t\t\n\t\tpublic NeuronId AsNeuronId()\n\t\t{\n\t\t\tthis.ValidateType(Result_1Type.NeuronId);\n\t\t\treturn (NeuronId)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Result_2",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum Result_2Type\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result_2 : EdjCase.ICP.Candid.CandidVariantValueBase<Result_2Type>\n\t{\n\t\tpublic Result_2(Result_2Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result_2()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result_2 Ok(Neuron info)\n\t\t{\n\t\t\treturn new Result_2(Result_2Type.Ok, info);\n\t\t}\n\t\t\n\t\tpublic Neuron AsOk()\n\t\t{\n\t\t\tthis.ValidateType(Result_2Type.Ok);\n\t\t\treturn (Neuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result_2 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result_2(Result_2Type.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(Result_2Type.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Result_3",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum Result_3Type\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result_3 : EdjCase.ICP.Candid.CandidVariantValueBase<Result_3Type>\n\t{\n\t\tpublic Result_3(Result_3Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result_3()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result_3 Ok(RewardNodeProviders info)\n\t\t{\n\t\t\treturn new Result_3(Result_3Type.Ok, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProviders AsOk()\n\t\t{\n\t\t\tthis.ValidateType(Result_3Type.Ok);\n\t\t\treturn (RewardNodeProviders)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result_3 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result_3(Result_3Type.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(Result_3Type.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Result_4",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum Result_4Type\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result_4 : EdjCase.ICP.Candid.CandidVariantValueBase<Result_4Type>\n\t{\n\t\tpublic Result_4(Result_4Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result_4()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result_4 Ok(NeuronInfo info)\n\t\t{\n\t\t\treturn new Result_4(Result_4Type.Ok, info);\n\t\t}\n\t\t\n\t\tpublic NeuronInfo AsOk()\n\t\t{\n\t\t\tthis.ValidateType(Result_4Type.Ok);\n\t\t\treturn (NeuronInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result_4 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result_4(Result_4Type.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(Result_4Type.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Result_5",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum Result_5Type\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result_5 : EdjCase.ICP.Candid.CandidVariantValueBase<Result_5Type>\n\t{\n\t\tpublic Result_5(Result_5Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result_5()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result_5 Ok(NodeProvider info)\n\t\t{\n\t\t\treturn new Result_5(Result_5Type.Ok, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsOk()\n\t\t{\n\t\t\tthis.ValidateType(Result_5Type.Ok);\n\t\t\treturn (NodeProvider)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result_5 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result_5(Result_5Type.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(Result_5Type.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardEvent",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class RewardEvent\n\t{\n\t\tpublic ulong day_after_genesis { get; set; }\n\t\t\n\t\tpublic ulong actual_timestamp_seconds { get; set; }\n\t\t\n\t\tpublic ulong distributed_e8s_equivalent { get; set; }\n\t\t\n\t\tpublic List<NeuronId> settled_proposals { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardMode",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic enum RewardModeType\n\t{\n\t\tRewardToNeuron,\n\t\tRewardToAccount,\n\t}\n\tpublic class RewardMode : EdjCase.ICP.Candid.CandidVariantValueBase<RewardModeType>\n\t{\n\t\tpublic RewardMode(RewardModeType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected RewardMode()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static RewardMode RewardToNeuron(RewardToNeuron info)\n\t\t{\n\t\t\treturn new RewardMode(RewardModeType.RewardToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic RewardToNeuron AsRewardToNeuron()\n\t\t{\n\t\t\tthis.ValidateType(RewardModeType.RewardToNeuron);\n\t\t\treturn (RewardToNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static RewardMode RewardToAccount(RewardToAccount info)\n\t\t{\n\t\t\treturn new RewardMode(RewardModeType.RewardToAccount, info);\n\t\t}\n\t\t\n\t\tpublic RewardToAccount AsRewardToAccount()\n\t\t{\n\t\t\tthis.ValidateType(RewardModeType.RewardToAccount);\n\t\t\treturn (RewardToAccount)this.value!;\n\t\t}\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardNodeProvider",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class RewardNodeProvider\n\t{\n\t\tpublic NodeProvider? node_provider { get; set; }\n\t\t\n\t\tpublic RewardMode? reward_mode { get; set; }\n\t\t\n\t\tpublic ulong amount_e8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardNodeProviders",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class RewardNodeProviders\n\t{\n\t\tpublic bool? use_registry_derived_rewards { get; set; }\n\t\t\n\t\tpublic List<RewardNodeProvider> rewards { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardToAccount",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class RewardToAccount\n\t{\n\t\tpublic AccountIdentifier? to_account { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "RewardToNeuron",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class RewardToNeuron\n\t{\n\t\tpublic ulong dissolve_delay_seconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "SetDefaultFollowees",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class SetDefaultFollowees\n\t{\n\t\tpublic List<default_followeesInfo> default_followees { get; set; }\n\t\t\n\t\tpublic class default_followeesInfo\n\t\t{\n\t\t\t[CandidName(\"0\")]\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\t[CandidName(\"1\")]\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n\n"
    },
    {
      "Item1": "SetDissolveTimestamp",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class SetDissolveTimestamp\n\t{\n\t\tpublic ulong dissolve_timestamp_seconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Spawn",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Spawn\n\t{\n\t\tpublic uint? percentage_to_spawn { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? new_controller { get; set; }\n\t\t\n\t\tpublic ulong? nonce { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "SpawnResponse",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class SpawnResponse\n\t{\n\t\tpublic NeuronId? created_neuron_id { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Split",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Split\n\t{\n\t\tpublic ulong amount_e8s { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "Tally",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class Tally\n\t{\n\t\tpublic ulong no { get; set; }\n\t\t\n\t\tpublic ulong yes { get; set; }\n\t\t\n\t\tpublic ulong total { get; set; }\n\t\t\n\t\tpublic ulong timestamp_seconds { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "UpdateNodeProvider",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class UpdateNodeProvider\n\t{\n\t\tpublic AccountIdentifier? reward_account { get; set; }\n\t\t\n\t}\n}\n\n"
    },
    {
      "Item1": "WaitForQuietState",
      "Item2": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing EdjCase.ICP.Candid.Mappers;\n\nnamespace Test.Models\n{\n\tpublic class WaitForQuietState\n\t{\n\t\tpublic ulong current_deadline_timestamp_seconds { get; set; }\n\t\t\n\t}\n}\n\n"
    }
  ],
  "AliasFile": null
}
