{
  "Name": {
    "HasPrefix": false
  },
  "ClientFile": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test\n{\n\tpublic class GovernanceApiClient\n\t{\n\t\tpublic EdjCase.ICP.Agent.Agents.IAgent Agent { get; }\n\n\t\tpublic EdjCase.ICP.Candid.Models.Principal CanisterId { get; }\n\n\t\tpublic GovernanceApiClient(EdjCase.ICP.Agent.Agents.IAgent agent, EdjCase.ICP.Candid.Models.Principal canisterId)\n\t\t{\n\t\t\tthis.Agent = agent;\n\t\t\tthis.CanisterId = canisterId;\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result> ClaimGtcNeurons(EdjCase.ICP.Candid.Models.Principal arg0, System.Collections.Generic.List<Test.Models.NeuronId> arg1)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg1));\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, \"ClaimGtcNeurons\", arg);\n\t\t\treturn reply.ToObjects<Test.Models.Result>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.ClaimOrRefreshNeuronFromAccountResponse> ClaimOrRefreshNeuronFromAccount(Test.Models.ClaimOrRefreshNeuronFromAccount arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, \"ClaimOrRefreshNeuronFromAccount\", arg);\n\t\t\treturn reply.ToObjects<Test.Models.ClaimOrRefreshNeuronFromAccountResponse>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<System.String> GetBuildMetadata()\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetBuildMetadata\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<System.String>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result2> GetFullNeuron(System.UInt64 arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetFullNeuron\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.Result2>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result2> GetFullNeuronByIdOrSubaccount(Test.Models.NeuronIdOrSubaccount arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetFullNeuronByIdOrSubaccount\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.Result2>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result3> GetMonthlyNodeProviderRewards()\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, \"GetMonthlyNodeProviderRewards\", arg);\n\t\t\treturn reply.ToObjects<Test.Models.Result3>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.NetworkEconomics> GetNetworkEconomicsParameters()\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetNetworkEconomicsParameters\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.NetworkEconomics>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<System.Collections.Generic.List<System.UInt64>> GetNeuronIds()\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetNeuronIds\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<System.Collections.Generic.List<System.UInt64>>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result4> GetNeuronInfo(System.UInt64 arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetNeuronInfo\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.Result4>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result4> GetNeuronInfoByIdOrSubaccount(Test.Models.NeuronIdOrSubaccount arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetNeuronInfoByIdOrSubaccount\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.Result4>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result5> GetNodeProviderByCaller(EdjCase.ICP.Candid.Models.NullValue arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetNodeProviderByCaller\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.Result5>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<System.Collections.Generic.List<Test.Models.ProposalInfo>> GetPendingProposals()\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetPendingProposals\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<System.Collections.Generic.List<Test.Models.ProposalInfo>>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.ProposalInfo>> GetProposalInfo(System.UInt64 arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"GetProposalInfo\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.ProposalInfo>>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.ListKnownNeuronsResponse> ListKnownNeurons()\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"ListKnownNeurons\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.ListKnownNeuronsResponse>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.ListNeuronsResponse> ListNeurons(Test.Models.ListNeurons arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"ListNeurons\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.ListNeuronsResponse>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.ListNodeProvidersResponse> ListNodeProviders()\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"ListNodeProviders\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.ListNodeProvidersResponse>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.ListProposalInfoResponse> ListProposals(Test.Models.ListProposalInfo arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, \"ListProposals\", arg);\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();\n\t\t\treturn reply.ToObjects<Test.Models.ListProposalInfoResponse>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.ManageNeuronResponse> ManageNeuron(Test.Models.ManageNeuron arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, \"ManageNeuron\", arg);\n\t\t\treturn reply.ToObjects<Test.Models.ManageNeuronResponse>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result> TransferGtcNeuron(Test.Models.NeuronId arg0, Test.Models.NeuronId arg1)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg1));\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, \"TransferGtcNeuron\", arg);\n\t\t\treturn reply.ToObjects<Test.Models.Result>();\n\t\t}\n\n\t\tpublic async System.Threading.Tasks.Task<Test.Models.Result> UpdateNodeProvider(Test.Models.UpdateNodeProvider arg0)\n\t\t{\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));\n\t\t\tEdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, \"UpdateNodeProvider\", arg);\n\t\t\treturn reply.ToObjects<Test.Models.Result>();\n\t\t}\n\t}\n}",
  "DataModelFiles": [
    {
      "Item1": "AccountIdentifier",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class AccountIdentifier\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"hash\")]\n\t\tpublic System.Collections.Generic.List<System.Byte> Hash { get; set; }\n\n\t\tpublic AccountIdentifier(System.Collections.Generic.List<System.Byte> hash)\n\t\t{\n\t\t\tthis.Hash = hash;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Action",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.ActionTag))]\n\tpublic class Action\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.ActionTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Action(Test.Models.ActionTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Action()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Action RegisterKnownNeuron(Test.Models.KnownNeuron info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.RegisterKnownNeuron, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action ManageNeuron(Test.Models.ManageNeuron info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.ManageNeuron, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action ExecuteNnsFunction(Test.Models.ExecuteNnsFunction info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.ExecuteNnsFunction, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action RewardNodeProvider(Test.Models.RewardNodeProvider info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.RewardNodeProvider, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action SetDefaultFollowees(Test.Models.SetDefaultFollowees info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.SetDefaultFollowees, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action RewardNodeProviders(Test.Models.RewardNodeProviders info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.RewardNodeProviders, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action ManageNetworkEconomics(Test.Models.NetworkEconomics info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.ManageNetworkEconomics, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action ApproveGenesisKyc(Test.Models.ApproveGenesisKyc info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.ApproveGenesisKyc, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action AddOrRemoveNodeProvider(Test.Models.AddOrRemoveNodeProvider info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.AddOrRemoveNodeProvider, info);\n\t\t}\n\n\t\tpublic static Test.Models.Action Motion(Test.Models.Motion info)\n\t\t{\n\t\t\treturn new Test.Models.Action(Test.Models.ActionTag.Motion, info);\n\t\t}\n\n\t\tpublic Test.Models.KnownNeuron AsRegisterKnownNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.RegisterKnownNeuron);\n\t\t\treturn (Test.Models.KnownNeuron)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.ManageNeuron AsManageNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.ManageNeuron);\n\t\t\treturn (Test.Models.ManageNeuron)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.ExecuteNnsFunction AsExecuteNnsFunction()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.ExecuteNnsFunction);\n\t\t\treturn (Test.Models.ExecuteNnsFunction)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.RewardNodeProvider AsRewardNodeProvider()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.RewardNodeProvider);\n\t\t\treturn (Test.Models.RewardNodeProvider)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.SetDefaultFollowees AsSetDefaultFollowees()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.SetDefaultFollowees);\n\t\t\treturn (Test.Models.SetDefaultFollowees)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.RewardNodeProviders AsRewardNodeProviders()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.RewardNodeProviders);\n\t\t\treturn (Test.Models.RewardNodeProviders)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.NetworkEconomics AsManageNetworkEconomics()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.ManageNetworkEconomics);\n\t\t\treturn (Test.Models.NetworkEconomics)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.ApproveGenesisKyc AsApproveGenesisKyc()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.ApproveGenesisKyc);\n\t\t\treturn (Test.Models.ApproveGenesisKyc)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.AddOrRemoveNodeProvider AsAddOrRemoveNodeProvider()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.AddOrRemoveNodeProvider);\n\t\t\treturn (Test.Models.AddOrRemoveNodeProvider)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Motion AsMotion()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ActionTag.Motion);\n\t\t\treturn (Test.Models.Motion)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.ActionTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum ActionTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RegisterKnownNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.KnownNeuron))]\n\t\tRegisterKnownNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ManageNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ManageNeuron))]\n\t\tManageNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ExecuteNnsFunction\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ExecuteNnsFunction))]\n\t\tExecuteNnsFunction,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RewardNodeProvider\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardNodeProvider))]\n\t\tRewardNodeProvider,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"SetDefaultFollowees\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SetDefaultFollowees))]\n\t\tSetDefaultFollowees,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RewardNodeProviders\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardNodeProviders))]\n\t\tRewardNodeProviders,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ManageNetworkEconomics\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NetworkEconomics))]\n\t\tManageNetworkEconomics,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ApproveGenesisKyc\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ApproveGenesisKyc))]\n\t\tApproveGenesisKyc,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"AddOrRemoveNodeProvider\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.AddOrRemoveNodeProvider))]\n\t\tAddOrRemoveNodeProvider,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Motion\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Motion))]\n\t\tMotion\n\t}\n}"
    },
    {
      "Item1": "AddHotKey",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class AddHotKey\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"new_hot_key\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewHotKey { get; set; }\n\n\t\tpublic AddHotKey(EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> newHotKey)\n\t\t{\n\t\t\tthis.NewHotKey = newHotKey;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "AddOrRemoveNodeProvider",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class AddOrRemoveNodeProvider\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"change\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Change> Change { get; set; }\n\n\t\tpublic AddOrRemoveNodeProvider(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Change> change)\n\t\t{\n\t\t\tthis.Change = change;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Amount",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Amount\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"e8s\")]\n\t\tpublic System.UInt64 E8s { get; set; }\n\n\t\tpublic Amount(System.UInt64 e8s)\n\t\t{\n\t\t\tthis.E8s = e8s;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ApproveGenesisKyc",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ApproveGenesisKyc\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"principals\")]\n\t\tpublic System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> Principals { get; set; }\n\n\t\tpublic ApproveGenesisKyc(System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> principals)\n\t\t{\n\t\t\tthis.Principals = principals;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Ballot",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Ballot\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"vote\")]\n\t\tpublic System.Int32 Vote { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"voting_power\")]\n\t\tpublic System.UInt64 VotingPower { get; set; }\n\n\t\tpublic Ballot(System.Int32 vote, System.UInt64 votingPower)\n\t\t{\n\t\t\tthis.Vote = vote;\n\t\t\tthis.VotingPower = votingPower;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "BallotInfo",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class BallotInfo\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"vote\")]\n\t\tpublic System.Int32 Vote { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> ProposalId { get; set; }\n\n\t\tpublic BallotInfo(System.Int32 vote, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposalId)\n\t\t{\n\t\t\tthis.Vote = vote;\n\t\t\tthis.ProposalId = proposalId;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "By",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.ByTag))]\n\tpublic class By\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.ByTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic By(Test.Models.ByTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected By()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.By NeuronIdOrSubaccount(Test.Models.By.ByO0 info)\n\t\t{\n\t\t\treturn new Test.Models.By(Test.Models.ByTag.NeuronIdOrSubaccount, info);\n\t\t}\n\n\t\tpublic static Test.Models.By MemoAndController(Test.Models.ClaimOrRefreshNeuronFromAccount info)\n\t\t{\n\t\t\treturn new Test.Models.By(Test.Models.ByTag.MemoAndController, info);\n\t\t}\n\n\t\tpublic static Test.Models.By Memo(System.UInt64 info)\n\t\t{\n\t\t\treturn new Test.Models.By(Test.Models.ByTag.Memo, info);\n\t\t}\n\n\t\tpublic Test.Models.By.ByO0 AsNeuronIdOrSubaccount()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ByTag.NeuronIdOrSubaccount);\n\t\t\treturn (Test.Models.By.ByO0)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.ClaimOrRefreshNeuronFromAccount AsMemoAndController()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ByTag.MemoAndController);\n\t\t\treturn (Test.Models.ClaimOrRefreshNeuronFromAccount)this.Value!;\n\t\t}\n\n\t\tpublic System.UInt64 AsMemo()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ByTag.Memo);\n\t\t\treturn (System.UInt64)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.ByTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\n\t\tpublic class ByO0\n\t\t{\n\t\t\tpublic ByO0()\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum ByTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"NeuronIdOrSubaccount\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.By.ByO0))]\n\t\tNeuronIdOrSubaccount,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MemoAndController\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ClaimOrRefreshNeuronFromAccount))]\n\t\tMemoAndController,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Memo\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.UInt64))]\n\t\tMemo\n\t}\n}"
    },
    {
      "Item1": "Change",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.ChangeTag))]\n\tpublic class Change\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.ChangeTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Change(Test.Models.ChangeTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Change()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Change ToRemove(Test.Models.NodeProvider info)\n\t\t{\n\t\t\treturn new Test.Models.Change(Test.Models.ChangeTag.ToRemove, info);\n\t\t}\n\n\t\tpublic static Test.Models.Change ToAdd(Test.Models.NodeProvider info)\n\t\t{\n\t\t\treturn new Test.Models.Change(Test.Models.ChangeTag.ToAdd, info);\n\t\t}\n\n\t\tpublic Test.Models.NodeProvider AsToRemove()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ChangeTag.ToRemove);\n\t\t\treturn (Test.Models.NodeProvider)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.NodeProvider AsToAdd()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ChangeTag.ToAdd);\n\t\t\treturn (Test.Models.NodeProvider)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.ChangeTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum ChangeTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ToRemove\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NodeProvider))]\n\t\tToRemove,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ToAdd\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NodeProvider))]\n\t\tToAdd\n\t}\n}"
    },
    {
      "Item1": "ClaimOrRefresh",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefresh\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"by\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.By> By { get; set; }\n\n\t\tpublic ClaimOrRefresh(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.By> by)\n\t\t{\n\t\t\tthis.By = by;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ClaimOrRefreshNeuronFromAccount",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshNeuronFromAccount\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"controller\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Controller { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"memo\")]\n\t\tpublic System.UInt64 Memo { get; set; }\n\n\t\tpublic ClaimOrRefreshNeuronFromAccount(EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> controller, System.UInt64 memo)\n\t\t{\n\t\t\tthis.Controller = controller;\n\t\t\tthis.Memo = memo;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ClaimOrRefreshNeuronFromAccountResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshNeuronFromAccountResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"result\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Result1> Result { get; set; }\n\n\t\tpublic ClaimOrRefreshNeuronFromAccountResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Result1> result)\n\t\t{\n\t\t\tthis.Result = result;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ClaimOrRefreshResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ClaimOrRefreshResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"refreshed_neuron_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> RefreshedNeuronId { get; set; }\n\n\t\tpublic ClaimOrRefreshResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> refreshedNeuronId)\n\t\t{\n\t\t\tthis.RefreshedNeuronId = refreshedNeuronId;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Command",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.CommandTag))]\n\tpublic class Command\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.CommandTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Command(Test.Models.CommandTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Command()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Command Spawn(Test.Models.Spawn info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.Spawn, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command Split(Test.Models.Split info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.Split, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command Follow(Test.Models.Follow info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.Follow, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command ClaimOrRefresh(Test.Models.ClaimOrRefresh info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.ClaimOrRefresh, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command Configure(Test.Models.Configure info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.Configure, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command RegisterVote(Test.Models.RegisterVote info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.RegisterVote, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command Merge(Test.Models.Merge info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.Merge, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command DisburseToNeuron(Test.Models.DisburseToNeuron info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.DisburseToNeuron, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command MakeProposal(Test.Models.Proposal info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.MakeProposal, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command MergeMaturity(Test.Models.MergeMaturity info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.MergeMaturity, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command Disburse(Test.Models.Disburse info)\n\t\t{\n\t\t\treturn new Test.Models.Command(Test.Models.CommandTag.Disburse, info);\n\t\t}\n\n\t\tpublic Test.Models.Spawn AsSpawn()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.Spawn);\n\t\t\treturn (Test.Models.Spawn)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Split AsSplit()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.Split);\n\t\t\treturn (Test.Models.Split)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Follow AsFollow()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.Follow);\n\t\t\treturn (Test.Models.Follow)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.ClaimOrRefresh AsClaimOrRefresh()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.ClaimOrRefresh);\n\t\t\treturn (Test.Models.ClaimOrRefresh)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Configure AsConfigure()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.Configure);\n\t\t\treturn (Test.Models.Configure)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.RegisterVote AsRegisterVote()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.RegisterVote);\n\t\t\treturn (Test.Models.RegisterVote)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Merge AsMerge()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.Merge);\n\t\t\treturn (Test.Models.Merge)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.DisburseToNeuron AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.DisburseToNeuron);\n\t\t\treturn (Test.Models.DisburseToNeuron)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Proposal AsMakeProposal()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.MakeProposal);\n\t\t\treturn (Test.Models.Proposal)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.MergeMaturity AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.MergeMaturity);\n\t\t\treturn (Test.Models.MergeMaturity)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Disburse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.CommandTag.Disburse);\n\t\t\treturn (Test.Models.Disburse)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.CommandTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum CommandTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Spawn\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Spawn))]\n\t\tSpawn,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Split\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Split))]\n\t\tSplit,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Follow\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Follow))]\n\t\tFollow,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ClaimOrRefresh\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ClaimOrRefresh))]\n\t\tClaimOrRefresh,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Configure\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Configure))]\n\t\tConfigure,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RegisterVote\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RegisterVote))]\n\t\tRegisterVote,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Merge\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Merge))]\n\t\tMerge,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"DisburseToNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.DisburseToNeuron))]\n\t\tDisburseToNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MakeProposal\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Proposal))]\n\t\tMakeProposal,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MergeMaturity\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.MergeMaturity))]\n\t\tMergeMaturity,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Disburse\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Disburse))]\n\t\tDisburse\n\t}\n}"
    },
    {
      "Item1": "Command1",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Command1Tag))]\n\tpublic class Command1\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.Command1Tag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Command1(Test.Models.Command1Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Command1()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Command1 Error(Test.Models.GovernanceError info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.Error, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 Spawn(Test.Models.SpawnResponse info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.Spawn, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 Split(Test.Models.SpawnResponse info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.Split, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 Follow(Test.Models.Command1.Command1O3 info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.Follow, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 ClaimOrRefresh(Test.Models.ClaimOrRefreshResponse info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.ClaimOrRefresh, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 Configure(Test.Models.Command1.Command1O5 info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.Configure, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 RegisterVote(Test.Models.Command1.Command1O6 info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.RegisterVote, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 Merge(Test.Models.Command1.Command1O7 info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.Merge, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 DisburseToNeuron(Test.Models.SpawnResponse info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.DisburseToNeuron, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 MakeProposal(Test.Models.MakeProposalResponse info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.MakeProposal, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 MergeMaturity(Test.Models.MergeMaturityResponse info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.MergeMaturity, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command1 Disburse(Test.Models.DisburseResponse info)\n\t\t{\n\t\t\treturn new Test.Models.Command1(Test.Models.Command1Tag.Disburse, info);\n\t\t}\n\n\t\tpublic Test.Models.GovernanceError AsError()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.Error);\n\t\t\treturn (Test.Models.GovernanceError)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.SpawnResponse AsSpawn()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.Spawn);\n\t\t\treturn (Test.Models.SpawnResponse)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.SpawnResponse AsSplit()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.Split);\n\t\t\treturn (Test.Models.SpawnResponse)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Command1.Command1O3 AsFollow()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.Follow);\n\t\t\treturn (Test.Models.Command1.Command1O3)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.ClaimOrRefreshResponse AsClaimOrRefresh()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.ClaimOrRefresh);\n\t\t\treturn (Test.Models.ClaimOrRefreshResponse)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Command1.Command1O5 AsConfigure()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.Configure);\n\t\t\treturn (Test.Models.Command1.Command1O5)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Command1.Command1O6 AsRegisterVote()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.RegisterVote);\n\t\t\treturn (Test.Models.Command1.Command1O6)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Command1.Command1O7 AsMerge()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.Merge);\n\t\t\treturn (Test.Models.Command1.Command1O7)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.SpawnResponse AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.DisburseToNeuron);\n\t\t\treturn (Test.Models.SpawnResponse)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.MakeProposalResponse AsMakeProposal()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.MakeProposal);\n\t\t\treturn (Test.Models.MakeProposalResponse)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.MergeMaturityResponse AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.MergeMaturity);\n\t\t\treturn (Test.Models.MergeMaturityResponse)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.DisburseResponse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command1Tag.Disburse);\n\t\t\treturn (Test.Models.DisburseResponse)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.Command1Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\n\t\tpublic class Command1O3\n\t\t{\n\t\t\tpublic Command1O3()\n\t\t\t{\n\t\t\t}\n\t\t}\n\n\t\tpublic class Command1O5\n\t\t{\n\t\t\tpublic Command1O5()\n\t\t\t{\n\t\t\t}\n\t\t}\n\n\t\tpublic class Command1O6\n\t\t{\n\t\t\tpublic Command1O6()\n\t\t\t{\n\t\t\t}\n\t\t}\n\n\t\tpublic class Command1O7\n\t\t{\n\t\t\tpublic Command1O7()\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum Command1Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Error\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]\n\t\tError,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Spawn\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SpawnResponse))]\n\t\tSpawn,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Split\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SpawnResponse))]\n\t\tSplit,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Follow\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Command1.Command1O3))]\n\t\tFollow,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ClaimOrRefresh\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ClaimOrRefreshResponse))]\n\t\tClaimOrRefresh,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Configure\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Command1.Command1O5))]\n\t\tConfigure,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RegisterVote\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Command1.Command1O6))]\n\t\tRegisterVote,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Merge\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Command1.Command1O7))]\n\t\tMerge,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"DisburseToNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SpawnResponse))]\n\t\tDisburseToNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MakeProposal\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.MakeProposalResponse))]\n\t\tMakeProposal,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MergeMaturity\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.MergeMaturityResponse))]\n\t\tMergeMaturity,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Disburse\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.DisburseResponse))]\n\t\tDisburse\n\t}\n}"
    },
    {
      "Item1": "Command2",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Command2Tag))]\n\tpublic class Command2\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.Command2Tag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Command2(Test.Models.Command2Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Command2()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Command2 Spawn(Test.Models.Spawn info)\n\t\t{\n\t\t\treturn new Test.Models.Command2(Test.Models.Command2Tag.Spawn, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command2 Split(Test.Models.Split info)\n\t\t{\n\t\t\treturn new Test.Models.Command2(Test.Models.Command2Tag.Split, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command2 Configure(Test.Models.Configure info)\n\t\t{\n\t\t\treturn new Test.Models.Command2(Test.Models.Command2Tag.Configure, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command2 Merge(Test.Models.Merge info)\n\t\t{\n\t\t\treturn new Test.Models.Command2(Test.Models.Command2Tag.Merge, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command2 DisburseToNeuron(Test.Models.DisburseToNeuron info)\n\t\t{\n\t\t\treturn new Test.Models.Command2(Test.Models.Command2Tag.DisburseToNeuron, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command2 ClaimOrRefreshNeuron(Test.Models.ClaimOrRefresh info)\n\t\t{\n\t\t\treturn new Test.Models.Command2(Test.Models.Command2Tag.ClaimOrRefreshNeuron, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command2 MergeMaturity(Test.Models.MergeMaturity info)\n\t\t{\n\t\t\treturn new Test.Models.Command2(Test.Models.Command2Tag.MergeMaturity, info);\n\t\t}\n\n\t\tpublic static Test.Models.Command2 Disburse(Test.Models.Disburse info)\n\t\t{\n\t\t\treturn new Test.Models.Command2(Test.Models.Command2Tag.Disburse, info);\n\t\t}\n\n\t\tpublic Test.Models.Spawn AsSpawn()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command2Tag.Spawn);\n\t\t\treturn (Test.Models.Spawn)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Split AsSplit()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command2Tag.Split);\n\t\t\treturn (Test.Models.Split)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Configure AsConfigure()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command2Tag.Configure);\n\t\t\treturn (Test.Models.Configure)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Merge AsMerge()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command2Tag.Merge);\n\t\t\treturn (Test.Models.Merge)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.DisburseToNeuron AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command2Tag.DisburseToNeuron);\n\t\t\treturn (Test.Models.DisburseToNeuron)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.ClaimOrRefresh AsClaimOrRefreshNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command2Tag.ClaimOrRefreshNeuron);\n\t\t\treturn (Test.Models.ClaimOrRefresh)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.MergeMaturity AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command2Tag.MergeMaturity);\n\t\t\treturn (Test.Models.MergeMaturity)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Disburse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Command2Tag.Disburse);\n\t\t\treturn (Test.Models.Disburse)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.Command2Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum Command2Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Spawn\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Spawn))]\n\t\tSpawn,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Split\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Split))]\n\t\tSplit,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Configure\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Configure))]\n\t\tConfigure,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Merge\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Merge))]\n\t\tMerge,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"DisburseToNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.DisburseToNeuron))]\n\t\tDisburseToNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ClaimOrRefreshNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ClaimOrRefresh))]\n\t\tClaimOrRefreshNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"MergeMaturity\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.MergeMaturity))]\n\t\tMergeMaturity,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Disburse\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Disburse))]\n\t\tDisburse\n\t}\n}"
    },
    {
      "Item1": "Configure",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Configure\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"operation\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Operation> Operation { get; set; }\n\n\t\tpublic Configure(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Operation> operation)\n\t\t{\n\t\t\tthis.Operation = operation;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Disburse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Disburse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"to_account\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> ToAccount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"amount\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Amount> Amount { get; set; }\n\n\t\tpublic Disburse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> toAccount, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Amount> amount)\n\t\t{\n\t\t\tthis.ToAccount = toAccount;\n\t\t\tthis.Amount = amount;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "DisburseResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class DisburseResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"transfer_block_height\")]\n\t\tpublic System.UInt64 TransferBlockHeight { get; set; }\n\n\t\tpublic DisburseResponse(System.UInt64 transferBlockHeight)\n\t\t{\n\t\t\tthis.TransferBlockHeight = transferBlockHeight;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "DisburseToNeuron",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class DisburseToNeuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_delay_seconds\")]\n\t\tpublic System.UInt64 DissolveDelaySeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"kyc_verified\")]\n\t\tpublic System.Boolean KycVerified { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"amount_e8s\")]\n\t\tpublic System.UInt64 AmountE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"new_controller\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewController { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"nonce\")]\n\t\tpublic System.UInt64 Nonce { get; set; }\n\n\t\tpublic DisburseToNeuron(System.UInt64 dissolveDelaySeconds, System.Boolean kycVerified, System.UInt64 amountE8s, EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> newController, System.UInt64 nonce)\n\t\t{\n\t\t\tthis.DissolveDelaySeconds = dissolveDelaySeconds;\n\t\t\tthis.KycVerified = kycVerified;\n\t\t\tthis.AmountE8s = amountE8s;\n\t\t\tthis.NewController = newController;\n\t\t\tthis.Nonce = nonce;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "DissolveState",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.DissolveStateTag))]\n\tpublic class DissolveState\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.DissolveStateTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic DissolveState(Test.Models.DissolveStateTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected DissolveState()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.DissolveState DissolveDelaySeconds(System.UInt64 info)\n\t\t{\n\t\t\treturn new Test.Models.DissolveState(Test.Models.DissolveStateTag.DissolveDelaySeconds, info);\n\t\t}\n\n\t\tpublic static Test.Models.DissolveState WhenDissolvedTimestampSeconds(System.UInt64 info)\n\t\t{\n\t\t\treturn new Test.Models.DissolveState(Test.Models.DissolveStateTag.WhenDissolvedTimestampSeconds, info);\n\t\t}\n\n\t\tpublic System.UInt64 AsDissolveDelaySeconds()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.DissolveStateTag.DissolveDelaySeconds);\n\t\t\treturn (System.UInt64)this.Value!;\n\t\t}\n\n\t\tpublic System.UInt64 AsWhenDissolvedTimestampSeconds()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.DissolveStateTag.WhenDissolvedTimestampSeconds);\n\t\t\treturn (System.UInt64)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.DissolveStateTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum DissolveStateTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"DissolveDelaySeconds\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.UInt64))]\n\t\tDissolveDelaySeconds,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"WhenDissolvedTimestampSeconds\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.UInt64))]\n\t\tWhenDissolvedTimestampSeconds\n\t}\n}"
    },
    {
      "Item1": "ExecuteNnsFunction",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ExecuteNnsFunction\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"nns_function\")]\n\t\tpublic System.Int32 NnsFunction { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"payload\")]\n\t\tpublic System.Collections.Generic.List<System.Byte> Payload { get; set; }\n\n\t\tpublic ExecuteNnsFunction(System.Int32 nnsFunction, System.Collections.Generic.List<System.Byte> payload)\n\t\t{\n\t\t\tthis.NnsFunction = nnsFunction;\n\t\t\tthis.Payload = payload;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Follow",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Follow\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"topic\")]\n\t\tpublic System.Int32 Topic { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"followees\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.NeuronId> Followees { get; set; }\n\n\t\tpublic Follow(System.Int32 topic, System.Collections.Generic.List<Test.Models.NeuronId> followees)\n\t\t{\n\t\t\tthis.Topic = topic;\n\t\t\tthis.Followees = followees;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Followees",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Followees\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"followees\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.NeuronId> Followees { get; set; }\n\n\t\tpublic Followees(System.Collections.Generic.List<Test.Models.NeuronId> followees)\n\t\t{\n\t\t\tthis.Followees = followees;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Governance",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Governance\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"default_followees\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.Governance.GovernanceR0V0> DefaultFollowees { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"wait_for_quiet_threshold_seconds\")]\n\t\tpublic System.UInt64 WaitForQuietThresholdSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"metrics\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceCachedMetrics> Metrics { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"node_providers\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.NodeProvider> NodeProviders { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"economics\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NetworkEconomics> Economics { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"latest_reward_event\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.RewardEvent> LatestRewardEvent { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"to_claim_transfers\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.NeuronStakeTransfer> ToClaimTransfers { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"short_voting_period_seconds\")]\n\t\tpublic System.UInt64 ShortVotingPeriodSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposals\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.Governance.GovernanceR8V0> Proposals { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"in_flight_commands\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.Governance.GovernanceR9V0> InFlightCommands { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neurons\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.Governance.GovernanceR10V0> Neurons { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"genesis_timestamp_seconds\")]\n\t\tpublic System.UInt64 GenesisTimestampSeconds { get; set; }\n\n\t\tpublic Governance(System.Collections.Generic.List<Test.Models.Governance.GovernanceR0V0> defaultFollowees, System.UInt64 waitForQuietThresholdSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceCachedMetrics> metrics, System.Collections.Generic.List<Test.Models.NodeProvider> nodeProviders, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NetworkEconomics> economics, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.RewardEvent> latestRewardEvent, System.Collections.Generic.List<Test.Models.NeuronStakeTransfer> toClaimTransfers, System.UInt64 shortVotingPeriodSeconds, System.Collections.Generic.List<Test.Models.Governance.GovernanceR8V0> proposals, System.Collections.Generic.List<Test.Models.Governance.GovernanceR9V0> inFlightCommands, System.Collections.Generic.List<Test.Models.Governance.GovernanceR10V0> neurons, System.UInt64 genesisTimestampSeconds)\n\t\t{\n\t\t\tthis.DefaultFollowees = defaultFollowees;\n\t\t\tthis.WaitForQuietThresholdSeconds = waitForQuietThresholdSeconds;\n\t\t\tthis.Metrics = metrics;\n\t\t\tthis.NodeProviders = nodeProviders;\n\t\t\tthis.Economics = economics;\n\t\t\tthis.LatestRewardEvent = latestRewardEvent;\n\t\t\tthis.ToClaimTransfers = toClaimTransfers;\n\t\t\tthis.ShortVotingPeriodSeconds = shortVotingPeriodSeconds;\n\t\t\tthis.Proposals = proposals;\n\t\t\tthis.InFlightCommands = inFlightCommands;\n\t\t\tthis.Neurons = neurons;\n\t\t\tthis.GenesisTimestampSeconds = genesisTimestampSeconds;\n\t\t}\n\n\t\tpublic class GovernanceR0V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.Int32 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.Followees F1 { get; set; }\n\n\t\t\tpublic GovernanceR0V0(System.Int32 f0, Test.Models.Followees f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\n\t\tpublic class GovernanceR8V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.ProposalData F1 { get; set; }\n\n\t\t\tpublic GovernanceR8V0(System.UInt64 f0, Test.Models.ProposalData f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\n\t\tpublic class GovernanceR9V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.NeuronInFlightCommand F1 { get; set; }\n\n\t\t\tpublic GovernanceR9V0(System.UInt64 f0, Test.Models.NeuronInFlightCommand f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\n\t\tpublic class GovernanceR10V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.Neuron F1 { get; set; }\n\n\t\t\tpublic GovernanceR10V0(System.UInt64 f0, Test.Models.Neuron f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "GovernanceCachedMetrics",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class GovernanceCachedMetrics\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"not_dissolving_neurons_e8s_buckets\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR0V0> NotDissolvingNeuronsE8sBuckets { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"garbage_collectable_neurons_count\")]\n\t\tpublic System.UInt64 GarbageCollectableNeuronsCount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neurons_with_invalid_stake_count\")]\n\t\tpublic System.UInt64 NeuronsWithInvalidStakeCount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"not_dissolving_neurons_count_buckets\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR3V0> NotDissolvingNeuronsCountBuckets { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"total_supply_icp\")]\n\t\tpublic System.UInt64 TotalSupplyIcp { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neurons_with_less_than_6_months_dissolve_delay_count\")]\n\t\tpublic System.UInt64 NeuronsWithLessThan6MonthsDissolveDelayCount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolved_neurons_count\")]\n\t\tpublic System.UInt64 DissolvedNeuronsCount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"total_staked_e8s\")]\n\t\tpublic System.UInt64 TotalStakedE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"not_dissolving_neurons_count\")]\n\t\tpublic System.UInt64 NotDissolvingNeuronsCount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolved_neurons_e8s\")]\n\t\tpublic System.UInt64 DissolvedNeuronsE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neurons_with_less_than_6_months_dissolve_delay_e8s\")]\n\t\tpublic System.UInt64 NeuronsWithLessThan6MonthsDissolveDelayE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolving_neurons_count_buckets\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR11V0> DissolvingNeuronsCountBuckets { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolving_neurons_count\")]\n\t\tpublic System.UInt64 DissolvingNeuronsCount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolving_neurons_e8s_buckets\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR13V0> DissolvingNeuronsE8sBuckets { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"community_fund_total_staked_e8s\")]\n\t\tpublic System.UInt64 CommunityFundTotalStakedE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"timestamp_seconds\")]\n\t\tpublic System.UInt64 TimestampSeconds { get; set; }\n\n\t\tpublic GovernanceCachedMetrics(System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR0V0> notDissolvingNeuronsE8sBuckets, System.UInt64 garbageCollectableNeuronsCount, System.UInt64 neuronsWithInvalidStakeCount, System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR3V0> notDissolvingNeuronsCountBuckets, System.UInt64 totalSupplyIcp, System.UInt64 neuronsWithLessThan6MonthsDissolveDelayCount, System.UInt64 dissolvedNeuronsCount, System.UInt64 totalStakedE8s, System.UInt64 notDissolvingNeuronsCount, System.UInt64 dissolvedNeuronsE8s, System.UInt64 neuronsWithLessThan6MonthsDissolveDelayE8s, System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR11V0> dissolvingNeuronsCountBuckets, System.UInt64 dissolvingNeuronsCount, System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR13V0> dissolvingNeuronsE8sBuckets, System.UInt64 communityFundTotalStakedE8s, System.UInt64 timestampSeconds)\n\t\t{\n\t\t\tthis.NotDissolvingNeuronsE8sBuckets = notDissolvingNeuronsE8sBuckets;\n\t\t\tthis.GarbageCollectableNeuronsCount = garbageCollectableNeuronsCount;\n\t\t\tthis.NeuronsWithInvalidStakeCount = neuronsWithInvalidStakeCount;\n\t\t\tthis.NotDissolvingNeuronsCountBuckets = notDissolvingNeuronsCountBuckets;\n\t\t\tthis.TotalSupplyIcp = totalSupplyIcp;\n\t\t\tthis.NeuronsWithLessThan6MonthsDissolveDelayCount = neuronsWithLessThan6MonthsDissolveDelayCount;\n\t\t\tthis.DissolvedNeuronsCount = dissolvedNeuronsCount;\n\t\t\tthis.TotalStakedE8s = totalStakedE8s;\n\t\t\tthis.NotDissolvingNeuronsCount = notDissolvingNeuronsCount;\n\t\t\tthis.DissolvedNeuronsE8s = dissolvedNeuronsE8s;\n\t\t\tthis.NeuronsWithLessThan6MonthsDissolveDelayE8s = neuronsWithLessThan6MonthsDissolveDelayE8s;\n\t\t\tthis.DissolvingNeuronsCountBuckets = dissolvingNeuronsCountBuckets;\n\t\t\tthis.DissolvingNeuronsCount = dissolvingNeuronsCount;\n\t\t\tthis.DissolvingNeuronsE8sBuckets = dissolvingNeuronsE8sBuckets;\n\t\t\tthis.CommunityFundTotalStakedE8s = communityFundTotalStakedE8s;\n\t\t\tthis.TimestampSeconds = timestampSeconds;\n\t\t}\n\n\t\tpublic class GovernanceCachedMetricsR0V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic System.Double F1 { get; set; }\n\n\t\t\tpublic GovernanceCachedMetricsR0V0(System.UInt64 f0, System.Double f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\n\t\tpublic class GovernanceCachedMetricsR3V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic System.UInt64 F1 { get; set; }\n\n\t\t\tpublic GovernanceCachedMetricsR3V0(System.UInt64 f0, System.UInt64 f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\n\t\tpublic class GovernanceCachedMetricsR11V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic System.UInt64 F1 { get; set; }\n\n\t\t\tpublic GovernanceCachedMetricsR11V0(System.UInt64 f0, System.UInt64 f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\n\t\tpublic class GovernanceCachedMetricsR13V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic System.Double F1 { get; set; }\n\n\t\t\tpublic GovernanceCachedMetricsR13V0(System.UInt64 f0, System.Double f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "GovernanceError",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class GovernanceError\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"error_message\")]\n\t\tpublic System.String ErrorMessage { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"error_type\")]\n\t\tpublic System.Int32 ErrorType { get; set; }\n\n\t\tpublic GovernanceError(System.String errorMessage, System.Int32 errorType)\n\t\t{\n\t\t\tthis.ErrorMessage = errorMessage;\n\t\t\tthis.ErrorType = errorType;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "IncreaseDissolveDelay",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class IncreaseDissolveDelay\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"additional_dissolve_delay_seconds\")]\n\t\tpublic System.UInt32 AdditionalDissolveDelaySeconds { get; set; }\n\n\t\tpublic IncreaseDissolveDelay(System.UInt32 additionalDissolveDelaySeconds)\n\t\t{\n\t\t\tthis.AdditionalDissolveDelaySeconds = additionalDissolveDelaySeconds;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "KnownNeuron",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class KnownNeuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"known_neuron_data\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> KnownNeuronData { get; set; }\n\n\t\tpublic KnownNeuron(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> knownNeuronData)\n\t\t{\n\t\t\tthis.Id = id;\n\t\t\tthis.KnownNeuronData = knownNeuronData;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "KnownNeuronData",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class KnownNeuronData\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"name\")]\n\t\tpublic System.String Name { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"description\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<System.String> Description { get; set; }\n\n\t\tpublic KnownNeuronData(System.String name, EdjCase.ICP.Candid.Models.OptionalValue<System.String> description)\n\t\t{\n\t\t\tthis.Name = name;\n\t\t\tthis.Description = description;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ListKnownNeuronsResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ListKnownNeuronsResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"known_neurons\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.KnownNeuron> KnownNeurons { get; set; }\n\n\t\tpublic ListKnownNeuronsResponse(System.Collections.Generic.List<Test.Models.KnownNeuron> knownNeurons)\n\t\t{\n\t\t\tthis.KnownNeurons = knownNeurons;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ListNeurons",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ListNeurons\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_ids\")]\n\t\tpublic System.Collections.Generic.List<System.UInt64> NeuronIds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"include_neurons_readable_by_caller\")]\n\t\tpublic System.Boolean IncludeNeuronsReadableByCaller { get; set; }\n\n\t\tpublic ListNeurons(System.Collections.Generic.List<System.UInt64> neuronIds, System.Boolean includeNeuronsReadableByCaller)\n\t\t{\n\t\t\tthis.NeuronIds = neuronIds;\n\t\t\tthis.IncludeNeuronsReadableByCaller = includeNeuronsReadableByCaller;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ListNeuronsResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ListNeuronsResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_infos\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.ListNeuronsResponse.ListNeuronsResponseR0V0> NeuronInfos { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"full_neurons\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.Neuron> FullNeurons { get; set; }\n\n\t\tpublic ListNeuronsResponse(System.Collections.Generic.List<Test.Models.ListNeuronsResponse.ListNeuronsResponseR0V0> neuronInfos, System.Collections.Generic.List<Test.Models.Neuron> fullNeurons)\n\t\t{\n\t\t\tthis.NeuronInfos = neuronInfos;\n\t\t\tthis.FullNeurons = fullNeurons;\n\t\t}\n\n\t\tpublic class ListNeuronsResponseR0V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.NeuronInfo F1 { get; set; }\n\n\t\t\tpublic ListNeuronsResponseR0V0(System.UInt64 f0, Test.Models.NeuronInfo f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ListNodeProvidersResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ListNodeProvidersResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"node_providers\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.NodeProvider> NodeProviders { get; set; }\n\n\t\tpublic ListNodeProvidersResponse(System.Collections.Generic.List<Test.Models.NodeProvider> nodeProviders)\n\t\t{\n\t\t\tthis.NodeProviders = nodeProviders;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ListProposalInfo",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ListProposalInfo\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"include_reward_status\")]\n\t\tpublic System.Collections.Generic.List<System.Int32> IncludeRewardStatus { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"before_proposal\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> BeforeProposal { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"limit\")]\n\t\tpublic System.UInt32 Limit { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"exclude_topic\")]\n\t\tpublic System.Collections.Generic.List<System.Int32> ExcludeTopic { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"include_status\")]\n\t\tpublic System.Collections.Generic.List<System.Int32> IncludeStatus { get; set; }\n\n\t\tpublic ListProposalInfo(System.Collections.Generic.List<System.Int32> includeRewardStatus, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> beforeProposal, System.UInt32 limit, System.Collections.Generic.List<System.Int32> excludeTopic, System.Collections.Generic.List<System.Int32> includeStatus)\n\t\t{\n\t\t\tthis.IncludeRewardStatus = includeRewardStatus;\n\t\t\tthis.BeforeProposal = beforeProposal;\n\t\t\tthis.Limit = limit;\n\t\t\tthis.ExcludeTopic = excludeTopic;\n\t\t\tthis.IncludeStatus = includeStatus;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ListProposalInfoResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ListProposalInfoResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_info\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.ProposalInfo> ProposalInfo { get; set; }\n\n\t\tpublic ListProposalInfoResponse(System.Collections.Generic.List<Test.Models.ProposalInfo> proposalInfo)\n\t\t{\n\t\t\tthis.ProposalInfo = proposalInfo;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "MakeProposalResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class MakeProposalResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> ProposalId { get; set; }\n\n\t\tpublic MakeProposalResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposalId)\n\t\t{\n\t\t\tthis.ProposalId = proposalId;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ManageNeuron",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ManageNeuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"command\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command> Command { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_id_or_subaccount\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronIdOrSubaccount> NeuronIdOrSubaccount { get; set; }\n\n\t\tpublic ManageNeuron(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command> command, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronIdOrSubaccount> neuronIdOrSubaccount)\n\t\t{\n\t\t\tthis.Id = id;\n\t\t\tthis.Command = command;\n\t\t\tthis.NeuronIdOrSubaccount = neuronIdOrSubaccount;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ManageNeuronResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ManageNeuronResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"command\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command1> Command { get; set; }\n\n\t\tpublic ManageNeuronResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command1> command)\n\t\t{\n\t\t\tthis.Command = command;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Merge",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Merge\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"source_neuron_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> SourceNeuronId { get; set; }\n\n\t\tpublic Merge(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> sourceNeuronId)\n\t\t{\n\t\t\tthis.SourceNeuronId = sourceNeuronId;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "MergeMaturity",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class MergeMaturity\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"percentage_to_merge\")]\n\t\tpublic System.UInt32 PercentageToMerge { get; set; }\n\n\t\tpublic MergeMaturity(System.UInt32 percentageToMerge)\n\t\t{\n\t\t\tthis.PercentageToMerge = percentageToMerge;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "MergeMaturityResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class MergeMaturityResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"merged_maturity_e8s\")]\n\t\tpublic System.UInt64 MergedMaturityE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"new_stake_e8s\")]\n\t\tpublic System.UInt64 NewStakeE8s { get; set; }\n\n\t\tpublic MergeMaturityResponse(System.UInt64 mergedMaturityE8s, System.UInt64 newStakeE8s)\n\t\t{\n\t\t\tthis.MergedMaturityE8s = mergedMaturityE8s;\n\t\t\tthis.NewStakeE8s = newStakeE8s;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Motion",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Motion\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"motion_text\")]\n\t\tpublic System.String MotionText { get; set; }\n\n\t\tpublic Motion(System.String motionText)\n\t\t{\n\t\t\tthis.MotionText = motionText;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "NetworkEconomics",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class NetworkEconomics\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_minimum_stake_e8s\")]\n\t\tpublic System.UInt64 NeuronMinimumStakeE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"max_proposals_to_keep_per_topic\")]\n\t\tpublic System.UInt32 MaxProposalsToKeepPerTopic { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_management_fee_per_proposal_e8s\")]\n\t\tpublic System.UInt64 NeuronManagementFeePerProposalE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reject_cost_e8s\")]\n\t\tpublic System.UInt64 RejectCostE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"transaction_fee_e8s\")]\n\t\tpublic System.UInt64 TransactionFeeE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_spawn_dissolve_delay_seconds\")]\n\t\tpublic System.UInt64 NeuronSpawnDissolveDelaySeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"minimum_icp_xdr_rate\")]\n\t\tpublic System.UInt64 MinimumIcpXdrRate { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"maximum_node_provider_rewards_e8s\")]\n\t\tpublic System.UInt64 MaximumNodeProviderRewardsE8s { get; set; }\n\n\t\tpublic NetworkEconomics(System.UInt64 neuronMinimumStakeE8s, System.UInt32 maxProposalsToKeepPerTopic, System.UInt64 neuronManagementFeePerProposalE8s, System.UInt64 rejectCostE8s, System.UInt64 transactionFeeE8s, System.UInt64 neuronSpawnDissolveDelaySeconds, System.UInt64 minimumIcpXdrRate, System.UInt64 maximumNodeProviderRewardsE8s)\n\t\t{\n\t\t\tthis.NeuronMinimumStakeE8s = neuronMinimumStakeE8s;\n\t\t\tthis.MaxProposalsToKeepPerTopic = maxProposalsToKeepPerTopic;\n\t\t\tthis.NeuronManagementFeePerProposalE8s = neuronManagementFeePerProposalE8s;\n\t\t\tthis.RejectCostE8s = rejectCostE8s;\n\t\t\tthis.TransactionFeeE8s = transactionFeeE8s;\n\t\t\tthis.NeuronSpawnDissolveDelaySeconds = neuronSpawnDissolveDelaySeconds;\n\t\t\tthis.MinimumIcpXdrRate = minimumIcpXdrRate;\n\t\t\tthis.MaximumNodeProviderRewardsE8s = maximumNodeProviderRewardsE8s;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Neuron",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Neuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"controller\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Controller { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"recent_ballots\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.BallotInfo> RecentBallots { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"kyc_verified\")]\n\t\tpublic System.Boolean KycVerified { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"not_for_profit\")]\n\t\tpublic System.Boolean NotForProfit { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"maturity_e8s_equivalent\")]\n\t\tpublic System.UInt64 MaturityE8sEquivalent { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"cached_neuron_stake_e8s\")]\n\t\tpublic System.UInt64 CachedNeuronStakeE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"created_timestamp_seconds\")]\n\t\tpublic System.UInt64 CreatedTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"aging_since_timestamp_seconds\")]\n\t\tpublic System.UInt64 AgingSinceTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"hot_keys\")]\n\t\tpublic System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> HotKeys { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"account\")]\n\t\tpublic System.Collections.Generic.List<System.Byte> Account { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"joined_community_fund_timestamp_seconds\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> JoinedCommunityFundTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_state\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.DissolveState> DissolveState { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"followees\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.Neuron.NeuronR13V0> Followees { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_fees_e8s\")]\n\t\tpublic System.UInt64 NeuronFeesE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"transfer\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronStakeTransfer> Transfer { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"known_neuron_data\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> KnownNeuronData { get; set; }\n\n\t\tpublic Neuron(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> controller, System.Collections.Generic.List<Test.Models.BallotInfo> recentBallots, System.Boolean kycVerified, System.Boolean notForProfit, System.UInt64 maturityE8sEquivalent, System.UInt64 cachedNeuronStakeE8s, System.UInt64 createdTimestampSeconds, System.UInt64 agingSinceTimestampSeconds, System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> hotKeys, System.Collections.Generic.List<System.Byte> account, EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> joinedCommunityFundTimestampSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.DissolveState> dissolveState, System.Collections.Generic.List<Test.Models.Neuron.NeuronR13V0> followees, System.UInt64 neuronFeesE8s, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronStakeTransfer> transfer, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> knownNeuronData)\n\t\t{\n\t\t\tthis.Id = id;\n\t\t\tthis.Controller = controller;\n\t\t\tthis.RecentBallots = recentBallots;\n\t\t\tthis.KycVerified = kycVerified;\n\t\t\tthis.NotForProfit = notForProfit;\n\t\t\tthis.MaturityE8sEquivalent = maturityE8sEquivalent;\n\t\t\tthis.CachedNeuronStakeE8s = cachedNeuronStakeE8s;\n\t\t\tthis.CreatedTimestampSeconds = createdTimestampSeconds;\n\t\t\tthis.AgingSinceTimestampSeconds = agingSinceTimestampSeconds;\n\t\t\tthis.HotKeys = hotKeys;\n\t\t\tthis.Account = account;\n\t\t\tthis.JoinedCommunityFundTimestampSeconds = joinedCommunityFundTimestampSeconds;\n\t\t\tthis.DissolveState = dissolveState;\n\t\t\tthis.Followees = followees;\n\t\t\tthis.NeuronFeesE8s = neuronFeesE8s;\n\t\t\tthis.Transfer = transfer;\n\t\t\tthis.KnownNeuronData = knownNeuronData;\n\t\t}\n\n\t\tpublic class NeuronR13V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.Int32 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.Followees F1 { get; set; }\n\n\t\t\tpublic NeuronR13V0(System.Int32 f0, Test.Models.Followees f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "NeuronId",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class NeuronId\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic System.UInt64 Id { get; set; }\n\n\t\tpublic NeuronId(System.UInt64 id)\n\t\t{\n\t\t\tthis.Id = id;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "NeuronIdOrSubaccount",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.NeuronIdOrSubaccountTag))]\n\tpublic class NeuronIdOrSubaccount\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.NeuronIdOrSubaccountTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic NeuronIdOrSubaccount(Test.Models.NeuronIdOrSubaccountTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected NeuronIdOrSubaccount()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.NeuronIdOrSubaccount Subaccount(System.Collections.Generic.List<System.Byte> info)\n\t\t{\n\t\t\treturn new Test.Models.NeuronIdOrSubaccount(Test.Models.NeuronIdOrSubaccountTag.Subaccount, info);\n\t\t}\n\n\t\tpublic static Test.Models.NeuronIdOrSubaccount NeuronId(Test.Models.NeuronId info)\n\t\t{\n\t\t\treturn new Test.Models.NeuronIdOrSubaccount(Test.Models.NeuronIdOrSubaccountTag.NeuronId, info);\n\t\t}\n\n\t\tpublic System.Collections.Generic.List<System.Byte> AsSubaccount()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.NeuronIdOrSubaccountTag.Subaccount);\n\t\t\treturn (System.Collections.Generic.List<System.Byte>)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.NeuronId AsNeuronId()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.NeuronIdOrSubaccountTag.NeuronId);\n\t\t\treturn (Test.Models.NeuronId)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.NeuronIdOrSubaccountTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum NeuronIdOrSubaccountTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Subaccount\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.Collections.Generic.List<System.Byte>))]\n\t\tSubaccount,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"NeuronId\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NeuronId))]\n\t\tNeuronId\n\t}\n}"
    },
    {
      "Item1": "NeuronInFlightCommand",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class NeuronInFlightCommand\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"command\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command2> Command { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"timestamp\")]\n\t\tpublic System.UInt64 Timestamp { get; set; }\n\n\t\tpublic NeuronInFlightCommand(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command2> command, System.UInt64 timestamp)\n\t\t{\n\t\t\tthis.Command = command;\n\t\t\tthis.Timestamp = timestamp;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "NeuronInfo",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class NeuronInfo\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_delay_seconds\")]\n\t\tpublic System.UInt64 DissolveDelaySeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"recent_ballots\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.BallotInfo> RecentBallots { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"created_timestamp_seconds\")]\n\t\tpublic System.UInt64 CreatedTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"state\")]\n\t\tpublic System.Int32 State { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"stake_e8s\")]\n\t\tpublic System.UInt64 StakeE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"joined_community_fund_timestamp_seconds\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> JoinedCommunityFundTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"retrieved_at_timestamp_seconds\")]\n\t\tpublic System.UInt64 RetrievedAtTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"known_neuron_data\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> KnownNeuronData { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"voting_power\")]\n\t\tpublic System.UInt64 VotingPower { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"age_seconds\")]\n\t\tpublic System.UInt64 AgeSeconds { get; set; }\n\n\t\tpublic NeuronInfo(System.UInt64 dissolveDelaySeconds, System.Collections.Generic.List<Test.Models.BallotInfo> recentBallots, System.UInt64 createdTimestampSeconds, System.Int32 state, System.UInt64 stakeE8s, EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> joinedCommunityFundTimestampSeconds, System.UInt64 retrievedAtTimestampSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> knownNeuronData, System.UInt64 votingPower, System.UInt64 ageSeconds)\n\t\t{\n\t\t\tthis.DissolveDelaySeconds = dissolveDelaySeconds;\n\t\t\tthis.RecentBallots = recentBallots;\n\t\t\tthis.CreatedTimestampSeconds = createdTimestampSeconds;\n\t\t\tthis.State = state;\n\t\t\tthis.StakeE8s = stakeE8s;\n\t\t\tthis.JoinedCommunityFundTimestampSeconds = joinedCommunityFundTimestampSeconds;\n\t\t\tthis.RetrievedAtTimestampSeconds = retrievedAtTimestampSeconds;\n\t\t\tthis.KnownNeuronData = knownNeuronData;\n\t\t\tthis.VotingPower = votingPower;\n\t\t\tthis.AgeSeconds = ageSeconds;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "NeuronStakeTransfer",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class NeuronStakeTransfer\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"to_subaccount\")]\n\t\tpublic System.Collections.Generic.List<System.Byte> ToSubaccount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"neuron_stake_e8s\")]\n\t\tpublic System.UInt64 NeuronStakeE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"from\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> From { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"memo\")]\n\t\tpublic System.UInt64 Memo { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"from_subaccount\")]\n\t\tpublic System.Collections.Generic.List<System.Byte> FromSubaccount { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"transfer_timestamp\")]\n\t\tpublic System.UInt64 TransferTimestamp { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"block_height\")]\n\t\tpublic System.UInt64 BlockHeight { get; set; }\n\n\t\tpublic NeuronStakeTransfer(System.Collections.Generic.List<System.Byte> toSubaccount, System.UInt64 neuronStakeE8s, EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> from, System.UInt64 memo, System.Collections.Generic.List<System.Byte> fromSubaccount, System.UInt64 transferTimestamp, System.UInt64 blockHeight)\n\t\t{\n\t\t\tthis.ToSubaccount = toSubaccount;\n\t\t\tthis.NeuronStakeE8s = neuronStakeE8s;\n\t\t\tthis.From = from;\n\t\t\tthis.Memo = memo;\n\t\t\tthis.FromSubaccount = fromSubaccount;\n\t\t\tthis.TransferTimestamp = transferTimestamp;\n\t\t\tthis.BlockHeight = blockHeight;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "NodeProvider",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class NodeProvider\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Id { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_account\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> RewardAccount { get; set; }\n\n\t\tpublic NodeProvider(EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> id, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> rewardAccount)\n\t\t{\n\t\t\tthis.Id = id;\n\t\t\tthis.RewardAccount = rewardAccount;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Operation",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.OperationTag))]\n\tpublic class Operation\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.OperationTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Operation(Test.Models.OperationTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Operation()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Operation RemoveHotKey(Test.Models.RemoveHotKey info)\n\t\t{\n\t\t\treturn new Test.Models.Operation(Test.Models.OperationTag.RemoveHotKey, info);\n\t\t}\n\n\t\tpublic static Test.Models.Operation AddHotKey(Test.Models.AddHotKey info)\n\t\t{\n\t\t\treturn new Test.Models.Operation(Test.Models.OperationTag.AddHotKey, info);\n\t\t}\n\n\t\tpublic static Test.Models.Operation StopDissolving(Test.Models.Operation.OperationO2 info)\n\t\t{\n\t\t\treturn new Test.Models.Operation(Test.Models.OperationTag.StopDissolving, info);\n\t\t}\n\n\t\tpublic static Test.Models.Operation StartDissolving(Test.Models.Operation.OperationO3 info)\n\t\t{\n\t\t\treturn new Test.Models.Operation(Test.Models.OperationTag.StartDissolving, info);\n\t\t}\n\n\t\tpublic static Test.Models.Operation IncreaseDissolveDelay(Test.Models.IncreaseDissolveDelay info)\n\t\t{\n\t\t\treturn new Test.Models.Operation(Test.Models.OperationTag.IncreaseDissolveDelay, info);\n\t\t}\n\n\t\tpublic static Test.Models.Operation JoinCommunityFund(Test.Models.Operation.OperationO5 info)\n\t\t{\n\t\t\treturn new Test.Models.Operation(Test.Models.OperationTag.JoinCommunityFund, info);\n\t\t}\n\n\t\tpublic static Test.Models.Operation SetDissolveTimestamp(Test.Models.SetDissolveTimestamp info)\n\t\t{\n\t\t\treturn new Test.Models.Operation(Test.Models.OperationTag.SetDissolveTimestamp, info);\n\t\t}\n\n\t\tpublic Test.Models.RemoveHotKey AsRemoveHotKey()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.OperationTag.RemoveHotKey);\n\t\t\treturn (Test.Models.RemoveHotKey)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.AddHotKey AsAddHotKey()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.OperationTag.AddHotKey);\n\t\t\treturn (Test.Models.AddHotKey)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Operation.OperationO2 AsStopDissolving()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.OperationTag.StopDissolving);\n\t\t\treturn (Test.Models.Operation.OperationO2)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Operation.OperationO3 AsStartDissolving()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.OperationTag.StartDissolving);\n\t\t\treturn (Test.Models.Operation.OperationO3)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.IncreaseDissolveDelay AsIncreaseDissolveDelay()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.OperationTag.IncreaseDissolveDelay);\n\t\t\treturn (Test.Models.IncreaseDissolveDelay)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.Operation.OperationO5 AsJoinCommunityFund()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.OperationTag.JoinCommunityFund);\n\t\t\treturn (Test.Models.Operation.OperationO5)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.SetDissolveTimestamp AsSetDissolveTimestamp()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.OperationTag.SetDissolveTimestamp);\n\t\t\treturn (Test.Models.SetDissolveTimestamp)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.OperationTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\n\t\tpublic class OperationO2\n\t\t{\n\t\t\tpublic OperationO2()\n\t\t\t{\n\t\t\t}\n\t\t}\n\n\t\tpublic class OperationO3\n\t\t{\n\t\t\tpublic OperationO3()\n\t\t\t{\n\t\t\t}\n\t\t}\n\n\t\tpublic class OperationO5\n\t\t{\n\t\t\tpublic OperationO5()\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum OperationTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RemoveHotKey\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RemoveHotKey))]\n\t\tRemoveHotKey,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"AddHotKey\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.AddHotKey))]\n\t\tAddHotKey,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"StopDissolving\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Operation.OperationO2))]\n\t\tStopDissolving,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"StartDissolving\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Operation.OperationO3))]\n\t\tStartDissolving,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"IncreaseDissolveDelay\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.IncreaseDissolveDelay))]\n\t\tIncreaseDissolveDelay,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"JoinCommunityFund\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Operation.OperationO5))]\n\t\tJoinCommunityFund,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"SetDissolveTimestamp\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SetDissolveTimestamp))]\n\t\tSetDissolveTimestamp\n\t}\n}"
    },
    {
      "Item1": "Proposal",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Proposal\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"url\")]\n\t\tpublic System.String Url { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"title\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<System.String> Title { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"action\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Action> Action { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"summary\")]\n\t\tpublic System.String Summary { get; set; }\n\n\t\tpublic Proposal(System.String url, EdjCase.ICP.Candid.Models.OptionalValue<System.String> title, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Action> action, System.String summary)\n\t\t{\n\t\t\tthis.Url = url;\n\t\t\tthis.Title = title;\n\t\t\tthis.Action = action;\n\t\t\tthis.Summary = summary;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ProposalData",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ProposalData\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"failure_reason\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceError> FailureReason { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ballots\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.ProposalData.ProposalDataR2V0> Ballots { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_timestamp_seconds\")]\n\t\tpublic System.UInt64 ProposalTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_event_round\")]\n\t\tpublic System.UInt64 RewardEventRound { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"failed_timestamp_seconds\")]\n\t\tpublic System.UInt64 FailedTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reject_cost_e8s\")]\n\t\tpublic System.UInt64 RejectCostE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"latest_tally\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Tally> LatestTally { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"decided_timestamp_seconds\")]\n\t\tpublic System.UInt64 DecidedTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Proposal> Proposal { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposer\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Proposer { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"wait_for_quiet_state\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.WaitForQuietState> WaitForQuietState { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"executed_timestamp_seconds\")]\n\t\tpublic System.UInt64 ExecutedTimestampSeconds { get; set; }\n\n\t\tpublic ProposalData(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceError> failureReason, System.Collections.Generic.List<Test.Models.ProposalData.ProposalDataR2V0> ballots, System.UInt64 proposalTimestampSeconds, System.UInt64 rewardEventRound, System.UInt64 failedTimestampSeconds, System.UInt64 rejectCostE8s, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Tally> latestTally, System.UInt64 decidedTimestampSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Proposal> proposal, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposer, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.WaitForQuietState> waitForQuietState, System.UInt64 executedTimestampSeconds)\n\t\t{\n\t\t\tthis.Id = id;\n\t\t\tthis.FailureReason = failureReason;\n\t\t\tthis.Ballots = ballots;\n\t\t\tthis.ProposalTimestampSeconds = proposalTimestampSeconds;\n\t\t\tthis.RewardEventRound = rewardEventRound;\n\t\t\tthis.FailedTimestampSeconds = failedTimestampSeconds;\n\t\t\tthis.RejectCostE8s = rejectCostE8s;\n\t\t\tthis.LatestTally = latestTally;\n\t\t\tthis.DecidedTimestampSeconds = decidedTimestampSeconds;\n\t\t\tthis.Proposal = proposal;\n\t\t\tthis.Proposer = proposer;\n\t\t\tthis.WaitForQuietState = waitForQuietState;\n\t\t\tthis.ExecutedTimestampSeconds = executedTimestampSeconds;\n\t\t}\n\n\t\tpublic class ProposalDataR2V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.Ballot F1 { get; set; }\n\n\t\t\tpublic ProposalDataR2V0(System.UInt64 f0, Test.Models.Ballot f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "ProposalInfo",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class ProposalInfo\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"status\")]\n\t\tpublic System.Int32 Status { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"topic\")]\n\t\tpublic System.Int32 Topic { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"failure_reason\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceError> FailureReason { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"ballots\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.ProposalInfo.ProposalInfoR4V0> Ballots { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal_timestamp_seconds\")]\n\t\tpublic System.UInt64 ProposalTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_event_round\")]\n\t\tpublic System.UInt64 RewardEventRound { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"deadline_timestamp_seconds\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> DeadlineTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"failed_timestamp_seconds\")]\n\t\tpublic System.UInt64 FailedTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reject_cost_e8s\")]\n\t\tpublic System.UInt64 RejectCostE8s { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"latest_tally\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Tally> LatestTally { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_status\")]\n\t\tpublic System.Int32 RewardStatus { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"decided_timestamp_seconds\")]\n\t\tpublic System.UInt64 DecidedTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Proposal> Proposal { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposer\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Proposer { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"executed_timestamp_seconds\")]\n\t\tpublic System.UInt64 ExecutedTimestampSeconds { get; set; }\n\n\t\tpublic ProposalInfo(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, System.Int32 status, System.Int32 topic, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceError> failureReason, System.Collections.Generic.List<Test.Models.ProposalInfo.ProposalInfoR4V0> ballots, System.UInt64 proposalTimestampSeconds, System.UInt64 rewardEventRound, EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> deadlineTimestampSeconds, System.UInt64 failedTimestampSeconds, System.UInt64 rejectCostE8s, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Tally> latestTally, System.Int32 rewardStatus, System.UInt64 decidedTimestampSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Proposal> proposal, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposer, System.UInt64 executedTimestampSeconds)\n\t\t{\n\t\t\tthis.Id = id;\n\t\t\tthis.Status = status;\n\t\t\tthis.Topic = topic;\n\t\t\tthis.FailureReason = failureReason;\n\t\t\tthis.Ballots = ballots;\n\t\t\tthis.ProposalTimestampSeconds = proposalTimestampSeconds;\n\t\t\tthis.RewardEventRound = rewardEventRound;\n\t\t\tthis.DeadlineTimestampSeconds = deadlineTimestampSeconds;\n\t\t\tthis.FailedTimestampSeconds = failedTimestampSeconds;\n\t\t\tthis.RejectCostE8s = rejectCostE8s;\n\t\t\tthis.LatestTally = latestTally;\n\t\t\tthis.RewardStatus = rewardStatus;\n\t\t\tthis.DecidedTimestampSeconds = decidedTimestampSeconds;\n\t\t\tthis.Proposal = proposal;\n\t\t\tthis.Proposer = proposer;\n\t\t\tthis.ExecutedTimestampSeconds = executedTimestampSeconds;\n\t\t}\n\n\t\tpublic class ProposalInfoR4V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.UInt64 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.Ballot F1 { get; set; }\n\n\t\t\tpublic ProposalInfoR4V0(System.UInt64 f0, Test.Models.Ballot f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "RegisterVote",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class RegisterVote\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"vote\")]\n\t\tpublic System.Int32 Vote { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"proposal\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Proposal { get; set; }\n\n\t\tpublic RegisterVote(System.Int32 vote, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposal)\n\t\t{\n\t\t\tthis.Vote = vote;\n\t\t\tthis.Proposal = proposal;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "RemoveHotKey",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class RemoveHotKey\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"hot_key_to_remove\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> HotKeyToRemove { get; set; }\n\n\t\tpublic RemoveHotKey(EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> hotKeyToRemove)\n\t\t{\n\t\t\tthis.HotKeyToRemove = hotKeyToRemove;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Result",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.ResultTag))]\n\tpublic class Result\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.ResultTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Result(Test.Models.ResultTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Result()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Result Ok()\n\t\t{\n\t\t\treturn new Test.Models.Result(Test.Models.ResultTag.Ok, null);\n\t\t}\n\n\t\tpublic static Test.Models.Result Err(Test.Models.GovernanceError info)\n\t\t{\n\t\t\treturn new Test.Models.Result(Test.Models.ResultTag.Err, info);\n\t\t}\n\n\t\tpublic Test.Models.GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.ResultTag.Err);\n\t\t\treturn (Test.Models.GovernanceError)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.ResultTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum ResultTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]\n\t\tErr\n\t}\n}"
    },
    {
      "Item1": "Result1",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result1Tag))]\n\tpublic class Result1\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.Result1Tag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Result1(Test.Models.Result1Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Result1()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Result1 Error(Test.Models.GovernanceError info)\n\t\t{\n\t\t\treturn new Test.Models.Result1(Test.Models.Result1Tag.Error, info);\n\t\t}\n\n\t\tpublic static Test.Models.Result1 NeuronId(Test.Models.NeuronId info)\n\t\t{\n\t\t\treturn new Test.Models.Result1(Test.Models.Result1Tag.NeuronId, info);\n\t\t}\n\n\t\tpublic Test.Models.GovernanceError AsError()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result1Tag.Error);\n\t\t\treturn (Test.Models.GovernanceError)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.NeuronId AsNeuronId()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result1Tag.NeuronId);\n\t\t\treturn (Test.Models.NeuronId)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.Result1Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum Result1Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Error\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]\n\t\tError,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"NeuronId\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NeuronId))]\n\t\tNeuronId\n\t}\n}"
    },
    {
      "Item1": "Result2",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result2Tag))]\n\tpublic class Result2\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.Result2Tag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Result2(Test.Models.Result2Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Result2()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Result2 Ok(Test.Models.Neuron info)\n\t\t{\n\t\t\treturn new Test.Models.Result2(Test.Models.Result2Tag.Ok, info);\n\t\t}\n\n\t\tpublic static Test.Models.Result2 Err(Test.Models.GovernanceError info)\n\t\t{\n\t\t\treturn new Test.Models.Result2(Test.Models.Result2Tag.Err, info);\n\t\t}\n\n\t\tpublic Test.Models.Neuron AsOk()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result2Tag.Ok);\n\t\t\treturn (Test.Models.Neuron)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result2Tag.Err);\n\t\t\treturn (Test.Models.GovernanceError)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.Result2Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum Result2Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Neuron))]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]\n\t\tErr\n\t}\n}"
    },
    {
      "Item1": "Result3",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result3Tag))]\n\tpublic class Result3\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.Result3Tag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Result3(Test.Models.Result3Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Result3()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Result3 Ok(Test.Models.RewardNodeProviders info)\n\t\t{\n\t\t\treturn new Test.Models.Result3(Test.Models.Result3Tag.Ok, info);\n\t\t}\n\n\t\tpublic static Test.Models.Result3 Err(Test.Models.GovernanceError info)\n\t\t{\n\t\t\treturn new Test.Models.Result3(Test.Models.Result3Tag.Err, info);\n\t\t}\n\n\t\tpublic Test.Models.RewardNodeProviders AsOk()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result3Tag.Ok);\n\t\t\treturn (Test.Models.RewardNodeProviders)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result3Tag.Err);\n\t\t\treturn (Test.Models.GovernanceError)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.Result3Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum Result3Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardNodeProviders))]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]\n\t\tErr\n\t}\n}"
    },
    {
      "Item1": "Result4",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result4Tag))]\n\tpublic class Result4\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.Result4Tag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Result4(Test.Models.Result4Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Result4()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Result4 Ok(Test.Models.NeuronInfo info)\n\t\t{\n\t\t\treturn new Test.Models.Result4(Test.Models.Result4Tag.Ok, info);\n\t\t}\n\n\t\tpublic static Test.Models.Result4 Err(Test.Models.GovernanceError info)\n\t\t{\n\t\t\treturn new Test.Models.Result4(Test.Models.Result4Tag.Err, info);\n\t\t}\n\n\t\tpublic Test.Models.NeuronInfo AsOk()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result4Tag.Ok);\n\t\t\treturn (Test.Models.NeuronInfo)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result4Tag.Err);\n\t\t\treturn (Test.Models.GovernanceError)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.Result4Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum Result4Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NeuronInfo))]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]\n\t\tErr\n\t}\n}"
    },
    {
      "Item1": "Result5",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result5Tag))]\n\tpublic class Result5\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.Result5Tag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic Result5(Test.Models.Result5Tag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected Result5()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.Result5 Ok(Test.Models.NodeProvider info)\n\t\t{\n\t\t\treturn new Test.Models.Result5(Test.Models.Result5Tag.Ok, info);\n\t\t}\n\n\t\tpublic static Test.Models.Result5 Err(Test.Models.GovernanceError info)\n\t\t{\n\t\t\treturn new Test.Models.Result5(Test.Models.Result5Tag.Err, info);\n\t\t}\n\n\t\tpublic Test.Models.NodeProvider AsOk()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result5Tag.Ok);\n\t\t\treturn (Test.Models.NodeProvider)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.Result5Tag.Err);\n\t\t\treturn (Test.Models.GovernanceError)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.Result5Tag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum Result5Tag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Ok\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NodeProvider))]\n\t\tOk,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"Err\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]\n\t\tErr\n\t}\n}"
    },
    {
      "Item1": "RewardEvent",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class RewardEvent\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"day_after_genesis\")]\n\t\tpublic System.UInt64 DayAfterGenesis { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"actual_timestamp_seconds\")]\n\t\tpublic System.UInt64 ActualTimestampSeconds { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"distributed_e8s_equivalent\")]\n\t\tpublic System.UInt64 DistributedE8sEquivalent { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"settled_proposals\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.NeuronId> SettledProposals { get; set; }\n\n\t\tpublic RewardEvent(System.UInt64 dayAfterGenesis, System.UInt64 actualTimestampSeconds, System.UInt64 distributedE8sEquivalent, System.Collections.Generic.List<Test.Models.NeuronId> settledProposals)\n\t\t{\n\t\t\tthis.DayAfterGenesis = dayAfterGenesis;\n\t\t\tthis.ActualTimestampSeconds = actualTimestampSeconds;\n\t\t\tthis.DistributedE8sEquivalent = distributedE8sEquivalent;\n\t\t\tthis.SettledProposals = settledProposals;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "RewardMode",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\t[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.RewardModeTag))]\n\tpublic class RewardMode\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]\n\t\tpublic Test.Models.RewardModeTag Tag { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]\n\t\tprivate System.Object? Value { get; set; }\n\n\t\tpublic RewardMode(Test.Models.RewardModeTag tag, System.Object? value)\n\t\t{\n\t\t\tthis.Tag = tag;\n\t\t\tthis.Value = value;\n\t\t}\n\n\t\tprotected RewardMode()\n\t\t{\n\t\t}\n\n\t\tpublic static Test.Models.RewardMode RewardToNeuron(Test.Models.RewardToNeuron info)\n\t\t{\n\t\t\treturn new Test.Models.RewardMode(Test.Models.RewardModeTag.RewardToNeuron, info);\n\t\t}\n\n\t\tpublic static Test.Models.RewardMode RewardToAccount(Test.Models.RewardToAccount info)\n\t\t{\n\t\t\treturn new Test.Models.RewardMode(Test.Models.RewardModeTag.RewardToAccount, info);\n\t\t}\n\n\t\tpublic Test.Models.RewardToNeuron AsRewardToNeuron()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.RewardModeTag.RewardToNeuron);\n\t\t\treturn (Test.Models.RewardToNeuron)this.Value!;\n\t\t}\n\n\t\tpublic Test.Models.RewardToAccount AsRewardToAccount()\n\t\t{\n\t\t\tthis.ValidateTag(Test.Models.RewardModeTag.RewardToAccount);\n\t\t\treturn (Test.Models.RewardToAccount)this.Value!;\n\t\t}\n\n\t\tprivate void ValidateTag(Test.Models.RewardModeTag tag)\n\t\t{\n\t\t\tif (!this.Tag.Equals(tag))\n\t\t\t{\n\t\t\t\tthrow new System.InvalidOperationException($\"Cannot cast '{this.Tag}' to type '{tag}'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic enum RewardModeTag\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RewardToNeuron\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardToNeuron))]\n\t\tRewardToNeuron,\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"RewardToAccount\")]\n\t\t[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardToAccount))]\n\t\tRewardToAccount\n\t}\n}"
    },
    {
      "Item1": "RewardNodeProvider",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class RewardNodeProvider\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"node_provider\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NodeProvider> NodeProvider { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_mode\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.RewardMode> RewardMode { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"amount_e8s\")]\n\t\tpublic System.UInt64 AmountE8s { get; set; }\n\n\t\tpublic RewardNodeProvider(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NodeProvider> nodeProvider, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.RewardMode> rewardMode, System.UInt64 amountE8s)\n\t\t{\n\t\t\tthis.NodeProvider = nodeProvider;\n\t\t\tthis.RewardMode = rewardMode;\n\t\t\tthis.AmountE8s = amountE8s;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "RewardNodeProviders",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class RewardNodeProviders\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"use_registry_derived_rewards\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<System.Boolean> UseRegistryDerivedRewards { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"rewards\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.RewardNodeProvider> Rewards { get; set; }\n\n\t\tpublic RewardNodeProviders(EdjCase.ICP.Candid.Models.OptionalValue<System.Boolean> useRegistryDerivedRewards, System.Collections.Generic.List<Test.Models.RewardNodeProvider> rewards)\n\t\t{\n\t\t\tthis.UseRegistryDerivedRewards = useRegistryDerivedRewards;\n\t\t\tthis.Rewards = rewards;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "RewardToAccount",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class RewardToAccount\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"to_account\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> ToAccount { get; set; }\n\n\t\tpublic RewardToAccount(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> toAccount)\n\t\t{\n\t\t\tthis.ToAccount = toAccount;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "RewardToNeuron",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class RewardToNeuron\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_delay_seconds\")]\n\t\tpublic System.UInt64 DissolveDelaySeconds { get; set; }\n\n\t\tpublic RewardToNeuron(System.UInt64 dissolveDelaySeconds)\n\t\t{\n\t\t\tthis.DissolveDelaySeconds = dissolveDelaySeconds;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "SetDefaultFollowees",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class SetDefaultFollowees\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"default_followees\")]\n\t\tpublic System.Collections.Generic.List<Test.Models.SetDefaultFollowees.SetDefaultFolloweesR0V0> DefaultFollowees { get; set; }\n\n\t\tpublic SetDefaultFollowees(System.Collections.Generic.List<Test.Models.SetDefaultFollowees.SetDefaultFolloweesR0V0> defaultFollowees)\n\t\t{\n\t\t\tthis.DefaultFollowees = defaultFollowees;\n\t\t}\n\n\t\tpublic class SetDefaultFolloweesR0V0\n\t\t{\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"0\")]\n\t\t\tpublic System.Int32 F0 { get; set; }\n\n\t\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"1\")]\n\t\t\tpublic Test.Models.Followees F1 { get; set; }\n\n\t\t\tpublic SetDefaultFolloweesR0V0(System.Int32 f0, Test.Models.Followees f1)\n\t\t\t{\n\t\t\t\tthis.F0 = f0;\n\t\t\t\tthis.F1 = f1;\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "SetDissolveTimestamp",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class SetDissolveTimestamp\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"dissolve_timestamp_seconds\")]\n\t\tpublic System.UInt64 DissolveTimestampSeconds { get; set; }\n\n\t\tpublic SetDissolveTimestamp(System.UInt64 dissolveTimestampSeconds)\n\t\t{\n\t\t\tthis.DissolveTimestampSeconds = dissolveTimestampSeconds;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Spawn",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Spawn\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"percentage_to_spawn\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<System.UInt32> PercentageToSpawn { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"new_controller\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewController { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"nonce\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> Nonce { get; set; }\n\n\t\tpublic Spawn(EdjCase.ICP.Candid.Models.OptionalValue<System.UInt32> percentageToSpawn, EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> newController, EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> nonce)\n\t\t{\n\t\t\tthis.PercentageToSpawn = percentageToSpawn;\n\t\t\tthis.NewController = newController;\n\t\t\tthis.Nonce = nonce;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "SpawnResponse",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class SpawnResponse\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"created_neuron_id\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> CreatedNeuronId { get; set; }\n\n\t\tpublic SpawnResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> createdNeuronId)\n\t\t{\n\t\t\tthis.CreatedNeuronId = createdNeuronId;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Split",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Split\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"amount_e8s\")]\n\t\tpublic System.UInt64 AmountE8s { get; set; }\n\n\t\tpublic Split(System.UInt64 amountE8s)\n\t\t{\n\t\t\tthis.AmountE8s = amountE8s;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "Tally",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class Tally\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"no\")]\n\t\tpublic System.UInt64 No { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"yes\")]\n\t\tpublic System.UInt64 Yes { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"total\")]\n\t\tpublic System.UInt64 Total { get; set; }\n\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"timestamp_seconds\")]\n\t\tpublic System.UInt64 TimestampSeconds { get; set; }\n\n\t\tpublic Tally(System.UInt64 no, System.UInt64 yes, System.UInt64 total, System.UInt64 timestampSeconds)\n\t\t{\n\t\t\tthis.No = no;\n\t\t\tthis.Yes = yes;\n\t\t\tthis.Total = total;\n\t\t\tthis.TimestampSeconds = timestampSeconds;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "UpdateNodeProvider",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class UpdateNodeProvider\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"reward_account\")]\n\t\tpublic EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> RewardAccount { get; set; }\n\n\t\tpublic UpdateNodeProvider(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> rewardAccount)\n\t\t{\n\t\t\tthis.RewardAccount = rewardAccount;\n\t\t}\n\t}\n}"
    },
    {
      "Item1": "WaitForQuietState",
      "Item2": "using EdjCase.ICP.Agent.Agents;\n\nnamespace Test.Models\n{\n\tpublic class WaitForQuietState\n\t{\n\t\t[EdjCase.ICP.Candid.Mapping.CandidNameAttribute(\"current_deadline_timestamp_seconds\")]\n\t\tpublic System.UInt64 CurrentDeadlineTimestampSeconds { get; set; }\n\n\t\tpublic WaitForQuietState(System.UInt64 currentDeadlineTimestampSeconds)\n\t\t{\n\t\t\tthis.CurrentDeadlineTimestampSeconds = currentDeadlineTimestampSeconds;\n\t\t}\n\t}\n}"
    }
  ],
  "AliasFile": null
}
