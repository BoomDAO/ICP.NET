using EdjCase.ICP.Agent.Agents;

namespace Test
{
	public class GovernanceApiClient
	{
		public EdjCase.ICP.Agent.Agents.IAgent Agent { get; }

		public EdjCase.ICP.Candid.Models.Principal CanisterId { get; }

		public GovernanceApiClient(EdjCase.ICP.Agent.Agents.IAgent agent, EdjCase.ICP.Candid.Models.Principal canisterId)
		{
			this.Agent = agent;
			this.CanisterId = canisterId;
		}

		public async System.Threading.Tasks.Task<Test.Models.Result> ClaimGtcNeurons(EdjCase.ICP.Candid.Models.Principal arg0, System.Collections.Generic.List<Test.Models.NeuronId> arg1)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg1));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "claim_gtc_neurons", arg);
			return reply.ToObjects<Test.Models.Result>();
		}

		public async System.Threading.Tasks.Task<Test.Models.ClaimOrRefreshNeuronFromAccountResponse> ClaimOrRefreshNeuronFromAccount(Test.Models.ClaimOrRefreshNeuronFromAccount arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "claim_or_refresh_neuron_from_account", arg);
			return reply.ToObjects<Test.Models.ClaimOrRefreshNeuronFromAccountResponse>();
		}

		public async System.Threading.Tasks.Task<System.String> GetBuildMetadata()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_build_metadata", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<System.String>();
		}

		public async System.Threading.Tasks.Task<Test.Models.Result2> GetFullNeuron(System.UInt64 arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_full_neuron", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.Result2>();
		}

		public async System.Threading.Tasks.Task<Test.Models.Result2> GetFullNeuronByIdOrSubaccount(Test.Models.NeuronIdOrSubaccount arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_full_neuron_by_id_or_subaccount", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.Result2>();
		}

		public async System.Threading.Tasks.Task<Test.Models.Result3> GetMonthlyNodeProviderRewards()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "get_monthly_node_provider_rewards", arg);
			return reply.ToObjects<Test.Models.Result3>();
		}

		public async System.Threading.Tasks.Task<Test.Models.NetworkEconomics> GetNetworkEconomicsParameters()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_network_economics_parameters", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.NetworkEconomics>();
		}

		public async System.Threading.Tasks.Task<System.Collections.Generic.List<System.UInt64>> GetNeuronIds()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_neuron_ids", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<System.Collections.Generic.List<System.UInt64>>();
		}

		public async System.Threading.Tasks.Task<Test.Models.Result4> GetNeuronInfo(System.UInt64 arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_neuron_info", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.Result4>();
		}

		public async System.Threading.Tasks.Task<Test.Models.Result4> GetNeuronInfoByIdOrSubaccount(Test.Models.NeuronIdOrSubaccount arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_neuron_info_by_id_or_subaccount", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.Result4>();
		}

		public async System.Threading.Tasks.Task<Test.Models.Result5> GetNodeProviderByCaller(EdjCase.ICP.Candid.Models.NullValue arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_node_provider_by_caller", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.Result5>();
		}

		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Test.Models.ProposalInfo>> GetPendingProposals()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_pending_proposals", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<System.Collections.Generic.List<Test.Models.ProposalInfo>>();
		}

		public async System.Threading.Tasks.Task<EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.ProposalInfo>> GetProposalInfo(System.UInt64 arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "get_proposal_info", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.ProposalInfo>>();
		}

		public async System.Threading.Tasks.Task<Test.Models.ListKnownNeuronsResponse> ListKnownNeurons()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "list_known_neurons", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.ListKnownNeuronsResponse>();
		}

		public async System.Threading.Tasks.Task<Test.Models.ListNeuronsResponse> ListNeurons(Test.Models.ListNeurons arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "list_neurons", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.ListNeuronsResponse>();
		}

		public async System.Threading.Tasks.Task<Test.Models.ListNodeProvidersResponse> ListNodeProviders()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "list_node_providers", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.ListNodeProvidersResponse>();
		}

		public async System.Threading.Tasks.Task<Test.Models.ListProposalInfoResponse> ListProposals(Test.Models.ListProposalInfo arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "list_proposals", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Test.Models.ListProposalInfoResponse>();
		}

		public async System.Threading.Tasks.Task<Test.Models.ManageNeuronResponse> ManageNeuron(Test.Models.ManageNeuron arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "manage_neuron", arg);
			return reply.ToObjects<Test.Models.ManageNeuronResponse>();
		}

		public async System.Threading.Tasks.Task<Test.Models.Result> TransferGtcNeuron(Test.Models.NeuronId arg0, Test.Models.NeuronId arg1)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg1));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "transfer_gtc_neuron", arg);
			return reply.ToObjects<Test.Models.Result>();
		}

		public async System.Threading.Tasks.Task<Test.Models.Result> UpdateNodeProvider(Test.Models.UpdateNodeProvider arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "update_node_provider", arg);
			return reply.ToObjects<Test.Models.Result>();
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class AccountIdentifier
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("hash")]
		public System.Collections.Generic.List<System.Byte> Hash { get; set; }

		public AccountIdentifier(System.Collections.Generic.List<System.Byte> hash)
		{
			this.Hash = hash;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.ActionTag))]
	public class Action
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.ActionTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Action(Test.Models.ActionTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Action()
		{
		}

		public static Test.Models.Action RegisterKnownNeuron(Test.Models.KnownNeuron info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.RegisterKnownNeuron, info);
		}

		public static Test.Models.Action ManageNeuron(Test.Models.ManageNeuron info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.ManageNeuron, info);
		}

		public static Test.Models.Action ExecuteNnsFunction(Test.Models.ExecuteNnsFunction info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.ExecuteNnsFunction, info);
		}

		public static Test.Models.Action RewardNodeProvider(Test.Models.RewardNodeProvider info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.RewardNodeProvider, info);
		}

		public static Test.Models.Action SetDefaultFollowees(Test.Models.SetDefaultFollowees info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.SetDefaultFollowees, info);
		}

		public static Test.Models.Action RewardNodeProviders(Test.Models.RewardNodeProviders info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.RewardNodeProviders, info);
		}

		public static Test.Models.Action ManageNetworkEconomics(Test.Models.NetworkEconomics info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.ManageNetworkEconomics, info);
		}

		public static Test.Models.Action ApproveGenesisKyc(Test.Models.ApproveGenesisKyc info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.ApproveGenesisKyc, info);
		}

		public static Test.Models.Action AddOrRemoveNodeProvider(Test.Models.AddOrRemoveNodeProvider info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.AddOrRemoveNodeProvider, info);
		}

		public static Test.Models.Action Motion(Test.Models.Motion info)
		{
			return new Test.Models.Action(Test.Models.ActionTag.Motion, info);
		}

		public Test.Models.KnownNeuron AsRegisterKnownNeuron()
		{
			this.ValidateTag(Test.Models.ActionTag.RegisterKnownNeuron);
			return (Test.Models.KnownNeuron)this.Value!;
		}

		public Test.Models.ManageNeuron AsManageNeuron()
		{
			this.ValidateTag(Test.Models.ActionTag.ManageNeuron);
			return (Test.Models.ManageNeuron)this.Value!;
		}

		public Test.Models.ExecuteNnsFunction AsExecuteNnsFunction()
		{
			this.ValidateTag(Test.Models.ActionTag.ExecuteNnsFunction);
			return (Test.Models.ExecuteNnsFunction)this.Value!;
		}

		public Test.Models.RewardNodeProvider AsRewardNodeProvider()
		{
			this.ValidateTag(Test.Models.ActionTag.RewardNodeProvider);
			return (Test.Models.RewardNodeProvider)this.Value!;
		}

		public Test.Models.SetDefaultFollowees AsSetDefaultFollowees()
		{
			this.ValidateTag(Test.Models.ActionTag.SetDefaultFollowees);
			return (Test.Models.SetDefaultFollowees)this.Value!;
		}

		public Test.Models.RewardNodeProviders AsRewardNodeProviders()
		{
			this.ValidateTag(Test.Models.ActionTag.RewardNodeProviders);
			return (Test.Models.RewardNodeProviders)this.Value!;
		}

		public Test.Models.NetworkEconomics AsManageNetworkEconomics()
		{
			this.ValidateTag(Test.Models.ActionTag.ManageNetworkEconomics);
			return (Test.Models.NetworkEconomics)this.Value!;
		}

		public Test.Models.ApproveGenesisKyc AsApproveGenesisKyc()
		{
			this.ValidateTag(Test.Models.ActionTag.ApproveGenesisKyc);
			return (Test.Models.ApproveGenesisKyc)this.Value!;
		}

		public Test.Models.AddOrRemoveNodeProvider AsAddOrRemoveNodeProvider()
		{
			this.ValidateTag(Test.Models.ActionTag.AddOrRemoveNodeProvider);
			return (Test.Models.AddOrRemoveNodeProvider)this.Value!;
		}

		public Test.Models.Motion AsMotion()
		{
			this.ValidateTag(Test.Models.ActionTag.Motion);
			return (Test.Models.Motion)this.Value!;
		}

		private void ValidateTag(Test.Models.ActionTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum ActionTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("RegisterKnownNeuron")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.KnownNeuron))]
		RegisterKnownNeuron,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ManageNeuron")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ManageNeuron))]
		ManageNeuron,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ExecuteNnsFunction")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ExecuteNnsFunction))]
		ExecuteNnsFunction,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("RewardNodeProvider")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardNodeProvider))]
		RewardNodeProvider,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("SetDefaultFollowees")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SetDefaultFollowees))]
		SetDefaultFollowees,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("RewardNodeProviders")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardNodeProviders))]
		RewardNodeProviders,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ManageNetworkEconomics")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NetworkEconomics))]
		ManageNetworkEconomics,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ApproveGenesisKyc")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ApproveGenesisKyc))]
		ApproveGenesisKyc,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("AddOrRemoveNodeProvider")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.AddOrRemoveNodeProvider))]
		AddOrRemoveNodeProvider,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Motion")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Motion))]
		Motion
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class AddHotKey
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("new_hot_key")]
		public EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewHotKey { get; set; }

		public AddHotKey(EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> newHotKey)
		{
			this.NewHotKey = newHotKey;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class AddOrRemoveNodeProvider
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("change")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Change> Change { get; set; }

		public AddOrRemoveNodeProvider(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Change> change)
		{
			this.Change = change;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Amount
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("e8s")]
		public System.UInt64 E8s { get; set; }

		public Amount(System.UInt64 e8s)
		{
			this.E8s = e8s;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ApproveGenesisKyc
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("principals")]
		public System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> Principals { get; set; }

		public ApproveGenesisKyc(System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> principals)
		{
			this.Principals = principals;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Ballot
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("vote")]
		public System.Int32 Vote { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("voting_power")]
		public System.UInt64 VotingPower { get; set; }

		public Ballot(System.Int32 vote, System.UInt64 votingPower)
		{
			this.Vote = vote;
			this.VotingPower = votingPower;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class BallotInfo
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("vote")]
		public System.Int32 Vote { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposal_id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> ProposalId { get; set; }

		public BallotInfo(System.Int32 vote, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposalId)
		{
			this.Vote = vote;
			this.ProposalId = proposalId;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.ByTag))]
	public class By
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.ByTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public By(Test.Models.ByTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected By()
		{
		}

		public static Test.Models.By NeuronIdOrSubaccount(Test.Models.By.ByO0 info)
		{
			return new Test.Models.By(Test.Models.ByTag.NeuronIdOrSubaccount, info);
		}

		public static Test.Models.By MemoAndController(Test.Models.ClaimOrRefreshNeuronFromAccount info)
		{
			return new Test.Models.By(Test.Models.ByTag.MemoAndController, info);
		}

		public static Test.Models.By Memo(System.UInt64 info)
		{
			return new Test.Models.By(Test.Models.ByTag.Memo, info);
		}

		public Test.Models.By.ByO0 AsNeuronIdOrSubaccount()
		{
			this.ValidateTag(Test.Models.ByTag.NeuronIdOrSubaccount);
			return (Test.Models.By.ByO0)this.Value!;
		}

		public Test.Models.ClaimOrRefreshNeuronFromAccount AsMemoAndController()
		{
			this.ValidateTag(Test.Models.ByTag.MemoAndController);
			return (Test.Models.ClaimOrRefreshNeuronFromAccount)this.Value!;
		}

		public System.UInt64 AsMemo()
		{
			this.ValidateTag(Test.Models.ByTag.Memo);
			return (System.UInt64)this.Value!;
		}

		private void ValidateTag(Test.Models.ByTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}

		public class ByO0
		{
			public ByO0()
			{
			}
		}
	}

	public enum ByTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("NeuronIdOrSubaccount")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.By.ByO0))]
		NeuronIdOrSubaccount,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("MemoAndController")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ClaimOrRefreshNeuronFromAccount))]
		MemoAndController,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Memo")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.UInt64))]
		Memo
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.ChangeTag))]
	public class Change
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.ChangeTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Change(Test.Models.ChangeTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Change()
		{
		}

		public static Test.Models.Change ToRemove(Test.Models.NodeProvider info)
		{
			return new Test.Models.Change(Test.Models.ChangeTag.ToRemove, info);
		}

		public static Test.Models.Change ToAdd(Test.Models.NodeProvider info)
		{
			return new Test.Models.Change(Test.Models.ChangeTag.ToAdd, info);
		}

		public Test.Models.NodeProvider AsToRemove()
		{
			this.ValidateTag(Test.Models.ChangeTag.ToRemove);
			return (Test.Models.NodeProvider)this.Value!;
		}

		public Test.Models.NodeProvider AsToAdd()
		{
			this.ValidateTag(Test.Models.ChangeTag.ToAdd);
			return (Test.Models.NodeProvider)this.Value!;
		}

		private void ValidateTag(Test.Models.ChangeTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum ChangeTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ToRemove")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NodeProvider))]
		ToRemove,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ToAdd")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NodeProvider))]
		ToAdd
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ClaimOrRefresh
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("by")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.By> By { get; set; }

		public ClaimOrRefresh(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.By> by)
		{
			this.By = by;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ClaimOrRefreshNeuronFromAccount
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("controller")]
		public EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Controller { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("memo")]
		public System.UInt64 Memo { get; set; }

		public ClaimOrRefreshNeuronFromAccount(EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> controller, System.UInt64 memo)
		{
			this.Controller = controller;
			this.Memo = memo;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ClaimOrRefreshNeuronFromAccountResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("result")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Result1> Result { get; set; }

		public ClaimOrRefreshNeuronFromAccountResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Result1> result)
		{
			this.Result = result;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ClaimOrRefreshResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("refreshed_neuron_id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> RefreshedNeuronId { get; set; }

		public ClaimOrRefreshResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> refreshedNeuronId)
		{
			this.RefreshedNeuronId = refreshedNeuronId;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.CommandTag))]
	public class Command
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.CommandTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Command(Test.Models.CommandTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Command()
		{
		}

		public static Test.Models.Command Spawn(Test.Models.Spawn info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.Spawn, info);
		}

		public static Test.Models.Command Split(Test.Models.Split info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.Split, info);
		}

		public static Test.Models.Command Follow(Test.Models.Follow info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.Follow, info);
		}

		public static Test.Models.Command ClaimOrRefresh(Test.Models.ClaimOrRefresh info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.ClaimOrRefresh, info);
		}

		public static Test.Models.Command Configure(Test.Models.Configure info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.Configure, info);
		}

		public static Test.Models.Command RegisterVote(Test.Models.RegisterVote info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.RegisterVote, info);
		}

		public static Test.Models.Command Merge(Test.Models.Merge info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.Merge, info);
		}

		public static Test.Models.Command DisburseToNeuron(Test.Models.DisburseToNeuron info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.DisburseToNeuron, info);
		}

		public static Test.Models.Command MakeProposal(Test.Models.Proposal info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.MakeProposal, info);
		}

		public static Test.Models.Command MergeMaturity(Test.Models.MergeMaturity info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.MergeMaturity, info);
		}

		public static Test.Models.Command Disburse(Test.Models.Disburse info)
		{
			return new Test.Models.Command(Test.Models.CommandTag.Disburse, info);
		}

		public Test.Models.Spawn AsSpawn()
		{
			this.ValidateTag(Test.Models.CommandTag.Spawn);
			return (Test.Models.Spawn)this.Value!;
		}

		public Test.Models.Split AsSplit()
		{
			this.ValidateTag(Test.Models.CommandTag.Split);
			return (Test.Models.Split)this.Value!;
		}

		public Test.Models.Follow AsFollow()
		{
			this.ValidateTag(Test.Models.CommandTag.Follow);
			return (Test.Models.Follow)this.Value!;
		}

		public Test.Models.ClaimOrRefresh AsClaimOrRefresh()
		{
			this.ValidateTag(Test.Models.CommandTag.ClaimOrRefresh);
			return (Test.Models.ClaimOrRefresh)this.Value!;
		}

		public Test.Models.Configure AsConfigure()
		{
			this.ValidateTag(Test.Models.CommandTag.Configure);
			return (Test.Models.Configure)this.Value!;
		}

		public Test.Models.RegisterVote AsRegisterVote()
		{
			this.ValidateTag(Test.Models.CommandTag.RegisterVote);
			return (Test.Models.RegisterVote)this.Value!;
		}

		public Test.Models.Merge AsMerge()
		{
			this.ValidateTag(Test.Models.CommandTag.Merge);
			return (Test.Models.Merge)this.Value!;
		}

		public Test.Models.DisburseToNeuron AsDisburseToNeuron()
		{
			this.ValidateTag(Test.Models.CommandTag.DisburseToNeuron);
			return (Test.Models.DisburseToNeuron)this.Value!;
		}

		public Test.Models.Proposal AsMakeProposal()
		{
			this.ValidateTag(Test.Models.CommandTag.MakeProposal);
			return (Test.Models.Proposal)this.Value!;
		}

		public Test.Models.MergeMaturity AsMergeMaturity()
		{
			this.ValidateTag(Test.Models.CommandTag.MergeMaturity);
			return (Test.Models.MergeMaturity)this.Value!;
		}

		public Test.Models.Disburse AsDisburse()
		{
			this.ValidateTag(Test.Models.CommandTag.Disburse);
			return (Test.Models.Disburse)this.Value!;
		}

		private void ValidateTag(Test.Models.CommandTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum CommandTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Spawn")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Spawn))]
		Spawn,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Split")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Split))]
		Split,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Follow")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Follow))]
		Follow,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ClaimOrRefresh")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ClaimOrRefresh))]
		ClaimOrRefresh,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Configure")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Configure))]
		Configure,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("RegisterVote")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RegisterVote))]
		RegisterVote,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Merge")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Merge))]
		Merge,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("DisburseToNeuron")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.DisburseToNeuron))]
		DisburseToNeuron,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("MakeProposal")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Proposal))]
		MakeProposal,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("MergeMaturity")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.MergeMaturity))]
		MergeMaturity,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Disburse")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Disburse))]
		Disburse
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Command1Tag))]
	public class Command1
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.Command1Tag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Command1(Test.Models.Command1Tag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Command1()
		{
		}

		public static Test.Models.Command1 Error(Test.Models.GovernanceError info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.Error, info);
		}

		public static Test.Models.Command1 Spawn(Test.Models.SpawnResponse info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.Spawn, info);
		}

		public static Test.Models.Command1 Split(Test.Models.SpawnResponse info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.Split, info);
		}

		public static Test.Models.Command1 Follow(Test.Models.Command1.Command1O3 info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.Follow, info);
		}

		public static Test.Models.Command1 ClaimOrRefresh(Test.Models.ClaimOrRefreshResponse info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.ClaimOrRefresh, info);
		}

		public static Test.Models.Command1 Configure(Test.Models.Command1.Command1O5 info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.Configure, info);
		}

		public static Test.Models.Command1 RegisterVote(Test.Models.Command1.Command1O6 info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.RegisterVote, info);
		}

		public static Test.Models.Command1 Merge(Test.Models.Command1.Command1O7 info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.Merge, info);
		}

		public static Test.Models.Command1 DisburseToNeuron(Test.Models.SpawnResponse info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.DisburseToNeuron, info);
		}

		public static Test.Models.Command1 MakeProposal(Test.Models.MakeProposalResponse info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.MakeProposal, info);
		}

		public static Test.Models.Command1 MergeMaturity(Test.Models.MergeMaturityResponse info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.MergeMaturity, info);
		}

		public static Test.Models.Command1 Disburse(Test.Models.DisburseResponse info)
		{
			return new Test.Models.Command1(Test.Models.Command1Tag.Disburse, info);
		}

		public Test.Models.GovernanceError AsError()
		{
			this.ValidateTag(Test.Models.Command1Tag.Error);
			return (Test.Models.GovernanceError)this.Value!;
		}

		public Test.Models.SpawnResponse AsSpawn()
		{
			this.ValidateTag(Test.Models.Command1Tag.Spawn);
			return (Test.Models.SpawnResponse)this.Value!;
		}

		public Test.Models.SpawnResponse AsSplit()
		{
			this.ValidateTag(Test.Models.Command1Tag.Split);
			return (Test.Models.SpawnResponse)this.Value!;
		}

		public Test.Models.Command1.Command1O3 AsFollow()
		{
			this.ValidateTag(Test.Models.Command1Tag.Follow);
			return (Test.Models.Command1.Command1O3)this.Value!;
		}

		public Test.Models.ClaimOrRefreshResponse AsClaimOrRefresh()
		{
			this.ValidateTag(Test.Models.Command1Tag.ClaimOrRefresh);
			return (Test.Models.ClaimOrRefreshResponse)this.Value!;
		}

		public Test.Models.Command1.Command1O5 AsConfigure()
		{
			this.ValidateTag(Test.Models.Command1Tag.Configure);
			return (Test.Models.Command1.Command1O5)this.Value!;
		}

		public Test.Models.Command1.Command1O6 AsRegisterVote()
		{
			this.ValidateTag(Test.Models.Command1Tag.RegisterVote);
			return (Test.Models.Command1.Command1O6)this.Value!;
		}

		public Test.Models.Command1.Command1O7 AsMerge()
		{
			this.ValidateTag(Test.Models.Command1Tag.Merge);
			return (Test.Models.Command1.Command1O7)this.Value!;
		}

		public Test.Models.SpawnResponse AsDisburseToNeuron()
		{
			this.ValidateTag(Test.Models.Command1Tag.DisburseToNeuron);
			return (Test.Models.SpawnResponse)this.Value!;
		}

		public Test.Models.MakeProposalResponse AsMakeProposal()
		{
			this.ValidateTag(Test.Models.Command1Tag.MakeProposal);
			return (Test.Models.MakeProposalResponse)this.Value!;
		}

		public Test.Models.MergeMaturityResponse AsMergeMaturity()
		{
			this.ValidateTag(Test.Models.Command1Tag.MergeMaturity);
			return (Test.Models.MergeMaturityResponse)this.Value!;
		}

		public Test.Models.DisburseResponse AsDisburse()
		{
			this.ValidateTag(Test.Models.Command1Tag.Disburse);
			return (Test.Models.DisburseResponse)this.Value!;
		}

		private void ValidateTag(Test.Models.Command1Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}

		public class Command1O3
		{
			public Command1O3()
			{
			}
		}

		public class Command1O5
		{
			public Command1O5()
			{
			}
		}

		public class Command1O6
		{
			public Command1O6()
			{
			}
		}

		public class Command1O7
		{
			public Command1O7()
			{
			}
		}
	}

	public enum Command1Tag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Error")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]
		Error,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Spawn")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SpawnResponse))]
		Spawn,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Split")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SpawnResponse))]
		Split,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Follow")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Command1.Command1O3))]
		Follow,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ClaimOrRefresh")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ClaimOrRefreshResponse))]
		ClaimOrRefresh,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Configure")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Command1.Command1O5))]
		Configure,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("RegisterVote")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Command1.Command1O6))]
		RegisterVote,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Merge")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Command1.Command1O7))]
		Merge,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("DisburseToNeuron")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SpawnResponse))]
		DisburseToNeuron,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("MakeProposal")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.MakeProposalResponse))]
		MakeProposal,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("MergeMaturity")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.MergeMaturityResponse))]
		MergeMaturity,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Disburse")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.DisburseResponse))]
		Disburse
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Command2Tag))]
	public class Command2
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.Command2Tag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Command2(Test.Models.Command2Tag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Command2()
		{
		}

		public static Test.Models.Command2 Spawn(Test.Models.Spawn info)
		{
			return new Test.Models.Command2(Test.Models.Command2Tag.Spawn, info);
		}

		public static Test.Models.Command2 Split(Test.Models.Split info)
		{
			return new Test.Models.Command2(Test.Models.Command2Tag.Split, info);
		}

		public static Test.Models.Command2 Configure(Test.Models.Configure info)
		{
			return new Test.Models.Command2(Test.Models.Command2Tag.Configure, info);
		}

		public static Test.Models.Command2 Merge(Test.Models.Merge info)
		{
			return new Test.Models.Command2(Test.Models.Command2Tag.Merge, info);
		}

		public static Test.Models.Command2 DisburseToNeuron(Test.Models.DisburseToNeuron info)
		{
			return new Test.Models.Command2(Test.Models.Command2Tag.DisburseToNeuron, info);
		}

		public static Test.Models.Command2 ClaimOrRefreshNeuron(Test.Models.ClaimOrRefresh info)
		{
			return new Test.Models.Command2(Test.Models.Command2Tag.ClaimOrRefreshNeuron, info);
		}

		public static Test.Models.Command2 MergeMaturity(Test.Models.MergeMaturity info)
		{
			return new Test.Models.Command2(Test.Models.Command2Tag.MergeMaturity, info);
		}

		public static Test.Models.Command2 Disburse(Test.Models.Disburse info)
		{
			return new Test.Models.Command2(Test.Models.Command2Tag.Disburse, info);
		}

		public Test.Models.Spawn AsSpawn()
		{
			this.ValidateTag(Test.Models.Command2Tag.Spawn);
			return (Test.Models.Spawn)this.Value!;
		}

		public Test.Models.Split AsSplit()
		{
			this.ValidateTag(Test.Models.Command2Tag.Split);
			return (Test.Models.Split)this.Value!;
		}

		public Test.Models.Configure AsConfigure()
		{
			this.ValidateTag(Test.Models.Command2Tag.Configure);
			return (Test.Models.Configure)this.Value!;
		}

		public Test.Models.Merge AsMerge()
		{
			this.ValidateTag(Test.Models.Command2Tag.Merge);
			return (Test.Models.Merge)this.Value!;
		}

		public Test.Models.DisburseToNeuron AsDisburseToNeuron()
		{
			this.ValidateTag(Test.Models.Command2Tag.DisburseToNeuron);
			return (Test.Models.DisburseToNeuron)this.Value!;
		}

		public Test.Models.ClaimOrRefresh AsClaimOrRefreshNeuron()
		{
			this.ValidateTag(Test.Models.Command2Tag.ClaimOrRefreshNeuron);
			return (Test.Models.ClaimOrRefresh)this.Value!;
		}

		public Test.Models.MergeMaturity AsMergeMaturity()
		{
			this.ValidateTag(Test.Models.Command2Tag.MergeMaturity);
			return (Test.Models.MergeMaturity)this.Value!;
		}

		public Test.Models.Disburse AsDisburse()
		{
			this.ValidateTag(Test.Models.Command2Tag.Disburse);
			return (Test.Models.Disburse)this.Value!;
		}

		private void ValidateTag(Test.Models.Command2Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Command2Tag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Spawn")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Spawn))]
		Spawn,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Split")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Split))]
		Split,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Configure")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Configure))]
		Configure,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Merge")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Merge))]
		Merge,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("DisburseToNeuron")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.DisburseToNeuron))]
		DisburseToNeuron,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ClaimOrRefreshNeuron")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.ClaimOrRefresh))]
		ClaimOrRefreshNeuron,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("MergeMaturity")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.MergeMaturity))]
		MergeMaturity,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Disburse")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Disburse))]
		Disburse
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Configure
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("operation")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Operation> Operation { get; set; }

		public Configure(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Operation> operation)
		{
			this.Operation = operation;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Disburse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("to_account")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> ToAccount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("amount")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Amount> Amount { get; set; }

		public Disburse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> toAccount, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Amount> amount)
		{
			this.ToAccount = toAccount;
			this.Amount = amount;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class DisburseResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("transfer_block_height")]
		public System.UInt64 TransferBlockHeight { get; set; }

		public DisburseResponse(System.UInt64 transferBlockHeight)
		{
			this.TransferBlockHeight = transferBlockHeight;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class DisburseToNeuron
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolve_delay_seconds")]
		public System.UInt64 DissolveDelaySeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("kyc_verified")]
		public System.Boolean KycVerified { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("amount_e8s")]
		public System.UInt64 AmountE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("new_controller")]
		public EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewController { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("nonce")]
		public System.UInt64 Nonce { get; set; }

		public DisburseToNeuron(System.UInt64 dissolveDelaySeconds, System.Boolean kycVerified, System.UInt64 amountE8s, EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> newController, System.UInt64 nonce)
		{
			this.DissolveDelaySeconds = dissolveDelaySeconds;
			this.KycVerified = kycVerified;
			this.AmountE8s = amountE8s;
			this.NewController = newController;
			this.Nonce = nonce;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.DissolveStateTag))]
	public class DissolveState
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.DissolveStateTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public DissolveState(Test.Models.DissolveStateTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected DissolveState()
		{
		}

		public static Test.Models.DissolveState DissolveDelaySeconds(System.UInt64 info)
		{
			return new Test.Models.DissolveState(Test.Models.DissolveStateTag.DissolveDelaySeconds, info);
		}

		public static Test.Models.DissolveState WhenDissolvedTimestampSeconds(System.UInt64 info)
		{
			return new Test.Models.DissolveState(Test.Models.DissolveStateTag.WhenDissolvedTimestampSeconds, info);
		}

		public System.UInt64 AsDissolveDelaySeconds()
		{
			this.ValidateTag(Test.Models.DissolveStateTag.DissolveDelaySeconds);
			return (System.UInt64)this.Value!;
		}

		public System.UInt64 AsWhenDissolvedTimestampSeconds()
		{
			this.ValidateTag(Test.Models.DissolveStateTag.WhenDissolvedTimestampSeconds);
			return (System.UInt64)this.Value!;
		}

		private void ValidateTag(Test.Models.DissolveStateTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum DissolveStateTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("DissolveDelaySeconds")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.UInt64))]
		DissolveDelaySeconds,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("WhenDissolvedTimestampSeconds")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.UInt64))]
		WhenDissolvedTimestampSeconds
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ExecuteNnsFunction
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("nns_function")]
		public System.Int32 NnsFunction { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("payload")]
		public System.Collections.Generic.List<System.Byte> Payload { get; set; }

		public ExecuteNnsFunction(System.Int32 nnsFunction, System.Collections.Generic.List<System.Byte> payload)
		{
			this.NnsFunction = nnsFunction;
			this.Payload = payload;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Follow
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("topic")]
		public System.Int32 Topic { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("followees")]
		public System.Collections.Generic.List<Test.Models.NeuronId> Followees { get; set; }

		public Follow(System.Int32 topic, System.Collections.Generic.List<Test.Models.NeuronId> followees)
		{
			this.Topic = topic;
			this.Followees = followees;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Followees
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("followees")]
		public System.Collections.Generic.List<Test.Models.NeuronId> Followees { get; set; }

		public Followees(System.Collections.Generic.List<Test.Models.NeuronId> followees)
		{
			this.Followees = followees;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Governance
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("default_followees")]
		public System.Collections.Generic.List<Test.Models.Governance.GovernanceR0V0> DefaultFollowees { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("wait_for_quiet_threshold_seconds")]
		public System.UInt64 WaitForQuietThresholdSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("metrics")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceCachedMetrics> Metrics { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("node_providers")]
		public System.Collections.Generic.List<Test.Models.NodeProvider> NodeProviders { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("economics")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NetworkEconomics> Economics { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("latest_reward_event")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.RewardEvent> LatestRewardEvent { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("to_claim_transfers")]
		public System.Collections.Generic.List<Test.Models.NeuronStakeTransfer> ToClaimTransfers { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("short_voting_period_seconds")]
		public System.UInt64 ShortVotingPeriodSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposals")]
		public System.Collections.Generic.List<Test.Models.Governance.GovernanceR8V0> Proposals { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("in_flight_commands")]
		public System.Collections.Generic.List<Test.Models.Governance.GovernanceR9V0> InFlightCommands { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neurons")]
		public System.Collections.Generic.List<Test.Models.Governance.GovernanceR10V0> Neurons { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("genesis_timestamp_seconds")]
		public System.UInt64 GenesisTimestampSeconds { get; set; }

		public Governance(System.Collections.Generic.List<Test.Models.Governance.GovernanceR0V0> defaultFollowees, System.UInt64 waitForQuietThresholdSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceCachedMetrics> metrics, System.Collections.Generic.List<Test.Models.NodeProvider> nodeProviders, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NetworkEconomics> economics, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.RewardEvent> latestRewardEvent, System.Collections.Generic.List<Test.Models.NeuronStakeTransfer> toClaimTransfers, System.UInt64 shortVotingPeriodSeconds, System.Collections.Generic.List<Test.Models.Governance.GovernanceR8V0> proposals, System.Collections.Generic.List<Test.Models.Governance.GovernanceR9V0> inFlightCommands, System.Collections.Generic.List<Test.Models.Governance.GovernanceR10V0> neurons, System.UInt64 genesisTimestampSeconds)
		{
			this.DefaultFollowees = defaultFollowees;
			this.WaitForQuietThresholdSeconds = waitForQuietThresholdSeconds;
			this.Metrics = metrics;
			this.NodeProviders = nodeProviders;
			this.Economics = economics;
			this.LatestRewardEvent = latestRewardEvent;
			this.ToClaimTransfers = toClaimTransfers;
			this.ShortVotingPeriodSeconds = shortVotingPeriodSeconds;
			this.Proposals = proposals;
			this.InFlightCommands = inFlightCommands;
			this.Neurons = neurons;
			this.GenesisTimestampSeconds = genesisTimestampSeconds;
		}

		public class GovernanceR0V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.Int32 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.Followees F1 { get; set; }

			public GovernanceR0V0(System.Int32 f0, Test.Models.Followees f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}

		public class GovernanceR8V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.ProposalData F1 { get; set; }

			public GovernanceR8V0(System.UInt64 f0, Test.Models.ProposalData f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}

		public class GovernanceR9V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.NeuronInFlightCommand F1 { get; set; }

			public GovernanceR9V0(System.UInt64 f0, Test.Models.NeuronInFlightCommand f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}

		public class GovernanceR10V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.Neuron F1 { get; set; }

			public GovernanceR10V0(System.UInt64 f0, Test.Models.Neuron f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class GovernanceCachedMetrics
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("not_dissolving_neurons_e8s_buckets")]
		public System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR0V0> NotDissolvingNeuronsE8sBuckets { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("garbage_collectable_neurons_count")]
		public System.UInt64 GarbageCollectableNeuronsCount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neurons_with_invalid_stake_count")]
		public System.UInt64 NeuronsWithInvalidStakeCount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("not_dissolving_neurons_count_buckets")]
		public System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR3V0> NotDissolvingNeuronsCountBuckets { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("total_supply_icp")]
		public System.UInt64 TotalSupplyIcp { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neurons_with_less_than_6_months_dissolve_delay_count")]
		public System.UInt64 NeuronsWithLessThan6MonthsDissolveDelayCount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolved_neurons_count")]
		public System.UInt64 DissolvedNeuronsCount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("total_staked_e8s")]
		public System.UInt64 TotalStakedE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("not_dissolving_neurons_count")]
		public System.UInt64 NotDissolvingNeuronsCount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolved_neurons_e8s")]
		public System.UInt64 DissolvedNeuronsE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neurons_with_less_than_6_months_dissolve_delay_e8s")]
		public System.UInt64 NeuronsWithLessThan6MonthsDissolveDelayE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolving_neurons_count_buckets")]
		public System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR11V0> DissolvingNeuronsCountBuckets { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolving_neurons_count")]
		public System.UInt64 DissolvingNeuronsCount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolving_neurons_e8s_buckets")]
		public System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR13V0> DissolvingNeuronsE8sBuckets { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("community_fund_total_staked_e8s")]
		public System.UInt64 CommunityFundTotalStakedE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("timestamp_seconds")]
		public System.UInt64 TimestampSeconds { get; set; }

		public GovernanceCachedMetrics(System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR0V0> notDissolvingNeuronsE8sBuckets, System.UInt64 garbageCollectableNeuronsCount, System.UInt64 neuronsWithInvalidStakeCount, System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR3V0> notDissolvingNeuronsCountBuckets, System.UInt64 totalSupplyIcp, System.UInt64 neuronsWithLessThan6MonthsDissolveDelayCount, System.UInt64 dissolvedNeuronsCount, System.UInt64 totalStakedE8s, System.UInt64 notDissolvingNeuronsCount, System.UInt64 dissolvedNeuronsE8s, System.UInt64 neuronsWithLessThan6MonthsDissolveDelayE8s, System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR11V0> dissolvingNeuronsCountBuckets, System.UInt64 dissolvingNeuronsCount, System.Collections.Generic.List<Test.Models.GovernanceCachedMetrics.GovernanceCachedMetricsR13V0> dissolvingNeuronsE8sBuckets, System.UInt64 communityFundTotalStakedE8s, System.UInt64 timestampSeconds)
		{
			this.NotDissolvingNeuronsE8sBuckets = notDissolvingNeuronsE8sBuckets;
			this.GarbageCollectableNeuronsCount = garbageCollectableNeuronsCount;
			this.NeuronsWithInvalidStakeCount = neuronsWithInvalidStakeCount;
			this.NotDissolvingNeuronsCountBuckets = notDissolvingNeuronsCountBuckets;
			this.TotalSupplyIcp = totalSupplyIcp;
			this.NeuronsWithLessThan6MonthsDissolveDelayCount = neuronsWithLessThan6MonthsDissolveDelayCount;
			this.DissolvedNeuronsCount = dissolvedNeuronsCount;
			this.TotalStakedE8s = totalStakedE8s;
			this.NotDissolvingNeuronsCount = notDissolvingNeuronsCount;
			this.DissolvedNeuronsE8s = dissolvedNeuronsE8s;
			this.NeuronsWithLessThan6MonthsDissolveDelayE8s = neuronsWithLessThan6MonthsDissolveDelayE8s;
			this.DissolvingNeuronsCountBuckets = dissolvingNeuronsCountBuckets;
			this.DissolvingNeuronsCount = dissolvingNeuronsCount;
			this.DissolvingNeuronsE8sBuckets = dissolvingNeuronsE8sBuckets;
			this.CommunityFundTotalStakedE8s = communityFundTotalStakedE8s;
			this.TimestampSeconds = timestampSeconds;
		}

		public class GovernanceCachedMetricsR0V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public System.Double F1 { get; set; }

			public GovernanceCachedMetricsR0V0(System.UInt64 f0, System.Double f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}

		public class GovernanceCachedMetricsR3V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public System.UInt64 F1 { get; set; }

			public GovernanceCachedMetricsR3V0(System.UInt64 f0, System.UInt64 f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}

		public class GovernanceCachedMetricsR11V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public System.UInt64 F1 { get; set; }

			public GovernanceCachedMetricsR11V0(System.UInt64 f0, System.UInt64 f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}

		public class GovernanceCachedMetricsR13V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public System.Double F1 { get; set; }

			public GovernanceCachedMetricsR13V0(System.UInt64 f0, System.Double f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class GovernanceError
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("error_message")]
		public System.String ErrorMessage { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("error_type")]
		public System.Int32 ErrorType { get; set; }

		public GovernanceError(System.String errorMessage, System.Int32 errorType)
		{
			this.ErrorMessage = errorMessage;
			this.ErrorType = errorType;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class IncreaseDissolveDelay
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("additional_dissolve_delay_seconds")]
		public System.UInt32 AdditionalDissolveDelaySeconds { get; set; }

		public IncreaseDissolveDelay(System.UInt32 additionalDissolveDelaySeconds)
		{
			this.AdditionalDissolveDelaySeconds = additionalDissolveDelaySeconds;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class KnownNeuron
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("known_neuron_data")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> KnownNeuronData { get; set; }

		public KnownNeuron(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> knownNeuronData)
		{
			this.Id = id;
			this.KnownNeuronData = knownNeuronData;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class KnownNeuronData
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("name")]
		public System.String Name { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("description")]
		public EdjCase.ICP.Candid.Models.OptionalValue<System.String> Description { get; set; }

		public KnownNeuronData(System.String name, EdjCase.ICP.Candid.Models.OptionalValue<System.String> description)
		{
			this.Name = name;
			this.Description = description;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ListKnownNeuronsResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("known_neurons")]
		public System.Collections.Generic.List<Test.Models.KnownNeuron> KnownNeurons { get; set; }

		public ListKnownNeuronsResponse(System.Collections.Generic.List<Test.Models.KnownNeuron> knownNeurons)
		{
			this.KnownNeurons = knownNeurons;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ListNeurons
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neuron_ids")]
		public System.Collections.Generic.List<System.UInt64> NeuronIds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("include_neurons_readable_by_caller")]
		public System.Boolean IncludeNeuronsReadableByCaller { get; set; }

		public ListNeurons(System.Collections.Generic.List<System.UInt64> neuronIds, System.Boolean includeNeuronsReadableByCaller)
		{
			this.NeuronIds = neuronIds;
			this.IncludeNeuronsReadableByCaller = includeNeuronsReadableByCaller;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ListNeuronsResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neuron_infos")]
		public System.Collections.Generic.List<Test.Models.ListNeuronsResponse.ListNeuronsResponseR0V0> NeuronInfos { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("full_neurons")]
		public System.Collections.Generic.List<Test.Models.Neuron> FullNeurons { get; set; }

		public ListNeuronsResponse(System.Collections.Generic.List<Test.Models.ListNeuronsResponse.ListNeuronsResponseR0V0> neuronInfos, System.Collections.Generic.List<Test.Models.Neuron> fullNeurons)
		{
			this.NeuronInfos = neuronInfos;
			this.FullNeurons = fullNeurons;
		}

		public class ListNeuronsResponseR0V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.NeuronInfo F1 { get; set; }

			public ListNeuronsResponseR0V0(System.UInt64 f0, Test.Models.NeuronInfo f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ListNodeProvidersResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("node_providers")]
		public System.Collections.Generic.List<Test.Models.NodeProvider> NodeProviders { get; set; }

		public ListNodeProvidersResponse(System.Collections.Generic.List<Test.Models.NodeProvider> nodeProviders)
		{
			this.NodeProviders = nodeProviders;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ListProposalInfo
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("include_reward_status")]
		public System.Collections.Generic.List<System.Int32> IncludeRewardStatus { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("before_proposal")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> BeforeProposal { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("limit")]
		public System.UInt32 Limit { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("exclude_topic")]
		public System.Collections.Generic.List<System.Int32> ExcludeTopic { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("include_status")]
		public System.Collections.Generic.List<System.Int32> IncludeStatus { get; set; }

		public ListProposalInfo(System.Collections.Generic.List<System.Int32> includeRewardStatus, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> beforeProposal, System.UInt32 limit, System.Collections.Generic.List<System.Int32> excludeTopic, System.Collections.Generic.List<System.Int32> includeStatus)
		{
			this.IncludeRewardStatus = includeRewardStatus;
			this.BeforeProposal = beforeProposal;
			this.Limit = limit;
			this.ExcludeTopic = excludeTopic;
			this.IncludeStatus = includeStatus;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ListProposalInfoResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposal_info")]
		public System.Collections.Generic.List<Test.Models.ProposalInfo> ProposalInfo { get; set; }

		public ListProposalInfoResponse(System.Collections.Generic.List<Test.Models.ProposalInfo> proposalInfo)
		{
			this.ProposalInfo = proposalInfo;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class MakeProposalResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposal_id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> ProposalId { get; set; }

		public MakeProposalResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposalId)
		{
			this.ProposalId = proposalId;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ManageNeuron
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("command")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command> Command { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neuron_id_or_subaccount")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronIdOrSubaccount> NeuronIdOrSubaccount { get; set; }

		public ManageNeuron(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command> command, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronIdOrSubaccount> neuronIdOrSubaccount)
		{
			this.Id = id;
			this.Command = command;
			this.NeuronIdOrSubaccount = neuronIdOrSubaccount;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ManageNeuronResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("command")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command1> Command { get; set; }

		public ManageNeuronResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command1> command)
		{
			this.Command = command;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Merge
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("source_neuron_id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> SourceNeuronId { get; set; }

		public Merge(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> sourceNeuronId)
		{
			this.SourceNeuronId = sourceNeuronId;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class MergeMaturity
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("percentage_to_merge")]
		public System.UInt32 PercentageToMerge { get; set; }

		public MergeMaturity(System.UInt32 percentageToMerge)
		{
			this.PercentageToMerge = percentageToMerge;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class MergeMaturityResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("merged_maturity_e8s")]
		public System.UInt64 MergedMaturityE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("new_stake_e8s")]
		public System.UInt64 NewStakeE8s { get; set; }

		public MergeMaturityResponse(System.UInt64 mergedMaturityE8s, System.UInt64 newStakeE8s)
		{
			this.MergedMaturityE8s = mergedMaturityE8s;
			this.NewStakeE8s = newStakeE8s;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Motion
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("motion_text")]
		public System.String MotionText { get; set; }

		public Motion(System.String motionText)
		{
			this.MotionText = motionText;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class NetworkEconomics
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neuron_minimum_stake_e8s")]
		public System.UInt64 NeuronMinimumStakeE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("max_proposals_to_keep_per_topic")]
		public System.UInt32 MaxProposalsToKeepPerTopic { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neuron_management_fee_per_proposal_e8s")]
		public System.UInt64 NeuronManagementFeePerProposalE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reject_cost_e8s")]
		public System.UInt64 RejectCostE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("transaction_fee_e8s")]
		public System.UInt64 TransactionFeeE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neuron_spawn_dissolve_delay_seconds")]
		public System.UInt64 NeuronSpawnDissolveDelaySeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("minimum_icp_xdr_rate")]
		public System.UInt64 MinimumIcpXdrRate { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("maximum_node_provider_rewards_e8s")]
		public System.UInt64 MaximumNodeProviderRewardsE8s { get; set; }

		public NetworkEconomics(System.UInt64 neuronMinimumStakeE8s, System.UInt32 maxProposalsToKeepPerTopic, System.UInt64 neuronManagementFeePerProposalE8s, System.UInt64 rejectCostE8s, System.UInt64 transactionFeeE8s, System.UInt64 neuronSpawnDissolveDelaySeconds, System.UInt64 minimumIcpXdrRate, System.UInt64 maximumNodeProviderRewardsE8s)
		{
			this.NeuronMinimumStakeE8s = neuronMinimumStakeE8s;
			this.MaxProposalsToKeepPerTopic = maxProposalsToKeepPerTopic;
			this.NeuronManagementFeePerProposalE8s = neuronManagementFeePerProposalE8s;
			this.RejectCostE8s = rejectCostE8s;
			this.TransactionFeeE8s = transactionFeeE8s;
			this.NeuronSpawnDissolveDelaySeconds = neuronSpawnDissolveDelaySeconds;
			this.MinimumIcpXdrRate = minimumIcpXdrRate;
			this.MaximumNodeProviderRewardsE8s = maximumNodeProviderRewardsE8s;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Neuron
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("controller")]
		public EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Controller { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("recent_ballots")]
		public System.Collections.Generic.List<Test.Models.BallotInfo> RecentBallots { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("kyc_verified")]
		public System.Boolean KycVerified { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("not_for_profit")]
		public System.Boolean NotForProfit { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("maturity_e8s_equivalent")]
		public System.UInt64 MaturityE8sEquivalent { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("cached_neuron_stake_e8s")]
		public System.UInt64 CachedNeuronStakeE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("created_timestamp_seconds")]
		public System.UInt64 CreatedTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("aging_since_timestamp_seconds")]
		public System.UInt64 AgingSinceTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("hot_keys")]
		public System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> HotKeys { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("account")]
		public System.Collections.Generic.List<System.Byte> Account { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("joined_community_fund_timestamp_seconds")]
		public EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> JoinedCommunityFundTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolve_state")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.DissolveState> DissolveState { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("followees")]
		public System.Collections.Generic.List<Test.Models.Neuron.NeuronR13V0> Followees { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neuron_fees_e8s")]
		public System.UInt64 NeuronFeesE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("transfer")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronStakeTransfer> Transfer { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("known_neuron_data")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> KnownNeuronData { get; set; }

		public Neuron(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> controller, System.Collections.Generic.List<Test.Models.BallotInfo> recentBallots, System.Boolean kycVerified, System.Boolean notForProfit, System.UInt64 maturityE8sEquivalent, System.UInt64 cachedNeuronStakeE8s, System.UInt64 createdTimestampSeconds, System.UInt64 agingSinceTimestampSeconds, System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> hotKeys, System.Collections.Generic.List<System.Byte> account, EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> joinedCommunityFundTimestampSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.DissolveState> dissolveState, System.Collections.Generic.List<Test.Models.Neuron.NeuronR13V0> followees, System.UInt64 neuronFeesE8s, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronStakeTransfer> transfer, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> knownNeuronData)
		{
			this.Id = id;
			this.Controller = controller;
			this.RecentBallots = recentBallots;
			this.KycVerified = kycVerified;
			this.NotForProfit = notForProfit;
			this.MaturityE8sEquivalent = maturityE8sEquivalent;
			this.CachedNeuronStakeE8s = cachedNeuronStakeE8s;
			this.CreatedTimestampSeconds = createdTimestampSeconds;
			this.AgingSinceTimestampSeconds = agingSinceTimestampSeconds;
			this.HotKeys = hotKeys;
			this.Account = account;
			this.JoinedCommunityFundTimestampSeconds = joinedCommunityFundTimestampSeconds;
			this.DissolveState = dissolveState;
			this.Followees = followees;
			this.NeuronFeesE8s = neuronFeesE8s;
			this.Transfer = transfer;
			this.KnownNeuronData = knownNeuronData;
		}

		public class NeuronR13V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.Int32 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.Followees F1 { get; set; }

			public NeuronR13V0(System.Int32 f0, Test.Models.Followees f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class NeuronId
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("id")]
		public System.UInt64 Id { get; set; }

		public NeuronId(System.UInt64 id)
		{
			this.Id = id;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.NeuronIdOrSubaccountTag))]
	public class NeuronIdOrSubaccount
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.NeuronIdOrSubaccountTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public NeuronIdOrSubaccount(Test.Models.NeuronIdOrSubaccountTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected NeuronIdOrSubaccount()
		{
		}

		public static Test.Models.NeuronIdOrSubaccount Subaccount(System.Collections.Generic.List<System.Byte> info)
		{
			return new Test.Models.NeuronIdOrSubaccount(Test.Models.NeuronIdOrSubaccountTag.Subaccount, info);
		}

		public static Test.Models.NeuronIdOrSubaccount NeuronId(Test.Models.NeuronId info)
		{
			return new Test.Models.NeuronIdOrSubaccount(Test.Models.NeuronIdOrSubaccountTag.NeuronId, info);
		}

		public System.Collections.Generic.List<System.Byte> AsSubaccount()
		{
			this.ValidateTag(Test.Models.NeuronIdOrSubaccountTag.Subaccount);
			return (System.Collections.Generic.List<System.Byte>)this.Value!;
		}

		public Test.Models.NeuronId AsNeuronId()
		{
			this.ValidateTag(Test.Models.NeuronIdOrSubaccountTag.NeuronId);
			return (Test.Models.NeuronId)this.Value!;
		}

		private void ValidateTag(Test.Models.NeuronIdOrSubaccountTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum NeuronIdOrSubaccountTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Subaccount")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(System.Collections.Generic.List<System.Byte>))]
		Subaccount,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("NeuronId")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NeuronId))]
		NeuronId
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class NeuronInFlightCommand
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("command")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command2> Command { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("timestamp")]
		public System.UInt64 Timestamp { get; set; }

		public NeuronInFlightCommand(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Command2> command, System.UInt64 timestamp)
		{
			this.Command = command;
			this.Timestamp = timestamp;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class NeuronInfo
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolve_delay_seconds")]
		public System.UInt64 DissolveDelaySeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("recent_ballots")]
		public System.Collections.Generic.List<Test.Models.BallotInfo> RecentBallots { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("created_timestamp_seconds")]
		public System.UInt64 CreatedTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("state")]
		public System.Int32 State { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("stake_e8s")]
		public System.UInt64 StakeE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("joined_community_fund_timestamp_seconds")]
		public EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> JoinedCommunityFundTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("retrieved_at_timestamp_seconds")]
		public System.UInt64 RetrievedAtTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("known_neuron_data")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> KnownNeuronData { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("voting_power")]
		public System.UInt64 VotingPower { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("age_seconds")]
		public System.UInt64 AgeSeconds { get; set; }

		public NeuronInfo(System.UInt64 dissolveDelaySeconds, System.Collections.Generic.List<Test.Models.BallotInfo> recentBallots, System.UInt64 createdTimestampSeconds, System.Int32 state, System.UInt64 stakeE8s, EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> joinedCommunityFundTimestampSeconds, System.UInt64 retrievedAtTimestampSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.KnownNeuronData> knownNeuronData, System.UInt64 votingPower, System.UInt64 ageSeconds)
		{
			this.DissolveDelaySeconds = dissolveDelaySeconds;
			this.RecentBallots = recentBallots;
			this.CreatedTimestampSeconds = createdTimestampSeconds;
			this.State = state;
			this.StakeE8s = stakeE8s;
			this.JoinedCommunityFundTimestampSeconds = joinedCommunityFundTimestampSeconds;
			this.RetrievedAtTimestampSeconds = retrievedAtTimestampSeconds;
			this.KnownNeuronData = knownNeuronData;
			this.VotingPower = votingPower;
			this.AgeSeconds = ageSeconds;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class NeuronStakeTransfer
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("to_subaccount")]
		public System.Collections.Generic.List<System.Byte> ToSubaccount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("neuron_stake_e8s")]
		public System.UInt64 NeuronStakeE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("from")]
		public EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> From { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("memo")]
		public System.UInt64 Memo { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("from_subaccount")]
		public System.Collections.Generic.List<System.Byte> FromSubaccount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("transfer_timestamp")]
		public System.UInt64 TransferTimestamp { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("block_height")]
		public System.UInt64 BlockHeight { get; set; }

		public NeuronStakeTransfer(System.Collections.Generic.List<System.Byte> toSubaccount, System.UInt64 neuronStakeE8s, EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> from, System.UInt64 memo, System.Collections.Generic.List<System.Byte> fromSubaccount, System.UInt64 transferTimestamp, System.UInt64 blockHeight)
		{
			this.ToSubaccount = toSubaccount;
			this.NeuronStakeE8s = neuronStakeE8s;
			this.From = from;
			this.Memo = memo;
			this.FromSubaccount = fromSubaccount;
			this.TransferTimestamp = transferTimestamp;
			this.BlockHeight = blockHeight;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class NodeProvider
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> Id { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reward_account")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> RewardAccount { get; set; }

		public NodeProvider(EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> id, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> rewardAccount)
		{
			this.Id = id;
			this.RewardAccount = rewardAccount;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.OperationTag))]
	public class Operation
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.OperationTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Operation(Test.Models.OperationTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Operation()
		{
		}

		public static Test.Models.Operation RemoveHotKey(Test.Models.RemoveHotKey info)
		{
			return new Test.Models.Operation(Test.Models.OperationTag.RemoveHotKey, info);
		}

		public static Test.Models.Operation AddHotKey(Test.Models.AddHotKey info)
		{
			return new Test.Models.Operation(Test.Models.OperationTag.AddHotKey, info);
		}

		public static Test.Models.Operation StopDissolving(Test.Models.Operation.OperationO2 info)
		{
			return new Test.Models.Operation(Test.Models.OperationTag.StopDissolving, info);
		}

		public static Test.Models.Operation StartDissolving(Test.Models.Operation.OperationO3 info)
		{
			return new Test.Models.Operation(Test.Models.OperationTag.StartDissolving, info);
		}

		public static Test.Models.Operation IncreaseDissolveDelay(Test.Models.IncreaseDissolveDelay info)
		{
			return new Test.Models.Operation(Test.Models.OperationTag.IncreaseDissolveDelay, info);
		}

		public static Test.Models.Operation JoinCommunityFund(Test.Models.Operation.OperationO5 info)
		{
			return new Test.Models.Operation(Test.Models.OperationTag.JoinCommunityFund, info);
		}

		public static Test.Models.Operation SetDissolveTimestamp(Test.Models.SetDissolveTimestamp info)
		{
			return new Test.Models.Operation(Test.Models.OperationTag.SetDissolveTimestamp, info);
		}

		public Test.Models.RemoveHotKey AsRemoveHotKey()
		{
			this.ValidateTag(Test.Models.OperationTag.RemoveHotKey);
			return (Test.Models.RemoveHotKey)this.Value!;
		}

		public Test.Models.AddHotKey AsAddHotKey()
		{
			this.ValidateTag(Test.Models.OperationTag.AddHotKey);
			return (Test.Models.AddHotKey)this.Value!;
		}

		public Test.Models.Operation.OperationO2 AsStopDissolving()
		{
			this.ValidateTag(Test.Models.OperationTag.StopDissolving);
			return (Test.Models.Operation.OperationO2)this.Value!;
		}

		public Test.Models.Operation.OperationO3 AsStartDissolving()
		{
			this.ValidateTag(Test.Models.OperationTag.StartDissolving);
			return (Test.Models.Operation.OperationO3)this.Value!;
		}

		public Test.Models.IncreaseDissolveDelay AsIncreaseDissolveDelay()
		{
			this.ValidateTag(Test.Models.OperationTag.IncreaseDissolveDelay);
			return (Test.Models.IncreaseDissolveDelay)this.Value!;
		}

		public Test.Models.Operation.OperationO5 AsJoinCommunityFund()
		{
			this.ValidateTag(Test.Models.OperationTag.JoinCommunityFund);
			return (Test.Models.Operation.OperationO5)this.Value!;
		}

		public Test.Models.SetDissolveTimestamp AsSetDissolveTimestamp()
		{
			this.ValidateTag(Test.Models.OperationTag.SetDissolveTimestamp);
			return (Test.Models.SetDissolveTimestamp)this.Value!;
		}

		private void ValidateTag(Test.Models.OperationTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}

		public class OperationO2
		{
			public OperationO2()
			{
			}
		}

		public class OperationO3
		{
			public OperationO3()
			{
			}
		}

		public class OperationO5
		{
			public OperationO5()
			{
			}
		}
	}

	public enum OperationTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("RemoveHotKey")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RemoveHotKey))]
		RemoveHotKey,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("AddHotKey")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.AddHotKey))]
		AddHotKey,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("StopDissolving")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Operation.OperationO2))]
		StopDissolving,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("StartDissolving")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Operation.OperationO3))]
		StartDissolving,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("IncreaseDissolveDelay")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.IncreaseDissolveDelay))]
		IncreaseDissolveDelay,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("JoinCommunityFund")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Operation.OperationO5))]
		JoinCommunityFund,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("SetDissolveTimestamp")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.SetDissolveTimestamp))]
		SetDissolveTimestamp
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Proposal
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("url")]
		public System.String Url { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("title")]
		public EdjCase.ICP.Candid.Models.OptionalValue<System.String> Title { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("action")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Action> Action { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("summary")]
		public System.String Summary { get; set; }

		public Proposal(System.String url, EdjCase.ICP.Candid.Models.OptionalValue<System.String> title, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Action> action, System.String summary)
		{
			this.Url = url;
			this.Title = title;
			this.Action = action;
			this.Summary = summary;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ProposalData
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("failure_reason")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceError> FailureReason { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ballots")]
		public System.Collections.Generic.List<Test.Models.ProposalData.ProposalDataR2V0> Ballots { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposal_timestamp_seconds")]
		public System.UInt64 ProposalTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reward_event_round")]
		public System.UInt64 RewardEventRound { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("failed_timestamp_seconds")]
		public System.UInt64 FailedTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reject_cost_e8s")]
		public System.UInt64 RejectCostE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("latest_tally")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Tally> LatestTally { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("decided_timestamp_seconds")]
		public System.UInt64 DecidedTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposal")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Proposal> Proposal { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposer")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Proposer { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("wait_for_quiet_state")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.WaitForQuietState> WaitForQuietState { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("executed_timestamp_seconds")]
		public System.UInt64 ExecutedTimestampSeconds { get; set; }

		public ProposalData(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceError> failureReason, System.Collections.Generic.List<Test.Models.ProposalData.ProposalDataR2V0> ballots, System.UInt64 proposalTimestampSeconds, System.UInt64 rewardEventRound, System.UInt64 failedTimestampSeconds, System.UInt64 rejectCostE8s, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Tally> latestTally, System.UInt64 decidedTimestampSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Proposal> proposal, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposer, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.WaitForQuietState> waitForQuietState, System.UInt64 executedTimestampSeconds)
		{
			this.Id = id;
			this.FailureReason = failureReason;
			this.Ballots = ballots;
			this.ProposalTimestampSeconds = proposalTimestampSeconds;
			this.RewardEventRound = rewardEventRound;
			this.FailedTimestampSeconds = failedTimestampSeconds;
			this.RejectCostE8s = rejectCostE8s;
			this.LatestTally = latestTally;
			this.DecidedTimestampSeconds = decidedTimestampSeconds;
			this.Proposal = proposal;
			this.Proposer = proposer;
			this.WaitForQuietState = waitForQuietState;
			this.ExecutedTimestampSeconds = executedTimestampSeconds;
		}

		public class ProposalDataR2V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.Ballot F1 { get; set; }

			public ProposalDataR2V0(System.UInt64 f0, Test.Models.Ballot f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class ProposalInfo
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Id { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("status")]
		public System.Int32 Status { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("topic")]
		public System.Int32 Topic { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("failure_reason")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceError> FailureReason { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("ballots")]
		public System.Collections.Generic.List<Test.Models.ProposalInfo.ProposalInfoR4V0> Ballots { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposal_timestamp_seconds")]
		public System.UInt64 ProposalTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reward_event_round")]
		public System.UInt64 RewardEventRound { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("deadline_timestamp_seconds")]
		public EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> DeadlineTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("failed_timestamp_seconds")]
		public System.UInt64 FailedTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reject_cost_e8s")]
		public System.UInt64 RejectCostE8s { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("latest_tally")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Tally> LatestTally { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reward_status")]
		public System.Int32 RewardStatus { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("decided_timestamp_seconds")]
		public System.UInt64 DecidedTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposal")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Proposal> Proposal { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposer")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Proposer { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("executed_timestamp_seconds")]
		public System.UInt64 ExecutedTimestampSeconds { get; set; }

		public ProposalInfo(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> id, System.Int32 status, System.Int32 topic, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.GovernanceError> failureReason, System.Collections.Generic.List<Test.Models.ProposalInfo.ProposalInfoR4V0> ballots, System.UInt64 proposalTimestampSeconds, System.UInt64 rewardEventRound, EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> deadlineTimestampSeconds, System.UInt64 failedTimestampSeconds, System.UInt64 rejectCostE8s, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Tally> latestTally, System.Int32 rewardStatus, System.UInt64 decidedTimestampSeconds, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Proposal> proposal, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposer, System.UInt64 executedTimestampSeconds)
		{
			this.Id = id;
			this.Status = status;
			this.Topic = topic;
			this.FailureReason = failureReason;
			this.Ballots = ballots;
			this.ProposalTimestampSeconds = proposalTimestampSeconds;
			this.RewardEventRound = rewardEventRound;
			this.DeadlineTimestampSeconds = deadlineTimestampSeconds;
			this.FailedTimestampSeconds = failedTimestampSeconds;
			this.RejectCostE8s = rejectCostE8s;
			this.LatestTally = latestTally;
			this.RewardStatus = rewardStatus;
			this.DecidedTimestampSeconds = decidedTimestampSeconds;
			this.Proposal = proposal;
			this.Proposer = proposer;
			this.ExecutedTimestampSeconds = executedTimestampSeconds;
		}

		public class ProposalInfoR4V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.UInt64 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.Ballot F1 { get; set; }

			public ProposalInfoR4V0(System.UInt64 f0, Test.Models.Ballot f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class RegisterVote
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("vote")]
		public System.Int32 Vote { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("proposal")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> Proposal { get; set; }

		public RegisterVote(System.Int32 vote, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> proposal)
		{
			this.Vote = vote;
			this.Proposal = proposal;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class RemoveHotKey
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("hot_key_to_remove")]
		public EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> HotKeyToRemove { get; set; }

		public RemoveHotKey(EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> hotKeyToRemove)
		{
			this.HotKeyToRemove = hotKeyToRemove;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.ResultTag))]
	public class Result
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.ResultTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Result(Test.Models.ResultTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result()
		{
		}

		public static Test.Models.Result Ok()
		{
			return new Test.Models.Result(Test.Models.ResultTag.Ok, null);
		}

		public static Test.Models.Result Err(Test.Models.GovernanceError info)
		{
			return new Test.Models.Result(Test.Models.ResultTag.Err, info);
		}

		public Test.Models.GovernanceError AsErr()
		{
			this.ValidateTag(Test.Models.ResultTag.Err);
			return (Test.Models.GovernanceError)this.Value!;
		}

		private void ValidateTag(Test.Models.ResultTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum ResultTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		Ok,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]
		Err
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result1Tag))]
	public class Result1
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.Result1Tag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Result1(Test.Models.Result1Tag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result1()
		{
		}

		public static Test.Models.Result1 Error(Test.Models.GovernanceError info)
		{
			return new Test.Models.Result1(Test.Models.Result1Tag.Error, info);
		}

		public static Test.Models.Result1 NeuronId(Test.Models.NeuronId info)
		{
			return new Test.Models.Result1(Test.Models.Result1Tag.NeuronId, info);
		}

		public Test.Models.GovernanceError AsError()
		{
			this.ValidateTag(Test.Models.Result1Tag.Error);
			return (Test.Models.GovernanceError)this.Value!;
		}

		public Test.Models.NeuronId AsNeuronId()
		{
			this.ValidateTag(Test.Models.Result1Tag.NeuronId);
			return (Test.Models.NeuronId)this.Value!;
		}

		private void ValidateTag(Test.Models.Result1Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result1Tag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Error")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]
		Error,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("NeuronId")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NeuronId))]
		NeuronId
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result2Tag))]
	public class Result2
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.Result2Tag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Result2(Test.Models.Result2Tag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result2()
		{
		}

		public static Test.Models.Result2 Ok(Test.Models.Neuron info)
		{
			return new Test.Models.Result2(Test.Models.Result2Tag.Ok, info);
		}

		public static Test.Models.Result2 Err(Test.Models.GovernanceError info)
		{
			return new Test.Models.Result2(Test.Models.Result2Tag.Err, info);
		}

		public Test.Models.Neuron AsOk()
		{
			this.ValidateTag(Test.Models.Result2Tag.Ok);
			return (Test.Models.Neuron)this.Value!;
		}

		public Test.Models.GovernanceError AsErr()
		{
			this.ValidateTag(Test.Models.Result2Tag.Err);
			return (Test.Models.GovernanceError)this.Value!;
		}

		private void ValidateTag(Test.Models.Result2Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result2Tag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.Neuron))]
		Ok,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]
		Err
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result3Tag))]
	public class Result3
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.Result3Tag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Result3(Test.Models.Result3Tag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result3()
		{
		}

		public static Test.Models.Result3 Ok(Test.Models.RewardNodeProviders info)
		{
			return new Test.Models.Result3(Test.Models.Result3Tag.Ok, info);
		}

		public static Test.Models.Result3 Err(Test.Models.GovernanceError info)
		{
			return new Test.Models.Result3(Test.Models.Result3Tag.Err, info);
		}

		public Test.Models.RewardNodeProviders AsOk()
		{
			this.ValidateTag(Test.Models.Result3Tag.Ok);
			return (Test.Models.RewardNodeProviders)this.Value!;
		}

		public Test.Models.GovernanceError AsErr()
		{
			this.ValidateTag(Test.Models.Result3Tag.Err);
			return (Test.Models.GovernanceError)this.Value!;
		}

		private void ValidateTag(Test.Models.Result3Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result3Tag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardNodeProviders))]
		Ok,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]
		Err
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result4Tag))]
	public class Result4
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.Result4Tag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Result4(Test.Models.Result4Tag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result4()
		{
		}

		public static Test.Models.Result4 Ok(Test.Models.NeuronInfo info)
		{
			return new Test.Models.Result4(Test.Models.Result4Tag.Ok, info);
		}

		public static Test.Models.Result4 Err(Test.Models.GovernanceError info)
		{
			return new Test.Models.Result4(Test.Models.Result4Tag.Err, info);
		}

		public Test.Models.NeuronInfo AsOk()
		{
			this.ValidateTag(Test.Models.Result4Tag.Ok);
			return (Test.Models.NeuronInfo)this.Value!;
		}

		public Test.Models.GovernanceError AsErr()
		{
			this.ValidateTag(Test.Models.Result4Tag.Err);
			return (Test.Models.GovernanceError)this.Value!;
		}

		private void ValidateTag(Test.Models.Result4Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result4Tag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NeuronInfo))]
		Ok,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]
		Err
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.Result5Tag))]
	public class Result5
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.Result5Tag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public Result5(Test.Models.Result5Tag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected Result5()
		{
		}

		public static Test.Models.Result5 Ok(Test.Models.NodeProvider info)
		{
			return new Test.Models.Result5(Test.Models.Result5Tag.Ok, info);
		}

		public static Test.Models.Result5 Err(Test.Models.GovernanceError info)
		{
			return new Test.Models.Result5(Test.Models.Result5Tag.Err, info);
		}

		public Test.Models.NodeProvider AsOk()
		{
			this.ValidateTag(Test.Models.Result5Tag.Ok);
			return (Test.Models.NodeProvider)this.Value!;
		}

		public Test.Models.GovernanceError AsErr()
		{
			this.ValidateTag(Test.Models.Result5Tag.Err);
			return (Test.Models.GovernanceError)this.Value!;
		}

		private void ValidateTag(Test.Models.Result5Tag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum Result5Tag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.NodeProvider))]
		Ok,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.GovernanceError))]
		Err
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class RewardEvent
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("day_after_genesis")]
		public System.UInt64 DayAfterGenesis { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("actual_timestamp_seconds")]
		public System.UInt64 ActualTimestampSeconds { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("distributed_e8s_equivalent")]
		public System.UInt64 DistributedE8sEquivalent { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("settled_proposals")]
		public System.Collections.Generic.List<Test.Models.NeuronId> SettledProposals { get; set; }

		public RewardEvent(System.UInt64 dayAfterGenesis, System.UInt64 actualTimestampSeconds, System.UInt64 distributedE8sEquivalent, System.Collections.Generic.List<Test.Models.NeuronId> settledProposals)
		{
			this.DayAfterGenesis = dayAfterGenesis;
			this.ActualTimestampSeconds = actualTimestampSeconds;
			this.DistributedE8sEquivalent = distributedE8sEquivalent;
			this.SettledProposals = settledProposals;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.RewardModeTag))]
	public class RewardMode
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.RewardModeTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public RewardMode(Test.Models.RewardModeTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected RewardMode()
		{
		}

		public static Test.Models.RewardMode RewardToNeuron(Test.Models.RewardToNeuron info)
		{
			return new Test.Models.RewardMode(Test.Models.RewardModeTag.RewardToNeuron, info);
		}

		public static Test.Models.RewardMode RewardToAccount(Test.Models.RewardToAccount info)
		{
			return new Test.Models.RewardMode(Test.Models.RewardModeTag.RewardToAccount, info);
		}

		public Test.Models.RewardToNeuron AsRewardToNeuron()
		{
			this.ValidateTag(Test.Models.RewardModeTag.RewardToNeuron);
			return (Test.Models.RewardToNeuron)this.Value!;
		}

		public Test.Models.RewardToAccount AsRewardToAccount()
		{
			this.ValidateTag(Test.Models.RewardModeTag.RewardToAccount);
			return (Test.Models.RewardToAccount)this.Value!;
		}

		private void ValidateTag(Test.Models.RewardModeTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum RewardModeTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("RewardToNeuron")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardToNeuron))]
		RewardToNeuron,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("RewardToAccount")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.RewardToAccount))]
		RewardToAccount
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class RewardNodeProvider
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("node_provider")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NodeProvider> NodeProvider { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reward_mode")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.RewardMode> RewardMode { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("amount_e8s")]
		public System.UInt64 AmountE8s { get; set; }

		public RewardNodeProvider(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NodeProvider> nodeProvider, EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.RewardMode> rewardMode, System.UInt64 amountE8s)
		{
			this.NodeProvider = nodeProvider;
			this.RewardMode = rewardMode;
			this.AmountE8s = amountE8s;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class RewardNodeProviders
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("use_registry_derived_rewards")]
		public EdjCase.ICP.Candid.Models.OptionalValue<System.Boolean> UseRegistryDerivedRewards { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("rewards")]
		public System.Collections.Generic.List<Test.Models.RewardNodeProvider> Rewards { get; set; }

		public RewardNodeProviders(EdjCase.ICP.Candid.Models.OptionalValue<System.Boolean> useRegistryDerivedRewards, System.Collections.Generic.List<Test.Models.RewardNodeProvider> rewards)
		{
			this.UseRegistryDerivedRewards = useRegistryDerivedRewards;
			this.Rewards = rewards;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class RewardToAccount
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("to_account")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> ToAccount { get; set; }

		public RewardToAccount(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> toAccount)
		{
			this.ToAccount = toAccount;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class RewardToNeuron
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolve_delay_seconds")]
		public System.UInt64 DissolveDelaySeconds { get; set; }

		public RewardToNeuron(System.UInt64 dissolveDelaySeconds)
		{
			this.DissolveDelaySeconds = dissolveDelaySeconds;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class SetDefaultFollowees
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("default_followees")]
		public System.Collections.Generic.List<Test.Models.SetDefaultFollowees.SetDefaultFolloweesR0V0> DefaultFollowees { get; set; }

		public SetDefaultFollowees(System.Collections.Generic.List<Test.Models.SetDefaultFollowees.SetDefaultFolloweesR0V0> defaultFollowees)
		{
			this.DefaultFollowees = defaultFollowees;
		}

		public class SetDefaultFolloweesR0V0
		{
			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("0")]
			public System.Int32 F0 { get; set; }

			[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("1")]
			public Test.Models.Followees F1 { get; set; }

			public SetDefaultFolloweesR0V0(System.Int32 f0, Test.Models.Followees f1)
			{
				this.F0 = f0;
				this.F1 = f1;
			}
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class SetDissolveTimestamp
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("dissolve_timestamp_seconds")]
		public System.UInt64 DissolveTimestampSeconds { get; set; }

		public SetDissolveTimestamp(System.UInt64 dissolveTimestampSeconds)
		{
			this.DissolveTimestampSeconds = dissolveTimestampSeconds;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Spawn
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("percentage_to_spawn")]
		public EdjCase.ICP.Candid.Models.OptionalValue<System.UInt32> PercentageToSpawn { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("new_controller")]
		public EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> NewController { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("nonce")]
		public EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> Nonce { get; set; }

		public Spawn(EdjCase.ICP.Candid.Models.OptionalValue<System.UInt32> percentageToSpawn, EdjCase.ICP.Candid.Models.OptionalValue<EdjCase.ICP.Candid.Models.Principal> newController, EdjCase.ICP.Candid.Models.OptionalValue<System.UInt64> nonce)
		{
			this.PercentageToSpawn = percentageToSpawn;
			this.NewController = newController;
			this.Nonce = nonce;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class SpawnResponse
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("created_neuron_id")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> CreatedNeuronId { get; set; }

		public SpawnResponse(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.NeuronId> createdNeuronId)
		{
			this.CreatedNeuronId = createdNeuronId;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Split
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("amount_e8s")]
		public System.UInt64 AmountE8s { get; set; }

		public Split(System.UInt64 amountE8s)
		{
			this.AmountE8s = amountE8s;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Tally
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("no")]
		public System.UInt64 No { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("yes")]
		public System.UInt64 Yes { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("total")]
		public System.UInt64 Total { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("timestamp_seconds")]
		public System.UInt64 TimestampSeconds { get; set; }

		public Tally(System.UInt64 no, System.UInt64 yes, System.UInt64 total, System.UInt64 timestampSeconds)
		{
			this.No = no;
			this.Yes = yes;
			this.Total = total;
			this.TimestampSeconds = timestampSeconds;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class UpdateNodeProvider
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("reward_account")]
		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> RewardAccount { get; set; }

		public UpdateNodeProvider(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.AccountIdentifier> rewardAccount)
		{
			this.RewardAccount = rewardAccount;
		}
	}
}

using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class WaitForQuietState
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("current_deadline_timestamp_seconds")]
		public System.UInt64 CurrentDeadlineTimestampSeconds { get; set; }

		public WaitForQuietState(System.UInt64 currentDeadlineTimestampSeconds)
		{
			this.CurrentDeadlineTimestampSeconds = currentDeadlineTimestampSeconds;
		}
	}
}
