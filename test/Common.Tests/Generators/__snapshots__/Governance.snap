{
  "Name": "GovernanceApiClient",
  "ClientFile": "using EdjCase.ICP.Agent.Agents;\nusing EdjCase.ICP.Agent.Responses;\nusing EdjCase.ICP.Agent.Auth;\nusing EdjCase.ICP.Candid.Models;\nusing Test.Models;\n\nnamespace Test\n{\n\tpublic class GovernanceApiClient\n\t{\n\t\tpublic IAgent Agent { get; }\n\t\tpublic Principal CanisterId { get; }\n\t\tpublic GovernanceApiClient(IAgent agent, Principal canisterId)\n\t\t{\n\t\t\tthis.Agent = agent ?? throw new ArgumentNullException(nameof(agent));\n\t\t\tthis.CanisterId = canisterId ?? throw new ArgumentNullException(nameof(canisterId));\n\t\t}\n\t\tpublic async Task<Result> ClaimGtcNeuronsAsync(EdjCase.ICP.Candid.Models.Principal arg0, List<NeuronId> arg1, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"claim_gtc_neurons\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.Models.Principal>(arg0);\n\t\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<List<NeuronId>>(arg1);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg arg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tResult r0 = arg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ClaimOrRefreshNeuronFromAccountResponse> ClaimOrRefreshNeuronFromAccountAsync(ClaimOrRefreshNeuronFromAccount arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"claim_or_refresh_neuron_from_account\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ClaimOrRefreshNeuronFromAccount>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg arg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tClaimOrRefreshNeuronFromAccountResponse r0 = arg.Values[0].ToObject<ClaimOrRefreshNeuronFromAccountResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<string> GetBuildMetadataAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_build_metadata\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tstring r0 = reply.Arg.Values[0].ToObject<string>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result2> GetFullNeuronAsync(ulong arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_full_neuron\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ulong>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult2 r0 = reply.Arg.Values[0].ToObject<Result2>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result2> GetFullNeuronByIdOrSubaccountAsync(NeuronIdOrSubaccount arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_full_neuron_by_id_or_subaccount\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<NeuronIdOrSubaccount>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult2 r0 = reply.Arg.Values[0].ToObject<Result2>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result3> GetMonthlyNodeProviderRewardsAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_monthly_node_provider_rewards\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg arg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tResult3 r0 = arg.Values[0].ToObject<Result3>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<NetworkEconomics> GetNetworkEconomicsParametersAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_network_economics_parameters\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tNetworkEconomics r0 = reply.Arg.Values[0].ToObject<NetworkEconomics>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<List<ulong>> GetNeuronIdsAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_neuron_ids\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tList<ulong> r0 = reply.Arg.Values[0].ToObject<List<ulong>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result4> GetNeuronInfoAsync(ulong arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_neuron_info\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ulong>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult4 r0 = reply.Arg.Values[0].ToObject<Result4>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result4> GetNeuronInfoByIdOrSubaccountAsync(NeuronIdOrSubaccount arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_neuron_info_by_id_or_subaccount\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<NeuronIdOrSubaccount>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult4 r0 = reply.Arg.Values[0].ToObject<Result4>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result5> GetNodeProviderByCallerAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_node_provider_by_caller\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.Null();\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tResult5 r0 = reply.Arg.Values[0].ToObject<Result5>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<List<ProposalInfo>> GetPendingProposalsAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_pending_proposals\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tList<ProposalInfo> r0 = reply.Arg.Values[0].ToObject<List<ProposalInfo>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ProposalInfo?> GetProposalInfoAsync(ulong arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"get_proposal_info\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ulong>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tProposalInfo? r0 = reply.Arg.Values[0].ToObjectOrDefault<ProposalInfo?>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListKnownNeuronsResponse> ListKnownNeuronsAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"list_known_neurons\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tListKnownNeuronsResponse r0 = reply.Arg.Values[0].ToObject<ListKnownNeuronsResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListNeuronsResponse> ListNeuronsAsync(ListNeurons arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"list_neurons\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ListNeurons>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tListNeuronsResponse r0 = reply.Arg.Values[0].ToObject<ListNeuronsResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListNodeProvidersResponse> ListNodeProvidersAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"list_node_providers\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tListNodeProvidersResponse r0 = reply.Arg.Values[0].ToObject<ListNodeProvidersResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ListProposalInfoResponse> ListProposalsAsync(ListProposalInfo arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"list_proposals\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ListProposalInfo>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tListProposalInfoResponse r0 = reply.Arg.Values[0].ToObject<ListProposalInfoResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<ManageNeuronResponse> ManageNeuronAsync(ManageNeuron arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"manage_neuron\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<ManageNeuron>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg arg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tManageNeuronResponse r0 = arg.Values[0].ToObject<ManageNeuronResponse>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result> TransferGtcNeuronAsync(NeuronId arg0, NeuronId arg1, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"transfer_gtc_neuron\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<NeuronId>(arg0);\n\t\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<NeuronId>(arg1);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg arg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tResult r0 = arg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Result> UpdateNodeProviderAsync(UpdateNodeProvider arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"update_node_provider\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<UpdateNodeProvider>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tCandidArg arg = await this.Agent.CallAndWaitAsync(this.CanisterId, method, arg, null, identityOverride);\n\t\t\tResult r0 = arg.Values[0].ToObject<Result>();\n\t\t\treturn (r0);\n\t\t}\n\t}\n}\n",
  "DataModelFiles": [
    {
      "Item1": "AccountIdentifier",
      "Item2": "namespace Test.Models\n{\n\tpublic class AccountIdentifier\n\t{\n\t\tpublic List<byte> Hash { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Action",
      "Item2": "namespace Test.Models\n{\n\tpublic enum ActionType\n\t{\n\t\tRegisterKnownNeuron,\n\t\tManageNeuron,\n\t\tExecuteNnsFunction,\n\t\tRewardNodeProvider,\n\t\tSetDefaultFollowees,\n\t\tRewardNodeProviders,\n\t\tManageNetworkEconomics,\n\t\tApproveGenesisKyc,\n\t\tAddOrRemoveNodeProvider,\n\t\tMotion,\n\t}\n\tpublic class Action : EdjCase.ICP.Candid.CandidVariantValueBase<ActionType>\n\t{\n\t\tpublic Action(ActionType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Action()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Action RegisterKnownNeuron(KnownNeuron info)\n\t\t{\n\t\t\treturn new Action(ActionType.RegisterKnownNeuron, info);\n\t\t}\n\t\t\n\t\tpublic KnownNeuron AsRegisterKnownNeuron()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.RegisterKnownNeuron);\n\t\t\treturn (KnownNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action ManageNeuron(ManageNeuron info)\n\t\t{\n\t\t\treturn new Action(ActionType.ManageNeuron, info);\n\t\t}\n\t\t\n\t\tpublic ManageNeuron AsManageNeuron()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.ManageNeuron);\n\t\t\treturn (ManageNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action ExecuteNnsFunction(ExecuteNnsFunction info)\n\t\t{\n\t\t\treturn new Action(ActionType.ExecuteNnsFunction, info);\n\t\t}\n\t\t\n\t\tpublic ExecuteNnsFunction AsExecuteNnsFunction()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.ExecuteNnsFunction);\n\t\t\treturn (ExecuteNnsFunction)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action RewardNodeProvider(RewardNodeProvider info)\n\t\t{\n\t\t\treturn new Action(ActionType.RewardNodeProvider, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProvider AsRewardNodeProvider()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.RewardNodeProvider);\n\t\t\treturn (RewardNodeProvider)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action SetDefaultFollowees(SetDefaultFollowees info)\n\t\t{\n\t\t\treturn new Action(ActionType.SetDefaultFollowees, info);\n\t\t}\n\t\t\n\t\tpublic SetDefaultFollowees AsSetDefaultFollowees()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.SetDefaultFollowees);\n\t\t\treturn (SetDefaultFollowees)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action RewardNodeProviders(RewardNodeProviders info)\n\t\t{\n\t\t\treturn new Action(ActionType.RewardNodeProviders, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProviders AsRewardNodeProviders()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.RewardNodeProviders);\n\t\t\treturn (RewardNodeProviders)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action ManageNetworkEconomics(NetworkEconomics info)\n\t\t{\n\t\t\treturn new Action(ActionType.ManageNetworkEconomics, info);\n\t\t}\n\t\t\n\t\tpublic NetworkEconomics AsManageNetworkEconomics()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.ManageNetworkEconomics);\n\t\t\treturn (NetworkEconomics)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action ApproveGenesisKyc(ApproveGenesisKyc info)\n\t\t{\n\t\t\treturn new Action(ActionType.ApproveGenesisKyc, info);\n\t\t}\n\t\t\n\t\tpublic ApproveGenesisKyc AsApproveGenesisKyc()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.ApproveGenesisKyc);\n\t\t\treturn (ApproveGenesisKyc)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action AddOrRemoveNodeProvider(AddOrRemoveNodeProvider info)\n\t\t{\n\t\t\treturn new Action(ActionType.AddOrRemoveNodeProvider, info);\n\t\t}\n\t\t\n\t\tpublic AddOrRemoveNodeProvider AsAddOrRemoveNodeProvider()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.AddOrRemoveNodeProvider);\n\t\t\treturn (AddOrRemoveNodeProvider)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Action Motion(Motion info)\n\t\t{\n\t\t\treturn new Action(ActionType.Motion, info);\n\t\t}\n\t\t\n\t\tpublic Motion AsMotion()\n\t\t{\n\t\t\tthis.ValidateType(ActionType.Motion);\n\t\t\treturn (Motion)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "AddHotKey",
      "Item2": "namespace Test.Models\n{\n\tpublic class AddHotKey\n\t{\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? NewHotKey { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "AddOrRemoveNodeProvider",
      "Item2": "namespace Test.Models\n{\n\tpublic class AddOrRemoveNodeProvider\n\t{\n\t\tpublic Change? Change { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Amount",
      "Item2": "namespace Test.Models\n{\n\tpublic class Amount\n\t{\n\t\tpublic ulong E8s { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ApproveGenesisKyc",
      "Item2": "namespace Test.Models\n{\n\tpublic class ApproveGenesisKyc\n\t{\n\t\tpublic List<EdjCase.ICP.Candid.Models.Principal> Principals { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Ballot",
      "Item2": "namespace Test.Models\n{\n\tpublic class Ballot\n\t{\n\t\tpublic int Vote { get; set; }\n\t\t\n\t\tpublic ulong VotingPower { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "BallotInfo",
      "Item2": "namespace Test.Models\n{\n\tpublic class BallotInfo\n\t{\n\t\tpublic int Vote { get; set; }\n\t\t\n\t\tpublic NeuronId? ProposalId { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "By",
      "Item2": "namespace Test.Models\n{\n\tpublic enum ByType\n\t{\n\t\tNeuronIdOrSubaccount,\n\t\tMemoAndController,\n\t\tMemo,\n\t}\n\tpublic class By : EdjCase.ICP.Candid.CandidVariantValueBase<ByType>\n\t{\n\t\tpublic By(ByType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected By()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static By NeuronIdOrSubaccount(NeuronIdOrSubaccountInfo info)\n\t\t{\n\t\t\treturn new By(ByType.NeuronIdOrSubaccount, info);\n\t\t}\n\t\t\n\t\tpublic NeuronIdOrSubaccountInfo AsNeuronIdOrSubaccount()\n\t\t{\n\t\t\tthis.ValidateType(ByType.NeuronIdOrSubaccount);\n\t\t\treturn (NeuronIdOrSubaccountInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static By MemoAndController(ClaimOrRefreshNeuronFromAccount info)\n\t\t{\n\t\t\treturn new By(ByType.MemoAndController, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefreshNeuronFromAccount AsMemoAndController()\n\t\t{\n\t\t\tthis.ValidateType(ByType.MemoAndController);\n\t\t\treturn (ClaimOrRefreshNeuronFromAccount)this.value!;\n\t\t}\n\t\t\n\t\tpublic static By Memo(ulong info)\n\t\t{\n\t\t\treturn new By(ByType.Memo, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsMemo()\n\t\t{\n\t\t\tthis.ValidateType(ByType.Memo);\n\t\t\treturn (ulong)this.value!;\n\t\t}\n\t\t\n\t\tpublic class NeuronIdOrSubaccountInfo\n\t\t{\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "Change",
      "Item2": "namespace Test.Models\n{\n\tpublic enum ChangeType\n\t{\n\t\tToRemove,\n\t\tToAdd,\n\t}\n\tpublic class Change : EdjCase.ICP.Candid.CandidVariantValueBase<ChangeType>\n\t{\n\t\tpublic Change(ChangeType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Change()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Change ToRemove(NodeProvider info)\n\t\t{\n\t\t\treturn new Change(ChangeType.ToRemove, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsToRemove()\n\t\t{\n\t\t\tthis.ValidateType(ChangeType.ToRemove);\n\t\t\treturn (NodeProvider)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Change ToAdd(NodeProvider info)\n\t\t{\n\t\t\treturn new Change(ChangeType.ToAdd, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsToAdd()\n\t\t{\n\t\t\tthis.ValidateType(ChangeType.ToAdd);\n\t\t\treturn (NodeProvider)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ClaimOrRefresh",
      "Item2": "namespace Test.Models\n{\n\tpublic class ClaimOrRefresh\n\t{\n\t\tpublic By? By { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ClaimOrRefreshNeuronFromAccount",
      "Item2": "namespace Test.Models\n{\n\tpublic class ClaimOrRefreshNeuronFromAccount\n\t{\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? Controller { get; set; }\n\t\t\n\t\tpublic ulong Memo { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ClaimOrRefreshNeuronFromAccountResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class ClaimOrRefreshNeuronFromAccountResponse\n\t{\n\t\tpublic Result1? Result { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ClaimOrRefreshResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class ClaimOrRefreshResponse\n\t{\n\t\tpublic NeuronId? RefreshedNeuronId { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Command",
      "Item2": "namespace Test.Models\n{\n\tpublic enum CommandType\n\t{\n\t\tSpawn,\n\t\tSplit,\n\t\tFollow,\n\t\tClaimOrRefresh,\n\t\tConfigure,\n\t\tRegisterVote,\n\t\tMerge,\n\t\tDisburseToNeuron,\n\t\tMakeProposal,\n\t\tMergeMaturity,\n\t\tDisburse,\n\t}\n\tpublic class Command : EdjCase.ICP.Candid.CandidVariantValueBase<CommandType>\n\t{\n\t\tpublic Command(CommandType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Command()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command Spawn(Spawn info)\n\t\t{\n\t\t\treturn new Command(CommandType.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic Spawn AsSpawn()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Spawn);\n\t\t\treturn (Spawn)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Split(Split info)\n\t\t{\n\t\t\treturn new Command(CommandType.Split, info);\n\t\t}\n\t\t\n\t\tpublic Split AsSplit()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Split);\n\t\t\treturn (Split)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Follow(Follow info)\n\t\t{\n\t\t\treturn new Command(CommandType.Follow, info);\n\t\t}\n\t\t\n\t\tpublic Follow AsFollow()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Follow);\n\t\t\treturn (Follow)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command ClaimOrRefresh(ClaimOrRefresh info)\n\t\t{\n\t\t\treturn new Command(CommandType.ClaimOrRefresh, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefresh AsClaimOrRefresh()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.ClaimOrRefresh);\n\t\t\treturn (ClaimOrRefresh)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Configure(Configure info)\n\t\t{\n\t\t\treturn new Command(CommandType.Configure, info);\n\t\t}\n\t\t\n\t\tpublic Configure AsConfigure()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Configure);\n\t\t\treturn (Configure)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command RegisterVote(RegisterVote info)\n\t\t{\n\t\t\treturn new Command(CommandType.RegisterVote, info);\n\t\t}\n\t\t\n\t\tpublic RegisterVote AsRegisterVote()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.RegisterVote);\n\t\t\treturn (RegisterVote)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Merge(Merge info)\n\t\t{\n\t\t\treturn new Command(CommandType.Merge, info);\n\t\t}\n\t\t\n\t\tpublic Merge AsMerge()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Merge);\n\t\t\treturn (Merge)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command DisburseToNeuron(DisburseToNeuron info)\n\t\t{\n\t\t\treturn new Command(CommandType.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic DisburseToNeuron AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.DisburseToNeuron);\n\t\t\treturn (DisburseToNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command MakeProposal(Proposal info)\n\t\t{\n\t\t\treturn new Command(CommandType.MakeProposal, info);\n\t\t}\n\t\t\n\t\tpublic Proposal AsMakeProposal()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.MakeProposal);\n\t\t\treturn (Proposal)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command MergeMaturity(MergeMaturity info)\n\t\t{\n\t\t\treturn new Command(CommandType.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturity AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.MergeMaturity);\n\t\t\treturn (MergeMaturity)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command Disburse(Disburse info)\n\t\t{\n\t\t\treturn new Command(CommandType.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic Disburse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateType(CommandType.Disburse);\n\t\t\treturn (Disburse)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Command1",
      "Item2": "namespace Test.Models\n{\n\tpublic enum Command1Type\n\t{\n\t\tError,\n\t\tSpawn,\n\t\tSplit,\n\t\tFollow,\n\t\tClaimOrRefresh,\n\t\tConfigure,\n\t\tRegisterVote,\n\t\tMerge,\n\t\tDisburseToNeuron,\n\t\tMakeProposal,\n\t\tMergeMaturity,\n\t\tDisburse,\n\t}\n\tpublic class Command1 : EdjCase.ICP.Candid.CandidVariantValueBase<Command1Type>\n\t{\n\t\tpublic Command1(Command1Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Command1()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command1 Error(GovernanceError info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.Error, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsError()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.Error);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Spawn(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsSpawn()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.Spawn);\n\t\t\treturn (SpawnResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Split(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.Split, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsSplit()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.Split);\n\t\t\treturn (SpawnResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Follow(FollowInfo info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.Follow, info);\n\t\t}\n\t\t\n\t\tpublic FollowInfo AsFollow()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.Follow);\n\t\t\treturn (FollowInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 ClaimOrRefresh(ClaimOrRefreshResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.ClaimOrRefresh, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefreshResponse AsClaimOrRefresh()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.ClaimOrRefresh);\n\t\t\treturn (ClaimOrRefreshResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Configure(ConfigureInfo info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.Configure, info);\n\t\t}\n\t\t\n\t\tpublic ConfigureInfo AsConfigure()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.Configure);\n\t\t\treturn (ConfigureInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 RegisterVote(RegisterVoteInfo info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.RegisterVote, info);\n\t\t}\n\t\t\n\t\tpublic RegisterVoteInfo AsRegisterVote()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.RegisterVote);\n\t\t\treturn (RegisterVoteInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Merge(MergeInfo info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.Merge, info);\n\t\t}\n\t\t\n\t\tpublic MergeInfo AsMerge()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.Merge);\n\t\t\treturn (MergeInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 DisburseToNeuron(SpawnResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic SpawnResponse AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.DisburseToNeuron);\n\t\t\treturn (SpawnResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 MakeProposal(MakeProposalResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.MakeProposal, info);\n\t\t}\n\t\t\n\t\tpublic MakeProposalResponse AsMakeProposal()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.MakeProposal);\n\t\t\treturn (MakeProposalResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 MergeMaturity(MergeMaturityResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturityResponse AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.MergeMaturity);\n\t\t\treturn (MergeMaturityResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command1 Disburse(DisburseResponse info)\n\t\t{\n\t\t\treturn new Command1(Command1Type.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic DisburseResponse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateType(Command1Type.Disburse);\n\t\t\treturn (DisburseResponse)this.value!;\n\t\t}\n\t\t\n\t\tpublic class FollowInfo\n\t\t{\n\t\t}\n\t\tpublic class ConfigureInfo\n\t\t{\n\t\t}\n\t\tpublic class RegisterVoteInfo\n\t\t{\n\t\t}\n\t\tpublic class MergeInfo\n\t\t{\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "Command2",
      "Item2": "namespace Test.Models\n{\n\tpublic enum Command2Type\n\t{\n\t\tSpawn,\n\t\tSplit,\n\t\tConfigure,\n\t\tMerge,\n\t\tDisburseToNeuron,\n\t\tClaimOrRefreshNeuron,\n\t\tMergeMaturity,\n\t\tDisburse,\n\t}\n\tpublic class Command2 : EdjCase.ICP.Candid.CandidVariantValueBase<Command2Type>\n\t{\n\t\tpublic Command2(Command2Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Command2()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Command2 Spawn(Spawn info)\n\t\t{\n\t\t\treturn new Command2(Command2Type.Spawn, info);\n\t\t}\n\t\t\n\t\tpublic Spawn AsSpawn()\n\t\t{\n\t\t\tthis.ValidateType(Command2Type.Spawn);\n\t\t\treturn (Spawn)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 Split(Split info)\n\t\t{\n\t\t\treturn new Command2(Command2Type.Split, info);\n\t\t}\n\t\t\n\t\tpublic Split AsSplit()\n\t\t{\n\t\t\tthis.ValidateType(Command2Type.Split);\n\t\t\treturn (Split)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 Configure(Configure info)\n\t\t{\n\t\t\treturn new Command2(Command2Type.Configure, info);\n\t\t}\n\t\t\n\t\tpublic Configure AsConfigure()\n\t\t{\n\t\t\tthis.ValidateType(Command2Type.Configure);\n\t\t\treturn (Configure)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 Merge(Merge info)\n\t\t{\n\t\t\treturn new Command2(Command2Type.Merge, info);\n\t\t}\n\t\t\n\t\tpublic Merge AsMerge()\n\t\t{\n\t\t\tthis.ValidateType(Command2Type.Merge);\n\t\t\treturn (Merge)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 DisburseToNeuron(DisburseToNeuron info)\n\t\t{\n\t\t\treturn new Command2(Command2Type.DisburseToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic DisburseToNeuron AsDisburseToNeuron()\n\t\t{\n\t\t\tthis.ValidateType(Command2Type.DisburseToNeuron);\n\t\t\treturn (DisburseToNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 ClaimOrRefreshNeuron(ClaimOrRefresh info)\n\t\t{\n\t\t\treturn new Command2(Command2Type.ClaimOrRefreshNeuron, info);\n\t\t}\n\t\t\n\t\tpublic ClaimOrRefresh AsClaimOrRefreshNeuron()\n\t\t{\n\t\t\tthis.ValidateType(Command2Type.ClaimOrRefreshNeuron);\n\t\t\treturn (ClaimOrRefresh)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 MergeMaturity(MergeMaturity info)\n\t\t{\n\t\t\treturn new Command2(Command2Type.MergeMaturity, info);\n\t\t}\n\t\t\n\t\tpublic MergeMaturity AsMergeMaturity()\n\t\t{\n\t\t\tthis.ValidateType(Command2Type.MergeMaturity);\n\t\t\treturn (MergeMaturity)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Command2 Disburse(Disburse info)\n\t\t{\n\t\t\treturn new Command2(Command2Type.Disburse, info);\n\t\t}\n\t\t\n\t\tpublic Disburse AsDisburse()\n\t\t{\n\t\t\tthis.ValidateType(Command2Type.Disburse);\n\t\t\treturn (Disburse)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Configure",
      "Item2": "namespace Test.Models\n{\n\tpublic class Configure\n\t{\n\t\tpublic Operation? Operation { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Disburse",
      "Item2": "namespace Test.Models\n{\n\tpublic class Disburse\n\t{\n\t\tpublic AccountIdentifier? ToAccount { get; set; }\n\t\t\n\t\tpublic Amount? Amount { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "DisburseResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class DisburseResponse\n\t{\n\t\tpublic ulong TransferBlockHeight { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "DisburseToNeuron",
      "Item2": "namespace Test.Models\n{\n\tpublic class DisburseToNeuron\n\t{\n\t\tpublic ulong DissolveDelaySeconds { get; set; }\n\t\t\n\t\tpublic bool KycVerified { get; set; }\n\t\t\n\t\tpublic ulong AmountE8s { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? NewController { get; set; }\n\t\t\n\t\tpublic ulong Nonce { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "DissolveState",
      "Item2": "namespace Test.Models\n{\n\tpublic enum DissolveStateType\n\t{\n\t\tDissolveDelaySeconds,\n\t\tWhenDissolvedTimestampSeconds,\n\t}\n\tpublic class DissolveState : EdjCase.ICP.Candid.CandidVariantValueBase<DissolveStateType>\n\t{\n\t\tpublic DissolveState(DissolveStateType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected DissolveState()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static DissolveState DissolveDelaySeconds(ulong info)\n\t\t{\n\t\t\treturn new DissolveState(DissolveStateType.DissolveDelaySeconds, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsDissolveDelaySeconds()\n\t\t{\n\t\t\tthis.ValidateType(DissolveStateType.DissolveDelaySeconds);\n\t\t\treturn (ulong)this.value!;\n\t\t}\n\t\t\n\t\tpublic static DissolveState WhenDissolvedTimestampSeconds(ulong info)\n\t\t{\n\t\t\treturn new DissolveState(DissolveStateType.WhenDissolvedTimestampSeconds, info);\n\t\t}\n\t\t\n\t\tpublic ulong AsWhenDissolvedTimestampSeconds()\n\t\t{\n\t\t\tthis.ValidateType(DissolveStateType.WhenDissolvedTimestampSeconds);\n\t\t\treturn (ulong)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ExecuteNnsFunction",
      "Item2": "namespace Test.Models\n{\n\tpublic class ExecuteNnsFunction\n\t{\n\t\tpublic int NnsFunction { get; set; }\n\t\t\n\t\tpublic List<byte> Payload { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Follow",
      "Item2": "namespace Test.Models\n{\n\tpublic class Follow\n\t{\n\t\tpublic int Topic { get; set; }\n\t\t\n\t\tpublic List<NeuronId> Followees { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Followees",
      "Item2": "namespace Test.Models\n{\n\tpublic class Followees\n\t{\n\t\tpublic List<NeuronId> Followees_ { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Governance",
      "Item2": "namespace Test.Models\n{\n\tpublic class Governance\n\t{\n\t\tpublic List<DefaultFolloweesInfo> DefaultFollowees { get; set; }\n\t\t\n\t\tpublic ulong WaitForQuietThresholdSeconds { get; set; }\n\t\t\n\t\tpublic GovernanceCachedMetrics? Metrics { get; set; }\n\t\t\n\t\tpublic List<NodeProvider> NodeProviders { get; set; }\n\t\t\n\t\tpublic NetworkEconomics? Economics { get; set; }\n\t\t\n\t\tpublic RewardEvent? LatestRewardEvent { get; set; }\n\t\t\n\t\tpublic List<NeuronStakeTransfer> ToClaimTransfers { get; set; }\n\t\t\n\t\tpublic ulong ShortVotingPeriodSeconds { get; set; }\n\t\t\n\t\tpublic List<ProposalsInfo> Proposals { get; set; }\n\t\t\n\t\tpublic List<InFlightCommandsInfo> InFlightCommands { get; set; }\n\t\t\n\t\tpublic List<NeuronsInfo> Neurons { get; set; }\n\t\t\n\t\tpublic ulong GenesisTimestampSeconds { get; set; }\n\t\t\n\t\tpublic class DefaultFolloweesInfo\n\t\t{\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class ProposalsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic ProposalData F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class InFlightCommandsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic NeuronInFlightCommand F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class NeuronsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic Neuron F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "GovernanceCachedMetrics",
      "Item2": "namespace Test.Models\n{\n\tpublic class GovernanceCachedMetrics\n\t{\n\t\tpublic List<NotDissolvingNeuronsE8sBucketsInfo> NotDissolvingNeuronsE8sBuckets { get; set; }\n\t\t\n\t\tpublic ulong GarbageCollectableNeuronsCount { get; set; }\n\t\t\n\t\tpublic ulong NeuronsWithInvalidStakeCount { get; set; }\n\t\t\n\t\tpublic List<NotDissolvingNeuronsCountBucketsInfo> NotDissolvingNeuronsCountBuckets { get; set; }\n\t\t\n\t\tpublic ulong TotalSupplyIcp { get; set; }\n\t\t\n\t\tpublic ulong NeuronsWithLessThan6MonthsDissolveDelayCount { get; set; }\n\t\t\n\t\tpublic ulong DissolvedNeuronsCount { get; set; }\n\t\t\n\t\tpublic ulong TotalStakedE8s { get; set; }\n\t\t\n\t\tpublic ulong NotDissolvingNeuronsCount { get; set; }\n\t\t\n\t\tpublic ulong DissolvedNeuronsE8s { get; set; }\n\t\t\n\t\tpublic ulong NeuronsWithLessThan6MonthsDissolveDelayE8s { get; set; }\n\t\t\n\t\tpublic List<DissolvingNeuronsCountBucketsInfo> DissolvingNeuronsCountBuckets { get; set; }\n\t\t\n\t\tpublic ulong DissolvingNeuronsCount { get; set; }\n\t\t\n\t\tpublic List<DissolvingNeuronsE8sBucketsInfo> DissolvingNeuronsE8sBuckets { get; set; }\n\t\t\n\t\tpublic ulong CommunityFundTotalStakedE8s { get; set; }\n\t\t\n\t\tpublic ulong TimestampSeconds { get; set; }\n\t\t\n\t\tpublic class NotDissolvingNeuronsE8sBucketsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic double F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class NotDissolvingNeuronsCountBucketsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic ulong F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class DissolvingNeuronsCountBucketsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic ulong F1 { get; set; }\n\t\t\t\n\t\t}\n\t\tpublic class DissolvingNeuronsE8sBucketsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic double F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "GovernanceError",
      "Item2": "namespace Test.Models\n{\n\tpublic class GovernanceError\n\t{\n\t\tpublic string ErrorMessage { get; set; }\n\t\t\n\t\tpublic int ErrorType { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "IncreaseDissolveDelay",
      "Item2": "namespace Test.Models\n{\n\tpublic class IncreaseDissolveDelay\n\t{\n\t\tpublic uint AdditionalDissolveDelaySeconds { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "KnownNeuron",
      "Item2": "namespace Test.Models\n{\n\tpublic class KnownNeuron\n\t{\n\t\tpublic NeuronId? Id { get; set; }\n\t\t\n\t\tpublic KnownNeuronData? KnownNeuronData { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "KnownNeuronData",
      "Item2": "namespace Test.Models\n{\n\tpublic class KnownNeuronData\n\t{\n\t\tpublic string Name { get; set; }\n\t\t\n\t\tpublic string? Description { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ListKnownNeuronsResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class ListKnownNeuronsResponse\n\t{\n\t\tpublic List<KnownNeuron> KnownNeurons { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ListNeurons",
      "Item2": "namespace Test.Models\n{\n\tpublic class ListNeurons\n\t{\n\t\tpublic List<ulong> NeuronIds { get; set; }\n\t\t\n\t\tpublic bool IncludeNeuronsReadableByCaller { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ListNeuronsResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class ListNeuronsResponse\n\t{\n\t\tpublic List<NeuronInfosInfo> NeuronInfos { get; set; }\n\t\t\n\t\tpublic List<Neuron> FullNeurons { get; set; }\n\t\t\n\t\tpublic class NeuronInfosInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic NeuronInfo F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "ListNodeProvidersResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class ListNodeProvidersResponse\n\t{\n\t\tpublic List<NodeProvider> NodeProviders { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ListProposalInfo",
      "Item2": "namespace Test.Models\n{\n\tpublic class ListProposalInfo\n\t{\n\t\tpublic List<int> IncludeRewardStatus { get; set; }\n\t\t\n\t\tpublic NeuronId? BeforeProposal { get; set; }\n\t\t\n\t\tpublic uint Limit { get; set; }\n\t\t\n\t\tpublic List<int> ExcludeTopic { get; set; }\n\t\t\n\t\tpublic List<int> IncludeStatus { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ListProposalInfoResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class ListProposalInfoResponse\n\t{\n\t\tpublic List<ProposalInfo> ProposalInfo { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "MakeProposalResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class MakeProposalResponse\n\t{\n\t\tpublic NeuronId? ProposalId { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ManageNeuron",
      "Item2": "namespace Test.Models\n{\n\tpublic class ManageNeuron\n\t{\n\t\tpublic NeuronId? Id { get; set; }\n\t\t\n\t\tpublic Command? Command { get; set; }\n\t\t\n\t\tpublic NeuronIdOrSubaccount? NeuronIdOrSubaccount { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ManageNeuronResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class ManageNeuronResponse\n\t{\n\t\tpublic Command1? Command { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Merge",
      "Item2": "namespace Test.Models\n{\n\tpublic class Merge\n\t{\n\t\tpublic NeuronId? SourceNeuronId { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "MergeMaturity",
      "Item2": "namespace Test.Models\n{\n\tpublic class MergeMaturity\n\t{\n\t\tpublic uint PercentageToMerge { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "MergeMaturityResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class MergeMaturityResponse\n\t{\n\t\tpublic ulong MergedMaturityE8s { get; set; }\n\t\t\n\t\tpublic ulong NewStakeE8s { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Motion",
      "Item2": "namespace Test.Models\n{\n\tpublic class Motion\n\t{\n\t\tpublic string MotionText { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "NetworkEconomics",
      "Item2": "namespace Test.Models\n{\n\tpublic class NetworkEconomics\n\t{\n\t\tpublic ulong NeuronMinimumStakeE8s { get; set; }\n\t\t\n\t\tpublic uint MaxProposalsToKeepPerTopic { get; set; }\n\t\t\n\t\tpublic ulong NeuronManagementFeePerProposalE8s { get; set; }\n\t\t\n\t\tpublic ulong RejectCostE8s { get; set; }\n\t\t\n\t\tpublic ulong TransactionFeeE8s { get; set; }\n\t\t\n\t\tpublic ulong NeuronSpawnDissolveDelaySeconds { get; set; }\n\t\t\n\t\tpublic ulong MinimumIcpXdrRate { get; set; }\n\t\t\n\t\tpublic ulong MaximumNodeProviderRewardsE8s { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Neuron",
      "Item2": "namespace Test.Models\n{\n\tpublic class Neuron\n\t{\n\t\tpublic NeuronId? Id { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? Controller { get; set; }\n\t\t\n\t\tpublic List<BallotInfo> RecentBallots { get; set; }\n\t\t\n\t\tpublic bool KycVerified { get; set; }\n\t\t\n\t\tpublic bool NotForProfit { get; set; }\n\t\t\n\t\tpublic ulong MaturityE8sEquivalent { get; set; }\n\t\t\n\t\tpublic ulong CachedNeuronStakeE8s { get; set; }\n\t\t\n\t\tpublic ulong CreatedTimestampSeconds { get; set; }\n\t\t\n\t\tpublic ulong AgingSinceTimestampSeconds { get; set; }\n\t\t\n\t\tpublic List<EdjCase.ICP.Candid.Models.Principal> HotKeys { get; set; }\n\t\t\n\t\tpublic List<byte> Account { get; set; }\n\t\t\n\t\tpublic ulong? JoinedCommunityFundTimestampSeconds { get; set; }\n\t\t\n\t\tpublic DissolveState? DissolveState { get; set; }\n\t\t\n\t\tpublic List<FolloweesInfo> Followees { get; set; }\n\t\t\n\t\tpublic ulong NeuronFeesE8s { get; set; }\n\t\t\n\t\tpublic NeuronStakeTransfer? Transfer { get; set; }\n\t\t\n\t\tpublic KnownNeuronData? KnownNeuronData { get; set; }\n\t\t\n\t\tpublic class FolloweesInfo\n\t\t{\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "NeuronId",
      "Item2": "namespace Test.Models\n{\n\tpublic class NeuronId\n\t{\n\t\tpublic ulong Id { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "NeuronIdOrSubaccount",
      "Item2": "namespace Test.Models\n{\n\tpublic enum NeuronIdOrSubaccountType\n\t{\n\t\tSubaccount,\n\t\tNeuronId,\n\t}\n\tpublic class NeuronIdOrSubaccount : EdjCase.ICP.Candid.CandidVariantValueBase<NeuronIdOrSubaccountType>\n\t{\n\t\tpublic NeuronIdOrSubaccount(NeuronIdOrSubaccountType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected NeuronIdOrSubaccount()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static NeuronIdOrSubaccount Subaccount(List<byte> info)\n\t\t{\n\t\t\treturn new NeuronIdOrSubaccount(NeuronIdOrSubaccountType.Subaccount, info);\n\t\t}\n\t\t\n\t\tpublic List<byte> AsSubaccount()\n\t\t{\n\t\t\tthis.ValidateType(NeuronIdOrSubaccountType.Subaccount);\n\t\t\treturn (List<byte>)this.value!;\n\t\t}\n\t\t\n\t\tpublic static NeuronIdOrSubaccount NeuronId(NeuronId info)\n\t\t{\n\t\t\treturn new NeuronIdOrSubaccount(NeuronIdOrSubaccountType.NeuronId, info);\n\t\t}\n\t\t\n\t\tpublic NeuronId AsNeuronId()\n\t\t{\n\t\t\tthis.ValidateType(NeuronIdOrSubaccountType.NeuronId);\n\t\t\treturn (NeuronId)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "NeuronInFlightCommand",
      "Item2": "namespace Test.Models\n{\n\tpublic class NeuronInFlightCommand\n\t{\n\t\tpublic Command2? Command { get; set; }\n\t\t\n\t\tpublic ulong Timestamp { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "NeuronInfo",
      "Item2": "namespace Test.Models\n{\n\tpublic class NeuronInfo\n\t{\n\t\tpublic ulong DissolveDelaySeconds { get; set; }\n\t\t\n\t\tpublic List<BallotInfo> RecentBallots { get; set; }\n\t\t\n\t\tpublic ulong CreatedTimestampSeconds { get; set; }\n\t\t\n\t\tpublic int State { get; set; }\n\t\t\n\t\tpublic ulong StakeE8s { get; set; }\n\t\t\n\t\tpublic ulong? JoinedCommunityFundTimestampSeconds { get; set; }\n\t\t\n\t\tpublic ulong RetrievedAtTimestampSeconds { get; set; }\n\t\t\n\t\tpublic KnownNeuronData? KnownNeuronData { get; set; }\n\t\t\n\t\tpublic ulong VotingPower { get; set; }\n\t\t\n\t\tpublic ulong AgeSeconds { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "NeuronStakeTransfer",
      "Item2": "namespace Test.Models\n{\n\tpublic class NeuronStakeTransfer\n\t{\n\t\tpublic List<byte> ToSubaccount { get; set; }\n\t\t\n\t\tpublic ulong NeuronStakeE8s { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? From { get; set; }\n\t\t\n\t\tpublic ulong Memo { get; set; }\n\t\t\n\t\tpublic List<byte> FromSubaccount { get; set; }\n\t\t\n\t\tpublic ulong TransferTimestamp { get; set; }\n\t\t\n\t\tpublic ulong BlockHeight { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "NodeProvider",
      "Item2": "namespace Test.Models\n{\n\tpublic class NodeProvider\n\t{\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? Id { get; set; }\n\t\t\n\t\tpublic AccountIdentifier? RewardAccount { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Operation",
      "Item2": "namespace Test.Models\n{\n\tpublic enum OperationType\n\t{\n\t\tRemoveHotKey,\n\t\tAddHotKey,\n\t\tStopDissolving,\n\t\tStartDissolving,\n\t\tIncreaseDissolveDelay,\n\t\tJoinCommunityFund,\n\t\tSetDissolveTimestamp,\n\t}\n\tpublic class Operation : EdjCase.ICP.Candid.CandidVariantValueBase<OperationType>\n\t{\n\t\tpublic Operation(OperationType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Operation()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Operation RemoveHotKey(RemoveHotKey info)\n\t\t{\n\t\t\treturn new Operation(OperationType.RemoveHotKey, info);\n\t\t}\n\t\t\n\t\tpublic RemoveHotKey AsRemoveHotKey()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.RemoveHotKey);\n\t\t\treturn (RemoveHotKey)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation AddHotKey(AddHotKey info)\n\t\t{\n\t\t\treturn new Operation(OperationType.AddHotKey, info);\n\t\t}\n\t\t\n\t\tpublic AddHotKey AsAddHotKey()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.AddHotKey);\n\t\t\treturn (AddHotKey)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation StopDissolving(StopDissolvingInfo info)\n\t\t{\n\t\t\treturn new Operation(OperationType.StopDissolving, info);\n\t\t}\n\t\t\n\t\tpublic StopDissolvingInfo AsStopDissolving()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.StopDissolving);\n\t\t\treturn (StopDissolvingInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation StartDissolving(StartDissolvingInfo info)\n\t\t{\n\t\t\treturn new Operation(OperationType.StartDissolving, info);\n\t\t}\n\t\t\n\t\tpublic StartDissolvingInfo AsStartDissolving()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.StartDissolving);\n\t\t\treturn (StartDissolvingInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation IncreaseDissolveDelay(IncreaseDissolveDelay info)\n\t\t{\n\t\t\treturn new Operation(OperationType.IncreaseDissolveDelay, info);\n\t\t}\n\t\t\n\t\tpublic IncreaseDissolveDelay AsIncreaseDissolveDelay()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.IncreaseDissolveDelay);\n\t\t\treturn (IncreaseDissolveDelay)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation JoinCommunityFund(JoinCommunityFundInfo info)\n\t\t{\n\t\t\treturn new Operation(OperationType.JoinCommunityFund, info);\n\t\t}\n\t\t\n\t\tpublic JoinCommunityFundInfo AsJoinCommunityFund()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.JoinCommunityFund);\n\t\t\treturn (JoinCommunityFundInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Operation SetDissolveTimestamp(SetDissolveTimestamp info)\n\t\t{\n\t\t\treturn new Operation(OperationType.SetDissolveTimestamp, info);\n\t\t}\n\t\t\n\t\tpublic SetDissolveTimestamp AsSetDissolveTimestamp()\n\t\t{\n\t\t\tthis.ValidateType(OperationType.SetDissolveTimestamp);\n\t\t\treturn (SetDissolveTimestamp)this.value!;\n\t\t}\n\t\t\n\t\tpublic class StopDissolvingInfo\n\t\t{\n\t\t}\n\t\tpublic class StartDissolvingInfo\n\t\t{\n\t\t}\n\t\tpublic class JoinCommunityFundInfo\n\t\t{\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "Proposal",
      "Item2": "namespace Test.Models\n{\n\tpublic class Proposal\n\t{\n\t\tpublic string Url { get; set; }\n\t\t\n\t\tpublic string? Title { get; set; }\n\t\t\n\t\tpublic Action? Action { get; set; }\n\t\t\n\t\tpublic string Summary { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "ProposalData",
      "Item2": "namespace Test.Models\n{\n\tpublic class ProposalData\n\t{\n\t\tpublic NeuronId? Id { get; set; }\n\t\t\n\t\tpublic GovernanceError? FailureReason { get; set; }\n\t\t\n\t\tpublic List<BallotsInfo> Ballots { get; set; }\n\t\t\n\t\tpublic ulong ProposalTimestampSeconds { get; set; }\n\t\t\n\t\tpublic ulong RewardEventRound { get; set; }\n\t\t\n\t\tpublic ulong FailedTimestampSeconds { get; set; }\n\t\t\n\t\tpublic ulong RejectCostE8s { get; set; }\n\t\t\n\t\tpublic Tally? LatestTally { get; set; }\n\t\t\n\t\tpublic ulong DecidedTimestampSeconds { get; set; }\n\t\t\n\t\tpublic Proposal? Proposal { get; set; }\n\t\t\n\t\tpublic NeuronId? Proposer { get; set; }\n\t\t\n\t\tpublic WaitForQuietState? WaitForQuietState { get; set; }\n\t\t\n\t\tpublic ulong ExecutedTimestampSeconds { get; set; }\n\t\t\n\t\tpublic class BallotsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic Ballot F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "ProposalInfo",
      "Item2": "namespace Test.Models\n{\n\tpublic class ProposalInfo\n\t{\n\t\tpublic NeuronId? Id { get; set; }\n\t\t\n\t\tpublic int Status { get; set; }\n\t\t\n\t\tpublic int Topic { get; set; }\n\t\t\n\t\tpublic GovernanceError? FailureReason { get; set; }\n\t\t\n\t\tpublic List<BallotsInfo> Ballots { get; set; }\n\t\t\n\t\tpublic ulong ProposalTimestampSeconds { get; set; }\n\t\t\n\t\tpublic ulong RewardEventRound { get; set; }\n\t\t\n\t\tpublic ulong? DeadlineTimestampSeconds { get; set; }\n\t\t\n\t\tpublic ulong FailedTimestampSeconds { get; set; }\n\t\t\n\t\tpublic ulong RejectCostE8s { get; set; }\n\t\t\n\t\tpublic Tally? LatestTally { get; set; }\n\t\t\n\t\tpublic int RewardStatus { get; set; }\n\t\t\n\t\tpublic ulong DecidedTimestampSeconds { get; set; }\n\t\t\n\t\tpublic Proposal? Proposal { get; set; }\n\t\t\n\t\tpublic NeuronId? Proposer { get; set; }\n\t\t\n\t\tpublic ulong ExecutedTimestampSeconds { get; set; }\n\t\t\n\t\tpublic class BallotsInfo\n\t\t{\n\t\t\tpublic ulong F0 { get; set; }\n\t\t\t\n\t\t\tpublic Ballot F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "RegisterVote",
      "Item2": "namespace Test.Models\n{\n\tpublic class RegisterVote\n\t{\n\t\tpublic int Vote { get; set; }\n\t\t\n\t\tpublic NeuronId? Proposal { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "RemoveHotKey",
      "Item2": "namespace Test.Models\n{\n\tpublic class RemoveHotKey\n\t{\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? HotKeyToRemove { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Result",
      "Item2": "namespace Test.Models\n{\n\tpublic enum ResultType\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result : EdjCase.ICP.Candid.CandidVariantValueBase<ResultType>\n\t{\n\t\tpublic Result(ResultType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result Ok()\n\t\t{\n\t\t\treturn new Result(ResultType.Ok, null);\n\t\t}\n\t\t\n\t\tpublic static Result Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result(ResultType.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(ResultType.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Result1",
      "Item2": "namespace Test.Models\n{\n\tpublic enum Result1Type\n\t{\n\t\tError,\n\t\tNeuronId,\n\t}\n\tpublic class Result1 : EdjCase.ICP.Candid.CandidVariantValueBase<Result1Type>\n\t{\n\t\tpublic Result1(Result1Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result1()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result1 Error(GovernanceError info)\n\t\t{\n\t\t\treturn new Result1(Result1Type.Error, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsError()\n\t\t{\n\t\t\tthis.ValidateType(Result1Type.Error);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result1 NeuronId(NeuronId info)\n\t\t{\n\t\t\treturn new Result1(Result1Type.NeuronId, info);\n\t\t}\n\t\t\n\t\tpublic NeuronId AsNeuronId()\n\t\t{\n\t\t\tthis.ValidateType(Result1Type.NeuronId);\n\t\t\treturn (NeuronId)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Result2",
      "Item2": "namespace Test.Models\n{\n\tpublic enum Result2Type\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result2 : EdjCase.ICP.Candid.CandidVariantValueBase<Result2Type>\n\t{\n\t\tpublic Result2(Result2Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result2()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result2 Ok(Neuron info)\n\t\t{\n\t\t\treturn new Result2(Result2Type.Ok, info);\n\t\t}\n\t\t\n\t\tpublic Neuron AsOk()\n\t\t{\n\t\t\tthis.ValidateType(Result2Type.Ok);\n\t\t\treturn (Neuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result2 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result2(Result2Type.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(Result2Type.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Result3",
      "Item2": "namespace Test.Models\n{\n\tpublic enum Result3Type\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result3 : EdjCase.ICP.Candid.CandidVariantValueBase<Result3Type>\n\t{\n\t\tpublic Result3(Result3Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result3()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result3 Ok(RewardNodeProviders info)\n\t\t{\n\t\t\treturn new Result3(Result3Type.Ok, info);\n\t\t}\n\t\t\n\t\tpublic RewardNodeProviders AsOk()\n\t\t{\n\t\t\tthis.ValidateType(Result3Type.Ok);\n\t\t\treturn (RewardNodeProviders)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result3 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result3(Result3Type.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(Result3Type.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Result4",
      "Item2": "namespace Test.Models\n{\n\tpublic enum Result4Type\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result4 : EdjCase.ICP.Candid.CandidVariantValueBase<Result4Type>\n\t{\n\t\tpublic Result4(Result4Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result4()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result4 Ok(NeuronInfo info)\n\t\t{\n\t\t\treturn new Result4(Result4Type.Ok, info);\n\t\t}\n\t\t\n\t\tpublic NeuronInfo AsOk()\n\t\t{\n\t\t\tthis.ValidateType(Result4Type.Ok);\n\t\t\treturn (NeuronInfo)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result4 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result4(Result4Type.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(Result4Type.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Result5",
      "Item2": "namespace Test.Models\n{\n\tpublic enum Result5Type\n\t{\n\t\tOk,\n\t\tErr,\n\t}\n\tpublic class Result5 : EdjCase.ICP.Candid.CandidVariantValueBase<Result5Type>\n\t{\n\t\tpublic Result5(Result5Type type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected Result5()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static Result5 Ok(NodeProvider info)\n\t\t{\n\t\t\treturn new Result5(Result5Type.Ok, info);\n\t\t}\n\t\t\n\t\tpublic NodeProvider AsOk()\n\t\t{\n\t\t\tthis.ValidateType(Result5Type.Ok);\n\t\t\treturn (NodeProvider)this.value!;\n\t\t}\n\t\t\n\t\tpublic static Result5 Err(GovernanceError info)\n\t\t{\n\t\t\treturn new Result5(Result5Type.Err, info);\n\t\t}\n\t\t\n\t\tpublic GovernanceError AsErr()\n\t\t{\n\t\t\tthis.ValidateType(Result5Type.Err);\n\t\t\treturn (GovernanceError)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "RewardEvent",
      "Item2": "namespace Test.Models\n{\n\tpublic class RewardEvent\n\t{\n\t\tpublic ulong DayAfterGenesis { get; set; }\n\t\t\n\t\tpublic ulong ActualTimestampSeconds { get; set; }\n\t\t\n\t\tpublic ulong DistributedE8sEquivalent { get; set; }\n\t\t\n\t\tpublic List<NeuronId> SettledProposals { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "RewardMode",
      "Item2": "namespace Test.Models\n{\n\tpublic enum RewardModeType\n\t{\n\t\tRewardToNeuron,\n\t\tRewardToAccount,\n\t}\n\tpublic class RewardMode : EdjCase.ICP.Candid.CandidVariantValueBase<RewardModeType>\n\t{\n\t\tpublic RewardMode(RewardModeType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected RewardMode()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static RewardMode RewardToNeuron(RewardToNeuron info)\n\t\t{\n\t\t\treturn new RewardMode(RewardModeType.RewardToNeuron, info);\n\t\t}\n\t\t\n\t\tpublic RewardToNeuron AsRewardToNeuron()\n\t\t{\n\t\t\tthis.ValidateType(RewardModeType.RewardToNeuron);\n\t\t\treturn (RewardToNeuron)this.value!;\n\t\t}\n\t\t\n\t\tpublic static RewardMode RewardToAccount(RewardToAccount info)\n\t\t{\n\t\t\treturn new RewardMode(RewardModeType.RewardToAccount, info);\n\t\t}\n\t\t\n\t\tpublic RewardToAccount AsRewardToAccount()\n\t\t{\n\t\t\tthis.ValidateType(RewardModeType.RewardToAccount);\n\t\t\treturn (RewardToAccount)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "RewardNodeProvider",
      "Item2": "namespace Test.Models\n{\n\tpublic class RewardNodeProvider\n\t{\n\t\tpublic NodeProvider? NodeProvider { get; set; }\n\t\t\n\t\tpublic RewardMode? RewardMode { get; set; }\n\t\t\n\t\tpublic ulong AmountE8s { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "RewardNodeProviders",
      "Item2": "namespace Test.Models\n{\n\tpublic class RewardNodeProviders\n\t{\n\t\tpublic bool? UseRegistryDerivedRewards { get; set; }\n\t\t\n\t\tpublic List<RewardNodeProvider> Rewards { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "RewardToAccount",
      "Item2": "namespace Test.Models\n{\n\tpublic class RewardToAccount\n\t{\n\t\tpublic AccountIdentifier? ToAccount { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "RewardToNeuron",
      "Item2": "namespace Test.Models\n{\n\tpublic class RewardToNeuron\n\t{\n\t\tpublic ulong DissolveDelaySeconds { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "SetDefaultFollowees",
      "Item2": "namespace Test.Models\n{\n\tpublic class SetDefaultFollowees\n\t{\n\t\tpublic List<DefaultFolloweesInfo> DefaultFollowees { get; set; }\n\t\t\n\t\tpublic class DefaultFolloweesInfo\n\t\t{\n\t\t\tpublic int F0 { get; set; }\n\t\t\t\n\t\t\tpublic Followees F1 { get; set; }\n\t\t\t\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "SetDissolveTimestamp",
      "Item2": "namespace Test.Models\n{\n\tpublic class SetDissolveTimestamp\n\t{\n\t\tpublic ulong DissolveTimestampSeconds { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Spawn",
      "Item2": "namespace Test.Models\n{\n\tpublic class Spawn\n\t{\n\t\tpublic uint? PercentageToSpawn { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal? NewController { get; set; }\n\t\t\n\t\tpublic ulong? Nonce { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "SpawnResponse",
      "Item2": "namespace Test.Models\n{\n\tpublic class SpawnResponse\n\t{\n\t\tpublic NeuronId? CreatedNeuronId { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Split",
      "Item2": "namespace Test.Models\n{\n\tpublic class Split\n\t{\n\t\tpublic ulong AmountE8s { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Tally",
      "Item2": "namespace Test.Models\n{\n\tpublic class Tally\n\t{\n\t\tpublic ulong No { get; set; }\n\t\t\n\t\tpublic ulong Yes { get; set; }\n\t\t\n\t\tpublic ulong Total { get; set; }\n\t\t\n\t\tpublic ulong TimestampSeconds { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "UpdateNodeProvider",
      "Item2": "namespace Test.Models\n{\n\tpublic class UpdateNodeProvider\n\t{\n\t\tpublic AccountIdentifier? RewardAccount { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "WaitForQuietState",
      "Item2": "namespace Test.Models\n{\n\tpublic class WaitForQuietState\n\t{\n\t\tpublic ulong CurrentDeadlineTimestampSeconds { get; set; }\n\t\t\n\t}\n}\n"
    }
  ],
  "AliasFile": null
}
