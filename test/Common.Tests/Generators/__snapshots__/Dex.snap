{
  "Name": "DexApiClient",
  "ClientFile": "using EdjCase.ICP.Agent.Agents;\nusing EdjCase.ICP.Agent.Responses;\nusing EdjCase.ICP.Agent.Auth;\nusing EdjCase.ICP.Candid.Models;\nusing Test.Models;\n\nnamespace Test\n{\n\tpublic class DexApiClient\n\t{\n\t\tpublic IAgent Agent { get; }\n\t\tpublic Principal CanisterId { get; }\n\t\tpublic DexApiClient(IAgent agent, Principal canisterId)\n\t\t{\n\t\t\tthis.Agent = agent ?? throw new ArgumentNullException(nameof(agent));\n\t\t\tthis.CanisterId = canisterId ?? throw new ArgumentNullException(nameof(canisterId));\n\t\t}\n\t\tpublic async Task<CancelOrderReceipt> CancelOrderAsync(OrderId arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"cancelOrder\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<OrderId>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tCancelOrderReceipt r0 = reply.Arg.Values[0].ToObject<CancelOrderReceipt>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task ClearAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"clear\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t}\n\t\tpublic async Task CreditAsync(EdjCase.ICP.Candid.Models.Principal arg0, Token arg1, EdjCase.ICP.Candid.UnboundedUInt arg2, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"credit\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.Models.Principal>(arg0);\n\t\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<Token>(arg1);\n\t\t\tCandidValueWithType p2 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg2);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t\tp2,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t}\n\t\tpublic async Task<DepositReceipt> DepositAsync(Token arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"deposit\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tDepositReceipt r0 = reply.Arg.Values[0].ToObject<DepositReceipt>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<List<Balance>> GetAllBalancesAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"getAllBalances\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tList<Balance> r0 = reply.Arg.Values[0].ToObject<List<Balance>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<EdjCase.ICP.Candid.UnboundedUInt> GetBalanceAsync(Token arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"getBalance\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tEdjCase.ICP.Candid.UnboundedUInt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Candid.UnboundedUInt>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<List<Balance>> GetBalancesAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"getBalances\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tList<Balance> r0 = reply.Arg.Values[0].ToObject<List<Balance>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<List<byte>> GetDepositAddressAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"getDepositAddress\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tList<byte> r0 = reply.Arg.Values[0].ToObject<List<byte>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<Order?> GetOrderAsync(OrderId arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"getOrder\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<OrderId>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tOrder? r0 = reply.Arg.Values[0].ToObjectOrDefault<Order?>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<List<Order>> GetOrdersAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"getOrders\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tList<Order> r0 = reply.Arg.Values[0].ToObject<List<Order>>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<string> GetSymbolAsync(Token arg0, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"getSymbol\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tstring r0 = reply.Arg.Values[0].ToObject<string>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<OrderPlacementReceipt> PlaceOrderAsync(Token arg0, EdjCase.ICP.Candid.UnboundedUInt arg1, Token arg2, EdjCase.ICP.Candid.UnboundedUInt arg3, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"placeOrder\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg1);\n\t\t\tCandidValueWithType p2 = CandidValueWithType.FromObject<Token>(arg2);\n\t\t\tCandidValueWithType p3 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg3);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t\tp2,\n\t\t\t\tp3,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tOrderPlacementReceipt r0 = reply.Arg.Values[0].ToObject<OrderPlacementReceipt>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<EdjCase.ICP.Candid.Models.Principal> WhoamiAsync(IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"whoami\";\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tEdjCase.ICP.Candid.Models.Principal r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Candid.Models.Principal>();\n\t\t\treturn (r0);\n\t\t}\n\t\tpublic async Task<WithdrawReceipt> WithdrawAsync(Token arg0, EdjCase.ICP.Candid.UnboundedUInt arg1, EdjCase.ICP.Candid.Models.Principal arg2, IIdentity? identityOverride = null)\n\t\t{\n\t\t\tstring method = \"withdraw\";\n\t\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg1);\n\t\t\tCandidValueWithType p2 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.Models.Principal>(arg2);\n\t\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t\t{\n\t\t\t\tp0,\n\t\t\t\tp1,\n\t\t\t\tp2,\n\t\t\t};\n\t\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride);\n\t\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\t\tWithdrawReceipt r0 = reply.Arg.Values[0].ToObject<WithdrawReceipt>();\n\t\t\treturn (r0);\n\t\t}\n\t}\n}\n",
  "DataModelFiles": [
    {
      "Item1": "WithdrawReceipt",
      "Item2": "namespace Test.Models\n{\n\tpublic enum WithdrawReceiptType\n\t{\n\t\tErr,\n\t\tOk,\n\t}\n\tpublic class WithdrawReceipt : EdjCase.ICP.Candid.CandidVariantValueBase<WithdrawReceiptType>\n\t{\n\t\tpublic WithdrawReceipt(WithdrawReceiptType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected WithdrawReceipt()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static WithdrawReceipt Err(WithdrawErr info)\n\t\t{\n\t\t\treturn new WithdrawReceipt(WithdrawReceiptType.Err, info);\n\t\t}\n\t\t\n\t\tpublic WithdrawErr AsErr()\n\t\t{\n\t\t\tthis.ValidateType(WithdrawReceiptType.Err);\n\t\t\treturn (WithdrawErr)this.value!;\n\t\t}\n\t\t\n\t\tpublic static WithdrawReceipt Ok(EdjCase.ICP.Candid.UnboundedUInt info)\n\t\t{\n\t\t\treturn new WithdrawReceipt(WithdrawReceiptType.Ok, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt AsOk()\n\t\t{\n\t\t\tthis.ValidateType(WithdrawReceiptType.Ok);\n\t\t\treturn (EdjCase.ICP.Candid.UnboundedUInt)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "WithdrawErr",
      "Item2": "namespace Test.Models\n{\n\tpublic enum WithdrawErrType\n\t{\n\t\tBalanceLow,\n\t\tTransferFailure,\n\t}\n\tpublic class WithdrawErr : EdjCase.ICP.Candid.CandidVariantValueBase<WithdrawErrType>\n\t{\n\t\tpublic WithdrawErr(WithdrawErrType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected WithdrawErr()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static WithdrawErr BalanceLow()\n\t\t{\n\t\t\treturn new WithdrawErr(WithdrawErrType.BalanceLow, null);\n\t\t}\n\t\t\n\t\tpublic static WithdrawErr TransferFailure()\n\t\t{\n\t\t\treturn new WithdrawErr(WithdrawErrType.TransferFailure, null);\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "OrderPlacementReceipt",
      "Item2": "namespace Test.Models\n{\n\tpublic enum OrderPlacementReceiptType\n\t{\n\t\tErr,\n\t\tOk,\n\t}\n\tpublic class OrderPlacementReceipt : EdjCase.ICP.Candid.CandidVariantValueBase<OrderPlacementReceiptType>\n\t{\n\t\tpublic OrderPlacementReceipt(OrderPlacementReceiptType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected OrderPlacementReceipt()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static OrderPlacementReceipt Err(OrderPlacementErr info)\n\t\t{\n\t\t\treturn new OrderPlacementReceipt(OrderPlacementReceiptType.Err, info);\n\t\t}\n\t\t\n\t\tpublic OrderPlacementErr AsErr()\n\t\t{\n\t\t\tthis.ValidateType(OrderPlacementReceiptType.Err);\n\t\t\treturn (OrderPlacementErr)this.value!;\n\t\t}\n\t\t\n\t\tpublic static OrderPlacementReceipt Ok(Order? info)\n\t\t{\n\t\t\treturn new OrderPlacementReceipt(OrderPlacementReceiptType.Ok, info);\n\t\t}\n\t\t\n\t\tpublic Order? AsOk()\n\t\t{\n\t\t\tthis.ValidateType(OrderPlacementReceiptType.Ok);\n\t\t\treturn (Order?)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "OrderPlacementErr",
      "Item2": "namespace Test.Models\n{\n\tpublic enum OrderPlacementErrType\n\t{\n\t\tInvalidOrder,\n\t\tOrderBookFull,\n\t}\n\tpublic class OrderPlacementErr : EdjCase.ICP.Candid.CandidVariantValueBase<OrderPlacementErrType>\n\t{\n\t\tpublic OrderPlacementErr(OrderPlacementErrType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected OrderPlacementErr()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static OrderPlacementErr InvalidOrder()\n\t\t{\n\t\t\treturn new OrderPlacementErr(OrderPlacementErrType.InvalidOrder, null);\n\t\t}\n\t\t\n\t\tpublic static OrderPlacementErr OrderBookFull()\n\t\t{\n\t\t\treturn new OrderPlacementErr(OrderPlacementErrType.OrderBookFull, null);\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Order",
      "Item2": "namespace Test.Models\n{\n\tpublic class Order\n\t{\n\t\tpublic Token From { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt FromAmount { get; set; }\n\t\t\n\t\tpublic OrderId Id { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal Owner { get; set; }\n\t\t\n\t\tpublic Token To { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt ToAmount { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "DepositReceipt",
      "Item2": "namespace Test.Models\n{\n\tpublic enum DepositReceiptType\n\t{\n\t\tErr,\n\t\tOk,\n\t}\n\tpublic class DepositReceipt : EdjCase.ICP.Candid.CandidVariantValueBase<DepositReceiptType>\n\t{\n\t\tpublic DepositReceipt(DepositReceiptType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected DepositReceipt()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static DepositReceipt Err(DepositErr info)\n\t\t{\n\t\t\treturn new DepositReceipt(DepositReceiptType.Err, info);\n\t\t}\n\t\t\n\t\tpublic DepositErr AsErr()\n\t\t{\n\t\t\tthis.ValidateType(DepositReceiptType.Err);\n\t\t\treturn (DepositErr)this.value!;\n\t\t}\n\t\t\n\t\tpublic static DepositReceipt Ok(EdjCase.ICP.Candid.UnboundedUInt info)\n\t\t{\n\t\t\treturn new DepositReceipt(DepositReceiptType.Ok, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt AsOk()\n\t\t{\n\t\t\tthis.ValidateType(DepositReceiptType.Ok);\n\t\t\treturn (EdjCase.ICP.Candid.UnboundedUInt)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "DepositErr",
      "Item2": "namespace Test.Models\n{\n\tpublic enum DepositErrType\n\t{\n\t\tBalanceLow,\n\t\tTransferFailure,\n\t}\n\tpublic class DepositErr : EdjCase.ICP.Candid.CandidVariantValueBase<DepositErrType>\n\t{\n\t\tpublic DepositErr(DepositErrType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected DepositErr()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static DepositErr BalanceLow()\n\t\t{\n\t\t\treturn new DepositErr(DepositErrType.BalanceLow, null);\n\t\t}\n\t\t\n\t\tpublic static DepositErr TransferFailure()\n\t\t{\n\t\t\treturn new DepositErr(DepositErrType.TransferFailure, null);\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "CancelOrderReceipt",
      "Item2": "namespace Test.Models\n{\n\tpublic enum CancelOrderReceiptType\n\t{\n\t\tErr,\n\t\tOk,\n\t}\n\tpublic class CancelOrderReceipt : EdjCase.ICP.Candid.CandidVariantValueBase<CancelOrderReceiptType>\n\t{\n\t\tpublic CancelOrderReceipt(CancelOrderReceiptType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected CancelOrderReceipt()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static CancelOrderReceipt Err(CancelOrderErr info)\n\t\t{\n\t\t\treturn new CancelOrderReceipt(CancelOrderReceiptType.Err, info);\n\t\t}\n\t\t\n\t\tpublic CancelOrderErr AsErr()\n\t\t{\n\t\t\tthis.ValidateType(CancelOrderReceiptType.Err);\n\t\t\treturn (CancelOrderErr)this.value!;\n\t\t}\n\t\t\n\t\tpublic static CancelOrderReceipt Ok(OrderId info)\n\t\t{\n\t\t\treturn new CancelOrderReceipt(CancelOrderReceiptType.Ok, info);\n\t\t}\n\t\t\n\t\tpublic OrderId AsOk()\n\t\t{\n\t\t\tthis.ValidateType(CancelOrderReceiptType.Ok);\n\t\t\treturn (OrderId)this.value!;\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "CancelOrderErr",
      "Item2": "namespace Test.Models\n{\n\tpublic enum CancelOrderErrType\n\t{\n\t\tNotAllowed,\n\t\tNotExistingOrder,\n\t}\n\tpublic class CancelOrderErr : EdjCase.ICP.Candid.CandidVariantValueBase<CancelOrderErrType>\n\t{\n\t\tpublic CancelOrderErr(CancelOrderErrType type, object? value)  : base(type, value)\n\t\t{\n\t\t}\n\t\t\n\t\tprotected CancelOrderErr()\n\t\t{\n\t\t}\n\t\t\n\t\tpublic static CancelOrderErr NotAllowed()\n\t\t{\n\t\t\treturn new CancelOrderErr(CancelOrderErrType.NotAllowed, null);\n\t\t}\n\t\t\n\t\tpublic static CancelOrderErr NotExistingOrder()\n\t\t{\n\t\t\treturn new CancelOrderErr(CancelOrderErrType.NotExistingOrder, null);\n\t\t}\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "Balance",
      "Item2": "namespace Test.Models\n{\n\tpublic class Balance\n\t{\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt Amount { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal Owner { get; set; }\n\t\t\n\t\tpublic Token Token { get; set; }\n\t\t\n\t}\n}\n"
    }
  ],
  "AliasFile": "global using Token = EdjCase.ICP.Candid.Models.Principal;\nglobal using OrderId = uint;\n"
}
