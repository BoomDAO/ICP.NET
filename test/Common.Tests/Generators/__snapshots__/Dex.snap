using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;
using EdjCase.ICP.Candid.Models;
using Test.Models;
using System.Threading.Tasks;
using System.Collections.Generic;
using EdjCase.ICP.Agent.Responses;

namespace Test.Models
{
	public class DexApiClient
	{
		public IAgent Agent { get; }

		public Principal CanisterId { get; }

		public DexApiClient(IAgent agent, Principal canisterId)
		{
			this.Agent = agent;
			this.CanisterId = canisterId;
		}

		public async System.Threading.Tasks.Task<CancelOrderReceipt> CancelOrder(OrderId arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "cancelOrder", arg);
			return reply.ToObjects<CancelOrderReceipt>();
		}

		public async Task Clear()
		{
			CandidArg arg = CandidArg.FromCandid();
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "clear", arg);
		}

		public async Task Credit(Principal arg0, Token arg1, UnboundedUInt arg2)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0), CandidTypedValue.FromObject(arg1), CandidTypedValue.FromObject(arg2));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "credit", arg);
		}

		public async System.Threading.Tasks.Task<DepositReceipt> Deposit(Token arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "deposit", arg);
			return reply.ToObjects<DepositReceipt>();
		}

		public async System.Threading.Tasks.Task<List<Balance>> GetAllBalances()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "getAllBalances", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<List<Balance>>();
		}

		public async System.Threading.Tasks.Task<UnboundedUInt> GetBalance(Token arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "getBalance", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<UnboundedUInt>();
		}

		public async System.Threading.Tasks.Task<List<Balance>> GetBalances()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "getBalances", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<List<Balance>>();
		}

		public async System.Threading.Tasks.Task<List<byte>> GetDepositAddress()
		{
			CandidArg arg = CandidArg.FromCandid();
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "getDepositAddress", arg);
			return reply.ToObjects<List<byte>>();
		}

		public async System.Threading.Tasks.Task<OptionalValue<Order>> GetOrder(OrderId arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "getOrder", arg);
			return reply.ToObjects<OptionalValue<Order>>();
		}

		public async System.Threading.Tasks.Task<List<Order>> GetOrders()
		{
			CandidArg arg = CandidArg.FromCandid();
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "getOrders", arg);
			return reply.ToObjects<List<Order>>();
		}

		public async System.Threading.Tasks.Task<string> GetSymbol(Token arg0)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "getSymbol", arg);
			return reply.ToObjects<string>();
		}

		public async System.Threading.Tasks.Task<OrderPlacementReceipt> PlaceOrder(Token arg0, UnboundedUInt arg1, Token arg2, UnboundedUInt arg3)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0), CandidTypedValue.FromObject(arg1), CandidTypedValue.FromObject(arg2), CandidTypedValue.FromObject(arg3));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "placeOrder", arg);
			return reply.ToObjects<OrderPlacementReceipt>();
		}

		public async System.Threading.Tasks.Task<Principal> Whoami()
		{
			CandidArg arg = CandidArg.FromCandid();
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "whoami", arg);
			CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<Principal>();
		}

		public async System.Threading.Tasks.Task<WithdrawReceipt> Withdraw(Token arg0, UnboundedUInt arg1, Principal arg2)
		{
			CandidArg arg = CandidArg.FromCandid(CandidTypedValue.FromObject(arg0), CandidTypedValue.FromObject(arg1), CandidTypedValue.FromObject(arg2));
			CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "withdraw", arg);
			return reply.ToObjects<WithdrawReceipt>();
		}
	}
}

Type File: 'WithdrawReceipt'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using EdjCase.ICP.Candid.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(WithdrawReceiptTag))]
	public class WithdrawReceipt
	{
		[VariantTagProperty()]
		public WithdrawReceiptTag Tag { get; set; }

		[VariantValueProperty()]
		public System.Object? Value { get; set; }

		public WithdrawReceipt(WithdrawReceiptTag tag, object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected WithdrawReceipt()
		{
		}

		public static WithdrawReceipt Err(WithdrawErr info)
		{
			return new WithdrawReceipt(WithdrawReceiptTag.Err, info);
		}

		public static WithdrawReceipt Ok(UnboundedUInt info)
		{
			return new WithdrawReceipt(WithdrawReceiptTag.Ok, info);
		}

		public WithdrawErr AsErr()
		{
			this.ValidateTag(WithdrawReceiptTag.Err);
			return (WithdrawErr)this.Value!;
		}

		public UnboundedUInt AsOk()
		{
			this.ValidateTag(WithdrawReceiptTag.Ok);
			return (UnboundedUInt)this.Value!;
		}

		private void ValidateTag(WithdrawReceiptTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum WithdrawReceiptTag
	{
		[CandidName("Err")]
		[VariantOptionType(typeof(WithdrawErr))]
		Err,
		[CandidName("Ok")]
		[VariantOptionType(typeof(UnboundedUInt))]
		Ok
	}
}

Type File: 'WithdrawErr'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using Test.Models;

namespace Test.Models
{
	[Variant(typeof(WithdrawErrTag))]
	public class WithdrawErr
	{
		[VariantTagProperty()]
		public WithdrawErrTag Tag { get; set; }

		[VariantValueProperty()]
		public System.Object? Value { get; set; }

		public WithdrawErr(WithdrawErrTag tag, object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected WithdrawErr()
		{
		}

		public static WithdrawErr BalanceLow()
		{
			return new WithdrawErr(WithdrawErrTag.BalanceLow, null);
		}

		public static WithdrawErr TransferFailure()
		{
			return new WithdrawErr(WithdrawErrTag.TransferFailure, null);
		}
	}

	public enum WithdrawErrTag
	{
		[CandidName("BalanceLow")]
		BalanceLow,
		[CandidName("TransferFailure")]
		TransferFailure
	}
}

Type File: 'OrderPlacementReceipt'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using EdjCase.ICP.Candid.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(OrderPlacementReceiptTag))]
	public class OrderPlacementReceipt
	{
		[VariantTagProperty()]
		public OrderPlacementReceiptTag Tag { get; set; }

		[VariantValueProperty()]
		public System.Object? Value { get; set; }

		public OrderPlacementReceipt(OrderPlacementReceiptTag tag, object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected OrderPlacementReceipt()
		{
		}

		public static OrderPlacementReceipt Err(OrderPlacementErr info)
		{
			return new OrderPlacementReceipt(OrderPlacementReceiptTag.Err, info);
		}

		public static OrderPlacementReceipt Ok(OptionalValue<Order> info)
		{
			return new OrderPlacementReceipt(OrderPlacementReceiptTag.Ok, info);
		}

		public OrderPlacementErr AsErr()
		{
			this.ValidateTag(OrderPlacementReceiptTag.Err);
			return (OrderPlacementErr)this.Value!;
		}

		public OptionalValue<Order> AsOk()
		{
			this.ValidateTag(OrderPlacementReceiptTag.Ok);
			return (OptionalValue<Order>)this.Value!;
		}

		private void ValidateTag(OrderPlacementReceiptTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum OrderPlacementReceiptTag
	{
		[CandidName("Err")]
		[VariantOptionType(typeof(OrderPlacementErr))]
		Err,
		[CandidName("Ok")]
		[VariantOptionType(typeof(OptionalValue<Order>))]
		Ok
	}
}

Type File: 'OrderPlacementErr'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using Test.Models;

namespace Test.Models
{
	[Variant(typeof(OrderPlacementErrTag))]
	public class OrderPlacementErr
	{
		[VariantTagProperty()]
		public OrderPlacementErrTag Tag { get; set; }

		[VariantValueProperty()]
		public System.Object? Value { get; set; }

		public OrderPlacementErr(OrderPlacementErrTag tag, object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected OrderPlacementErr()
		{
		}

		public static OrderPlacementErr InvalidOrder()
		{
			return new OrderPlacementErr(OrderPlacementErrTag.InvalidOrder, null);
		}

		public static OrderPlacementErr OrderBookFull()
		{
			return new OrderPlacementErr(OrderPlacementErrTag.OrderBookFull, null);
		}
	}

	public enum OrderPlacementErrTag
	{
		[CandidName("InvalidOrder")]
		InvalidOrder,
		[CandidName("OrderBookFull")]
		OrderBookFull
	}
}

Type File: 'Order'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class Order
	{
		[CandidName("from")]
		public Token From { get; set; }

		[CandidName("fromAmount")]
		public UnboundedUInt FromAmount { get; set; }

		[CandidName("id")]
		public OrderId Id { get; set; }

		[CandidName("owner")]
		public Principal Owner { get; set; }

		[CandidName("to")]
		public Token To { get; set; }

		[CandidName("toAmount")]
		public UnboundedUInt ToAmount { get; set; }

		public Order(Token from, UnboundedUInt fromAmount, OrderId id, Principal owner, Token to, UnboundedUInt toAmount)
		{
			this.From = from;
			this.FromAmount = fromAmount;
			this.Id = id;
			this.Owner = owner;
			this.To = to;
			this.ToAmount = toAmount;
		}

		public Order()
		{
		}
	}
}

Type File: 'DepositReceipt'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using EdjCase.ICP.Candid.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(DepositReceiptTag))]
	public class DepositReceipt
	{
		[VariantTagProperty()]
		public DepositReceiptTag Tag { get; set; }

		[VariantValueProperty()]
		public System.Object? Value { get; set; }

		public DepositReceipt(DepositReceiptTag tag, object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected DepositReceipt()
		{
		}

		public static DepositReceipt Err(DepositErr info)
		{
			return new DepositReceipt(DepositReceiptTag.Err, info);
		}

		public static DepositReceipt Ok(UnboundedUInt info)
		{
			return new DepositReceipt(DepositReceiptTag.Ok, info);
		}

		public DepositErr AsErr()
		{
			this.ValidateTag(DepositReceiptTag.Err);
			return (DepositErr)this.Value!;
		}

		public UnboundedUInt AsOk()
		{
			this.ValidateTag(DepositReceiptTag.Ok);
			return (UnboundedUInt)this.Value!;
		}

		private void ValidateTag(DepositReceiptTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum DepositReceiptTag
	{
		[CandidName("Err")]
		[VariantOptionType(typeof(DepositErr))]
		Err,
		[CandidName("Ok")]
		[VariantOptionType(typeof(UnboundedUInt))]
		Ok
	}
}

Type File: 'DepositErr'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using Test.Models;

namespace Test.Models
{
	[Variant(typeof(DepositErrTag))]
	public class DepositErr
	{
		[VariantTagProperty()]
		public DepositErrTag Tag { get; set; }

		[VariantValueProperty()]
		public System.Object? Value { get; set; }

		public DepositErr(DepositErrTag tag, object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected DepositErr()
		{
		}

		public static DepositErr BalanceLow()
		{
			return new DepositErr(DepositErrTag.BalanceLow, null);
		}

		public static DepositErr TransferFailure()
		{
			return new DepositErr(DepositErrTag.TransferFailure, null);
		}
	}

	public enum DepositErrTag
	{
		[CandidName("BalanceLow")]
		BalanceLow,
		[CandidName("TransferFailure")]
		TransferFailure
	}
}

Type File: 'CancelOrderReceipt'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using Test.Models;
using System;

namespace Test.Models
{
	[Variant(typeof(CancelOrderReceiptTag))]
	public class CancelOrderReceipt
	{
		[VariantTagProperty()]
		public CancelOrderReceiptTag Tag { get; set; }

		[VariantValueProperty()]
		public System.Object? Value { get; set; }

		public CancelOrderReceipt(CancelOrderReceiptTag tag, object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected CancelOrderReceipt()
		{
		}

		public static CancelOrderReceipt Err(CancelOrderErr info)
		{
			return new CancelOrderReceipt(CancelOrderReceiptTag.Err, info);
		}

		public static CancelOrderReceipt Ok(OrderId info)
		{
			return new CancelOrderReceipt(CancelOrderReceiptTag.Ok, info);
		}

		public CancelOrderErr AsErr()
		{
			this.ValidateTag(CancelOrderReceiptTag.Err);
			return (CancelOrderErr)this.Value!;
		}

		public OrderId AsOk()
		{
			this.ValidateTag(CancelOrderReceiptTag.Ok);
			return (OrderId)this.Value!;
		}

		private void ValidateTag(CancelOrderReceiptTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum CancelOrderReceiptTag
	{
		[CandidName("Err")]
		[VariantOptionType(typeof(CancelOrderErr))]
		Err,
		[CandidName("Ok")]
		[VariantOptionType(typeof(OrderId))]
		Ok
	}
}

Type File: 'CancelOrderErr'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using Test.Models;

namespace Test.Models
{
	[Variant(typeof(CancelOrderErrTag))]
	public class CancelOrderErr
	{
		[VariantTagProperty()]
		public CancelOrderErrTag Tag { get; set; }

		[VariantValueProperty()]
		public System.Object? Value { get; set; }

		public CancelOrderErr(CancelOrderErrTag tag, object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected CancelOrderErr()
		{
		}

		public static CancelOrderErr NotAllowed()
		{
			return new CancelOrderErr(CancelOrderErrTag.NotAllowed, null);
		}

		public static CancelOrderErr NotExistingOrder()
		{
			return new CancelOrderErr(CancelOrderErrTag.NotExistingOrder, null);
		}
	}

	public enum CancelOrderErrTag
	{
		[CandidName("NotAllowed")]
		NotAllowed,
		[CandidName("NotExistingOrder")]
		NotExistingOrder
	}
}

Type File: 'Balance'

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Candid.Mapping;
using EdjCase.ICP.Candid.Models;

namespace Test.Models
{
	public class Balance
	{
		[CandidName("amount")]
		public UnboundedUInt Amount { get; set; }

		[CandidName("owner")]
		public Principal Owner { get; set; }

		[CandidName("token")]
		public Token Token { get; set; }

		public Balance(UnboundedUInt amount, Principal owner, Token token)
		{
			this.Amount = amount;
			this.Owner = owner;
			this.Token = token;
		}

		public Balance()
		{
		}
	}
}
