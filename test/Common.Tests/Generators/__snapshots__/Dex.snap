using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test
{
	public class DexApiClient
	{
		public EdjCase.ICP.Agent.Agents.IAgent Agent { get; }

		public EdjCase.ICP.Candid.Models.Principal CanisterId { get; }

		public DexApiClient(EdjCase.ICP.Agent.Agents.IAgent agent, EdjCase.ICP.Candid.Models.Principal canisterId)
		{
			this.Agent = agent;
			this.CanisterId = canisterId;
		}

		public async System.Threading.Tasks.Task<Test.Models.CancelOrderReceipt> CancelOrder(OrderId arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "cancelOrder", arg);
			return reply.ToObjects<Test.Models.CancelOrderReceipt>();
		}

		public async System.Threading.Tasks.Task Clear()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "clear", arg);
		}

		public async System.Threading.Tasks.Task Credit(EdjCase.ICP.Candid.Models.Principal arg0, Token arg1, EdjCase.ICP.Candid.Models.UnboundedUInt arg2)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg1), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg2));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "credit", arg);
		}

		public async System.Threading.Tasks.Task<Test.Models.DepositReceipt> Deposit(Token arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "deposit", arg);
			return reply.ToObjects<Test.Models.DepositReceipt>();
		}

		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Test.Models.Balance>> GetAllBalances()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "getAllBalances", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<System.Collections.Generic.List<Test.Models.Balance>>();
		}

		public async System.Threading.Tasks.Task<EdjCase.ICP.Candid.Models.UnboundedUInt> GetBalance(Token arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "getBalance", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<EdjCase.ICP.Candid.Models.UnboundedUInt>();
		}

		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Test.Models.Balance>> GetBalances()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "getBalances", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<System.Collections.Generic.List<Test.Models.Balance>>();
		}

		public async System.Threading.Tasks.Task<System.Collections.Generic.List<System.Byte>> GetDepositAddress()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "getDepositAddress", arg);
			return reply.ToObjects<System.Collections.Generic.List<System.Byte>>();
		}

		public async System.Threading.Tasks.Task<EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Order>> GetOrder(OrderId arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "getOrder", arg);
			return reply.ToObjects<EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Order>>();
		}

		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Test.Models.Order>> GetOrders()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "getOrders", arg);
			return reply.ToObjects<System.Collections.Generic.List<Test.Models.Order>>();
		}

		public async System.Threading.Tasks.Task<System.String> GetSymbol(Token arg0)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "getSymbol", arg);
			return reply.ToObjects<System.String>();
		}

		public async System.Threading.Tasks.Task<Test.Models.OrderPlacementReceipt> PlaceOrder(Token arg0, EdjCase.ICP.Candid.Models.UnboundedUInt arg1, Token arg2, EdjCase.ICP.Candid.Models.UnboundedUInt arg3)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg1), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg2), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg3));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "placeOrder", arg);
			return reply.ToObjects<Test.Models.OrderPlacementReceipt>();
		}

		public async System.Threading.Tasks.Task<EdjCase.ICP.Candid.Models.Principal> Whoami()
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid();
			EdjCase.ICP.Agent.Responses.QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, "whoami", arg);
			EdjCase.ICP.Candid.Models.CandidArg reply = response.ThrowOrGetReply();
			return reply.ToObjects<EdjCase.ICP.Candid.Models.Principal>();
		}

		public async System.Threading.Tasks.Task<Test.Models.WithdrawReceipt> Withdraw(Token arg0, EdjCase.ICP.Candid.Models.UnboundedUInt arg1, EdjCase.ICP.Candid.Models.Principal arg2)
		{
			EdjCase.ICP.Candid.Models.CandidArg arg = EdjCase.ICP.Candid.Models.CandidArg.FromCandid(EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg0), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg1), EdjCase.ICP.Candid.Models.CandidTypedValue.FromObject(arg2));
			EdjCase.ICP.Candid.Models.CandidArg reply = await this.Agent.CallAndWaitAsync(this.CanisterId, "withdraw", arg);
			return reply.ToObjects<Test.Models.WithdrawReceipt>();
		}
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.WithdrawReceiptTag))]
	public class WithdrawReceipt
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.WithdrawReceiptTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public WithdrawReceipt(Test.Models.WithdrawReceiptTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected WithdrawReceipt()
		{
		}

		public static Test.Models.WithdrawReceipt Err(Test.Models.WithdrawErr info)
		{
			return new Test.Models.WithdrawReceipt(Test.Models.WithdrawReceiptTag.Err, info);
		}

		public static Test.Models.WithdrawReceipt Ok(EdjCase.ICP.Candid.Models.UnboundedUInt info)
		{
			return new Test.Models.WithdrawReceipt(Test.Models.WithdrawReceiptTag.Ok, info);
		}

		public Test.Models.WithdrawErr AsErr()
		{
			this.ValidateTag(Test.Models.WithdrawReceiptTag.Err);
			return (Test.Models.WithdrawErr)this.Value!;
		}

		public EdjCase.ICP.Candid.Models.UnboundedUInt AsOk()
		{
			this.ValidateTag(Test.Models.WithdrawReceiptTag.Ok);
			return (EdjCase.ICP.Candid.Models.UnboundedUInt)this.Value!;
		}

		private void ValidateTag(Test.Models.WithdrawReceiptTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum WithdrawReceiptTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.WithdrawErr))]
		Err,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(EdjCase.ICP.Candid.Models.UnboundedUInt))]
		Ok
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.WithdrawErrTag))]
	public class WithdrawErr
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.WithdrawErrTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public WithdrawErr(Test.Models.WithdrawErrTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected WithdrawErr()
		{
		}

		public static Test.Models.WithdrawErr BalanceLow()
		{
			return new Test.Models.WithdrawErr(Test.Models.WithdrawErrTag.BalanceLow, null);
		}

		public static Test.Models.WithdrawErr TransferFailure()
		{
			return new Test.Models.WithdrawErr(Test.Models.WithdrawErrTag.TransferFailure, null);
		}
	}

	public enum WithdrawErrTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("BalanceLow")]
		BalanceLow,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("TransferFailure")]
		TransferFailure
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.OrderPlacementReceiptTag))]
	public class OrderPlacementReceipt
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.OrderPlacementReceiptTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public OrderPlacementReceipt(Test.Models.OrderPlacementReceiptTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected OrderPlacementReceipt()
		{
		}

		public static Test.Models.OrderPlacementReceipt Err(Test.Models.OrderPlacementErr info)
		{
			return new Test.Models.OrderPlacementReceipt(Test.Models.OrderPlacementReceiptTag.Err, info);
		}

		public static Test.Models.OrderPlacementReceipt Ok(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Order> info)
		{
			return new Test.Models.OrderPlacementReceipt(Test.Models.OrderPlacementReceiptTag.Ok, info);
		}

		public Test.Models.OrderPlacementErr AsErr()
		{
			this.ValidateTag(Test.Models.OrderPlacementReceiptTag.Err);
			return (Test.Models.OrderPlacementErr)this.Value!;
		}

		public EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Order> AsOk()
		{
			this.ValidateTag(Test.Models.OrderPlacementReceiptTag.Ok);
			return (EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Order>)this.Value!;
		}

		private void ValidateTag(Test.Models.OrderPlacementReceiptTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum OrderPlacementReceiptTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.OrderPlacementErr))]
		Err,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(EdjCase.ICP.Candid.Models.OptionalValue<Test.Models.Order>))]
		Ok
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.OrderPlacementErrTag))]
	public class OrderPlacementErr
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.OrderPlacementErrTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public OrderPlacementErr(Test.Models.OrderPlacementErrTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected OrderPlacementErr()
		{
		}

		public static Test.Models.OrderPlacementErr InvalidOrder()
		{
			return new Test.Models.OrderPlacementErr(Test.Models.OrderPlacementErrTag.InvalidOrder, null);
		}

		public static Test.Models.OrderPlacementErr OrderBookFull()
		{
			return new Test.Models.OrderPlacementErr(Test.Models.OrderPlacementErrTag.OrderBookFull, null);
		}
	}

	public enum OrderPlacementErrTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("InvalidOrder")]
		InvalidOrder,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("OrderBookFull")]
		OrderBookFull
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Order
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("from")]
		public Token From { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("fromAmount")]
		public EdjCase.ICP.Candid.Models.UnboundedUInt FromAmount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("id")]
		public OrderId Id { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("owner")]
		public EdjCase.ICP.Candid.Models.Principal Owner { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("to")]
		public Token To { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("toAmount")]
		public EdjCase.ICP.Candid.Models.UnboundedUInt ToAmount { get; set; }

		public Order(Token from, EdjCase.ICP.Candid.Models.UnboundedUInt fromAmount, OrderId id, EdjCase.ICP.Candid.Models.Principal owner, Token to, EdjCase.ICP.Candid.Models.UnboundedUInt toAmount)
		{
			this.From = from;
			this.FromAmount = fromAmount;
			this.Id = id;
			this.Owner = owner;
			this.To = to;
			this.ToAmount = toAmount;
		}
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.DepositReceiptTag))]
	public class DepositReceipt
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.DepositReceiptTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public DepositReceipt(Test.Models.DepositReceiptTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected DepositReceipt()
		{
		}

		public static Test.Models.DepositReceipt Err(Test.Models.DepositErr info)
		{
			return new Test.Models.DepositReceipt(Test.Models.DepositReceiptTag.Err, info);
		}

		public static Test.Models.DepositReceipt Ok(EdjCase.ICP.Candid.Models.UnboundedUInt info)
		{
			return new Test.Models.DepositReceipt(Test.Models.DepositReceiptTag.Ok, info);
		}

		public Test.Models.DepositErr AsErr()
		{
			this.ValidateTag(Test.Models.DepositReceiptTag.Err);
			return (Test.Models.DepositErr)this.Value!;
		}

		public EdjCase.ICP.Candid.Models.UnboundedUInt AsOk()
		{
			this.ValidateTag(Test.Models.DepositReceiptTag.Ok);
			return (EdjCase.ICP.Candid.Models.UnboundedUInt)this.Value!;
		}

		private void ValidateTag(Test.Models.DepositReceiptTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum DepositReceiptTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.DepositErr))]
		Err,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(EdjCase.ICP.Candid.Models.UnboundedUInt))]
		Ok
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.DepositErrTag))]
	public class DepositErr
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.DepositErrTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public DepositErr(Test.Models.DepositErrTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected DepositErr()
		{
		}

		public static Test.Models.DepositErr BalanceLow()
		{
			return new Test.Models.DepositErr(Test.Models.DepositErrTag.BalanceLow, null);
		}

		public static Test.Models.DepositErr TransferFailure()
		{
			return new Test.Models.DepositErr(Test.Models.DepositErrTag.TransferFailure, null);
		}
	}

	public enum DepositErrTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("BalanceLow")]
		BalanceLow,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("TransferFailure")]
		TransferFailure
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.CancelOrderReceiptTag))]
	public class CancelOrderReceipt
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.CancelOrderReceiptTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public CancelOrderReceipt(Test.Models.CancelOrderReceiptTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected CancelOrderReceipt()
		{
		}

		public static Test.Models.CancelOrderReceipt Err(Test.Models.CancelOrderErr info)
		{
			return new Test.Models.CancelOrderReceipt(Test.Models.CancelOrderReceiptTag.Err, info);
		}

		public static Test.Models.CancelOrderReceipt Ok(OrderId info)
		{
			return new Test.Models.CancelOrderReceipt(Test.Models.CancelOrderReceiptTag.Ok, info);
		}

		public Test.Models.CancelOrderErr AsErr()
		{
			this.ValidateTag(Test.Models.CancelOrderReceiptTag.Err);
			return (Test.Models.CancelOrderErr)this.Value!;
		}

		public OrderId AsOk()
		{
			this.ValidateTag(Test.Models.CancelOrderReceiptTag.Ok);
			return (OrderId)this.Value!;
		}

		private void ValidateTag(Test.Models.CancelOrderReceiptTag tag)
		{
			if (!this.Tag.Equals(tag))
			{
				throw new System.InvalidOperationException($"Cannot cast '{this.Tag}' to type '{tag}'");
			}
		}
	}

	public enum CancelOrderReceiptTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Err")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(Test.Models.CancelOrderErr))]
		Err,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("Ok")]
		[EdjCase.ICP.Candid.Mapping.VariantOptionTypeAttribute(typeof(OrderId))]
		Ok
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	[EdjCase.ICP.Candid.Mapping.VariantAttribute(typeof(Test.Models.CancelOrderErrTag))]
	public class CancelOrderErr
	{
		[EdjCase.ICP.Candid.Mapping.VariantTagPropertyAttribute()]
		public Test.Models.CancelOrderErrTag Tag { get; set; }

		[EdjCase.ICP.Candid.Mapping.VariantValuePropertyAttribute()]
		private System.Object? Value { get; set; }

		public CancelOrderErr(Test.Models.CancelOrderErrTag tag, System.Object? value)
		{
			this.Tag = tag;
			this.Value = value;
		}

		protected CancelOrderErr()
		{
		}

		public static Test.Models.CancelOrderErr NotAllowed()
		{
			return new Test.Models.CancelOrderErr(Test.Models.CancelOrderErrTag.NotAllowed, null);
		}

		public static Test.Models.CancelOrderErr NotExistingOrder()
		{
			return new Test.Models.CancelOrderErr(Test.Models.CancelOrderErrTag.NotExistingOrder, null);
		}
	}

	public enum CancelOrderErrTag
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("NotAllowed")]
		NotAllowed,
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("NotExistingOrder")]
		NotExistingOrder
	}
}

using Token = EdjCase.ICP.Candid.Models.Principal;
using OrderId = System.UInt32;
using EdjCase.ICP.Agent.Agents;

namespace Test.Models
{
	public class Balance
	{
		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("amount")]
		public EdjCase.ICP.Candid.Models.UnboundedUInt Amount { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("owner")]
		public EdjCase.ICP.Candid.Models.Principal Owner { get; set; }

		[EdjCase.ICP.Candid.Mapping.CandidNameAttribute("token")]
		public Token Token { get; set; }

		public Balance(EdjCase.ICP.Candid.Models.UnboundedUInt amount, EdjCase.ICP.Candid.Models.Principal owner, Token token)
		{
			this.Amount = amount;
			this.Owner = owner;
			this.Token = token;
		}
	}
}
