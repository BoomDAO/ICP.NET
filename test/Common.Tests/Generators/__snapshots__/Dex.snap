{
  "Name": "Dex",
  "ClientFile": "public class DexApiClient\n{\n\tpublic IAgent Agent { get; }\n\tpublic Principal CanisterId { get; }\n\tpublic DexApiClient(IAgent agent, Principal canisterId)\n\t{\n\t\tthis.Agent = agent ?? throw new ArgumentNullException(nameof(agent));\n\t\tthis.Can`isterId = canisterId ?? throw new ArgumentNullException(nameof(canisterId));\n\t}\n\tpublic async Task<EdjCase.ICP.Clients.Models.CancelOrderReceipt> CancelOrder(OrderId arg0)\n\t{\n\t\tstring method = \"cancelOrder\";\n\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<OrderId>(arg0);\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t\tp0,\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tEdjCase.ICP.Clients.Models.CancelOrderReceipt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.CancelOrderReceipt>();\n\t\treturn (r0);\n\t}\n\tpublic async Task Clear()\n\t{\n\t\tstring method = \"clear\";\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t}\n\tpublic async Task Credit(EdjCase.ICP.Candid.Models.Principal arg0, Token arg1, EdjCase.ICP.Candid.UnboundedUInt arg2)\n\t{\n\t\tstring method = \"credit\";\n\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.Models.Principal>(arg0);\n\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<Token>(arg1);\n\t\tCandidValueWithType p2 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg2);\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t\tp0,\n\t\t\tp1,\n\t\t\tp2,\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t}\n\tpublic async Task<EdjCase.ICP.Clients.Models.DepositReceipt> Deposit(Token arg0)\n\t{\n\t\tstring method = \"deposit\";\n\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t\tp0,\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tEdjCase.ICP.Clients.Models.DepositReceipt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.DepositReceipt>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance>> GetAllBalances()\n\t{\n\t\tstring method = \"getAllBalances\";\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tSystem.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance>>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<EdjCase.ICP.Candid.UnboundedUInt> GetBalance(Token arg0)\n\t{\n\t\tstring method = \"getBalance\";\n\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t\tp0,\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tEdjCase.ICP.Candid.UnboundedUInt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Candid.UnboundedUInt>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance>> GetBalances()\n\t{\n\t\tstring method = \"getBalances\";\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tSystem.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance>>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<System.Collections.Generic.List<System.Byte>> GetDepositAddress()\n\t{\n\t\tstring method = \"getDepositAddress\";\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tSystem.Collections.Generic.List<System.Byte> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<System.Byte>>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<EdjCase.ICP.Clients.Models.Order?> GetOrder(OrderId arg0)\n\t{\n\t\tstring method = \"getOrder\";\n\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<OrderId>(arg0);\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t\tp0,\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tEdjCase.ICP.Clients.Models.Order? r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.Order?>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Order>> GetOrders()\n\t{\n\t\tstring method = \"getOrders\";\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tSystem.Collections.Generic.List<EdjCase.ICP.Clients.Models.Order> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Order>>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<System.String> GetSymbol(Token arg0)\n\t{\n\t\tstring method = \"getSymbol\";\n\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t\tp0,\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tSystem.String r0 = reply.Arg.Values[0].ToObject<System.String>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<EdjCase.ICP.Clients.Models.OrderPlacementReceipt> PlaceOrder(Token arg0, EdjCase.ICP.Candid.UnboundedUInt arg1, Token arg2, EdjCase.ICP.Candid.UnboundedUInt arg3)\n\t{\n\t\tstring method = \"placeOrder\";\n\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg1);\n\t\tCandidValueWithType p2 = CandidValueWithType.FromObject<Token>(arg2);\n\t\tCandidValueWithType p3 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg3);\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t\tp0,\n\t\t\tp1,\n\t\t\tp2,\n\t\t\tp3,\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tEdjCase.ICP.Clients.Models.OrderPlacementReceipt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.OrderPlacementReceipt>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<EdjCase.ICP.Candid.Models.Principal> Whoami()\n\t{\n\t\tstring method = \"whoami\";\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tEdjCase.ICP.Candid.Models.Principal r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Candid.Models.Principal>();\n\t\treturn (r0);\n\t}\n\tpublic async Task<EdjCase.ICP.Clients.Models.WithdrawReceipt> Withdraw(Token arg0, EdjCase.ICP.Candid.UnboundedUInt arg1, EdjCase.ICP.Candid.Models.Principal arg2)\n\t{\n\t\tstring method = \"withdraw\";\n\t\tCandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);\n\t\tCandidValueWithType p1 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg1);\n\t\tCandidValueWithType p2 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.Models.Principal>(arg2);\n\t\tvar candidArgs = new List<CandidValueWithType>\n\t\t{\n\t\t\tp0,\n\t\t\tp1,\n\t\t\tp2,\n\t\t};\n\t\tCandidArg arg = CandidArg.FromCandid(candidArgs);\n\t\tQueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);\n\t\tQueryReply reply = response.ThrowOrGetReply();\n\t\tEdjCase.ICP.Clients.Models.WithdrawReceipt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.WithdrawReceipt>();\n\t\treturn (r0);\n\t}\n}\n",
  "TypeFiles": [
    {
      "Item1": "WithdrawReceipt",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic enum WithdrawReceiptType\n\t{\n\t\tErr,\n\t\tOk,\n\t}\n\tpublic class WithdrawReceipt\n\t{\n\t\tpublic WithdrawReceiptType Type { get; }\n\t\tprivate readonly object? value;\n\t\t\n\t\tpublic WithdrawReceipt(WithdrawReceiptType type, object? value)\n\t\t{\n\t\t\tthis.Type = type;\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic static WithdrawReceipt Err(EdjCase.ICP.Clients.Models.WithdrawErr info)\n\t\t{\n\t\t\treturn new WithdrawReceipt(WithdrawReceiptType.Err, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Clients.Models.WithdrawErr AsErr()\n\t\t{\n\t\t\tthis.ValidateType(WithdrawReceiptType.Err);\n\t\t\treturn (EdjCase.ICP.Clients.Models.WithdrawErr)this.value!;\n\t\t}\n\t\t\n\t\tpublic static WithdrawReceipt Ok(EdjCase.ICP.Candid.UnboundedUInt info)\n\t\t{\n\t\t\treturn new WithdrawReceipt(WithdrawReceiptType.Ok, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt AsOk()\n\t\t{\n\t\t\tthis.ValidateType(WithdrawReceiptType.Ok);\n\t\t\treturn (EdjCase.ICP.Candid.UnboundedUInt)this.value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateType(WithdrawReceiptType type)\n\t\t{\n\t\t\tif (this.Type != type)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Type}' to type '{type}'\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "WithdrawErr",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic enum WithdrawErrType\n\t{\n\t\tBalanceLow,\n\t\tTransferFailure,\n\t}\n\tpublic class WithdrawErr\n\t{\n\t\tpublic WithdrawErrType Type { get; }\n\t\tprivate readonly object? value;\n\t\t\n\t\tpublic WithdrawErr(WithdrawErrType type, object? value)\n\t\t{\n\t\t\tthis.Type = type;\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic static WithdrawErr BalanceLow()\n\t\t{\n\t\t\treturn new WithdrawErr(WithdrawErrType.BalanceLow, null);\n\t\t}\n\t\t\n\t\tpublic static WithdrawErr TransferFailure()\n\t\t{\n\t\t\treturn new WithdrawErr(WithdrawErrType.TransferFailure, null);\n\t\t}\n\t\t\n\t\tprivate void ValidateType(WithdrawErrType type)\n\t\t{\n\t\t\tif (this.Type != type)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Type}' to type '{type}'\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "OrderPlacementReceipt",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic enum OrderPlacementReceiptType\n\t{\n\t\tErr,\n\t\tOk,\n\t}\n\tpublic class OrderPlacementReceipt\n\t{\n\t\tpublic OrderPlacementReceiptType Type { get; }\n\t\tprivate readonly object? value;\n\t\t\n\t\tpublic OrderPlacementReceipt(OrderPlacementReceiptType type, object? value)\n\t\t{\n\t\t\tthis.Type = type;\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic static OrderPlacementReceipt Err(EdjCase.ICP.Clients.Models.OrderPlacementErr info)\n\t\t{\n\t\t\treturn new OrderPlacementReceipt(OrderPlacementReceiptType.Err, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Clients.Models.OrderPlacementErr AsErr()\n\t\t{\n\t\t\tthis.ValidateType(OrderPlacementReceiptType.Err);\n\t\t\treturn (EdjCase.ICP.Clients.Models.OrderPlacementErr)this.value!;\n\t\t}\n\t\t\n\t\tpublic static OrderPlacementReceipt Ok(EdjCase.ICP.Clients.Models.Order? info)\n\t\t{\n\t\t\treturn new OrderPlacementReceipt(OrderPlacementReceiptType.Ok, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Clients.Models.Order? AsOk()\n\t\t{\n\t\t\tthis.ValidateType(OrderPlacementReceiptType.Ok);\n\t\t\treturn (EdjCase.ICP.Clients.Models.Order?)this.value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateType(OrderPlacementReceiptType type)\n\t\t{\n\t\t\tif (this.Type != type)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Type}' to type '{type}'\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "OrderPlacementErr",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic enum OrderPlacementErrType\n\t{\n\t\tInvalidOrder,\n\t\tOrderBookFull,\n\t}\n\tpublic class OrderPlacementErr\n\t{\n\t\tpublic OrderPlacementErrType Type { get; }\n\t\tprivate readonly object? value;\n\t\t\n\t\tpublic OrderPlacementErr(OrderPlacementErrType type, object? value)\n\t\t{\n\t\t\tthis.Type = type;\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic static OrderPlacementErr InvalidOrder()\n\t\t{\n\t\t\treturn new OrderPlacementErr(OrderPlacementErrType.InvalidOrder, null);\n\t\t}\n\t\t\n\t\tpublic static OrderPlacementErr OrderBookFull()\n\t\t{\n\t\t\treturn new OrderPlacementErr(OrderPlacementErrType.OrderBookFull, null);\n\t\t}\n\t\t\n\t\tprivate void ValidateType(OrderPlacementErrType type)\n\t\t{\n\t\t\tif (this.Type != type)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Type}' to type '{type}'\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "Order",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic class Order\n\t{\n\t\tpublic Token From { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt FromAmount { get; set; }\n\t\t\n\t\tpublic OrderId Id { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal Owner { get; set; }\n\t\t\n\t\tpublic Token To { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt ToAmount { get; set; }\n\t\t\n\t}\n}\n"
    },
    {
      "Item1": "DepositReceipt",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic enum DepositReceiptType\n\t{\n\t\tErr,\n\t\tOk,\n\t}\n\tpublic class DepositReceipt\n\t{\n\t\tpublic DepositReceiptType Type { get; }\n\t\tprivate readonly object? value;\n\t\t\n\t\tpublic DepositReceipt(DepositReceiptType type, object? value)\n\t\t{\n\t\t\tthis.Type = type;\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic static DepositReceipt Err(EdjCase.ICP.Clients.Models.DepositErr info)\n\t\t{\n\t\t\treturn new DepositReceipt(DepositReceiptType.Err, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Clients.Models.DepositErr AsErr()\n\t\t{\n\t\t\tthis.ValidateType(DepositReceiptType.Err);\n\t\t\treturn (EdjCase.ICP.Clients.Models.DepositErr)this.value!;\n\t\t}\n\t\t\n\t\tpublic static DepositReceipt Ok(EdjCase.ICP.Candid.UnboundedUInt info)\n\t\t{\n\t\t\treturn new DepositReceipt(DepositReceiptType.Ok, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt AsOk()\n\t\t{\n\t\t\tthis.ValidateType(DepositReceiptType.Ok);\n\t\t\treturn (EdjCase.ICP.Candid.UnboundedUInt)this.value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateType(DepositReceiptType type)\n\t\t{\n\t\t\tif (this.Type != type)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Type}' to type '{type}'\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "DepositErr",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic enum DepositErrType\n\t{\n\t\tBalanceLow,\n\t\tTransferFailure,\n\t}\n\tpublic class DepositErr\n\t{\n\t\tpublic DepositErrType Type { get; }\n\t\tprivate readonly object? value;\n\t\t\n\t\tpublic DepositErr(DepositErrType type, object? value)\n\t\t{\n\t\t\tthis.Type = type;\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic static DepositErr BalanceLow()\n\t\t{\n\t\t\treturn new DepositErr(DepositErrType.BalanceLow, null);\n\t\t}\n\t\t\n\t\tpublic static DepositErr TransferFailure()\n\t\t{\n\t\t\treturn new DepositErr(DepositErrType.TransferFailure, null);\n\t\t}\n\t\t\n\t\tprivate void ValidateType(DepositErrType type)\n\t\t{\n\t\t\tif (this.Type != type)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Type}' to type '{type}'\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "CancelOrderReceipt",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic enum CancelOrderReceiptType\n\t{\n\t\tErr,\n\t\tOk,\n\t}\n\tpublic class CancelOrderReceipt\n\t{\n\t\tpublic CancelOrderReceiptType Type { get; }\n\t\tprivate readonly object? value;\n\t\t\n\t\tpublic CancelOrderReceipt(CancelOrderReceiptType type, object? value)\n\t\t{\n\t\t\tthis.Type = type;\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic static CancelOrderReceipt Err(EdjCase.ICP.Clients.Models.CancelOrderErr info)\n\t\t{\n\t\t\treturn new CancelOrderReceipt(CancelOrderReceiptType.Err, info);\n\t\t}\n\t\t\n\t\tpublic EdjCase.ICP.Clients.Models.CancelOrderErr AsErr()\n\t\t{\n\t\t\tthis.ValidateType(CancelOrderReceiptType.Err);\n\t\t\treturn (EdjCase.ICP.Clients.Models.CancelOrderErr)this.value!;\n\t\t}\n\t\t\n\t\tpublic static CancelOrderReceipt Ok(OrderId info)\n\t\t{\n\t\t\treturn new CancelOrderReceipt(CancelOrderReceiptType.Ok, info);\n\t\t}\n\t\t\n\t\tpublic OrderId AsOk()\n\t\t{\n\t\t\tthis.ValidateType(CancelOrderReceiptType.Ok);\n\t\t\treturn (OrderId)this.value!;\n\t\t}\n\t\t\n\t\tprivate void ValidateType(CancelOrderReceiptType type)\n\t\t{\n\t\t\tif (this.Type != type)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Type}' to type '{type}'\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "CancelOrderErr",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic enum CancelOrderErrType\n\t{\n\t\tNotAllowed,\n\t\tNotExistingOrder,\n\t}\n\tpublic class CancelOrderErr\n\t{\n\t\tpublic CancelOrderErrType Type { get; }\n\t\tprivate readonly object? value;\n\t\t\n\t\tpublic CancelOrderErr(CancelOrderErrType type, object? value)\n\t\t{\n\t\t\tthis.Type = type;\n\t\t\tthis.value = value;\n\t\t}\n\t\t\n\t\tpublic static CancelOrderErr NotAllowed()\n\t\t{\n\t\t\treturn new CancelOrderErr(CancelOrderErrType.NotAllowed, null);\n\t\t}\n\t\t\n\t\tpublic static CancelOrderErr NotExistingOrder()\n\t\t{\n\t\t\treturn new CancelOrderErr(CancelOrderErrType.NotExistingOrder, null);\n\t\t}\n\t\t\n\t\tprivate void ValidateType(CancelOrderErrType type)\n\t\t{\n\t\t\tif (this.Type != type)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException($\"Cannot cast '{this.Type}' to type '{type}'\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "Item1": "Balance",
      "Item2": "namespace EdjCase.ICP.Clients.Models\n{\n\tpublic class Balance\n\t{\n\t\tpublic EdjCase.ICP.Candid.UnboundedUInt Amount { get; set; }\n\t\t\n\t\tpublic EdjCase.ICP.Candid.Models.Principal Owner { get; set; }\n\t\t\n\t\tpublic Token Token { get; set; }\n\t\t\n\t}\n}\n"
    }
  ],
  "AliasFile": "global using Token = EdjCase.ICP.Candid.Models.Principal;\nglobal using OrderId = System.UInt32;\n"
}
