[  
namespace EdjCase.ICP.Clients.Models
{
	public class AccountIdentifier
	{
		public System.Collections.Generic.List<byte> Hash { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum ActionType
	{
		RegisterKnownNeuron,
		ManageNeuron,
		ExecuteNnsFunction,
		RewardNodeProvider,
		SetDefaultFollowees,
		RewardNodeProviders,
		ManageNetworkEconomics,
		ApproveGenesisKyc,
		AddOrRemoveNodeProvider,
		Motion,
	}
	public class Action
	{
		public ActionType Type { get; }
		private readonly object? value;
		
		public Action(ActionType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Action RegisterKnownNeuron(EdjCase.ICP.Clients.Models.KnownNeuron info)
		{
			return new Action(ActionType.RegisterKnownNeuron, info);
		}
		
		public EdjCase.ICP.Clients.Models.KnownNeuron AsRegisterKnownNeuron()
		{
			this.ValidateType(ActionType.RegisterKnownNeuron);
			return (EdjCase.ICP.Clients.Models.KnownNeuron)this.value!;
		}
		
		public static Action ManageNeuron(EdjCase.ICP.Clients.Models.ManageNeuron info)
		{
			return new Action(ActionType.ManageNeuron, info);
		}
		
		public EdjCase.ICP.Clients.Models.ManageNeuron AsManageNeuron()
		{
			this.ValidateType(ActionType.ManageNeuron);
			return (EdjCase.ICP.Clients.Models.ManageNeuron)this.value!;
		}
		
		public static Action ExecuteNnsFunction(EdjCase.ICP.Clients.Models.ExecuteNnsFunction info)
		{
			return new Action(ActionType.ExecuteNnsFunction, info);
		}
		
		public EdjCase.ICP.Clients.Models.ExecuteNnsFunction AsExecuteNnsFunction()
		{
			this.ValidateType(ActionType.ExecuteNnsFunction);
			return (EdjCase.ICP.Clients.Models.ExecuteNnsFunction)this.value!;
		}
		
		public static Action RewardNodeProvider(EdjCase.ICP.Clients.Models.RewardNodeProvider info)
		{
			return new Action(ActionType.RewardNodeProvider, info);
		}
		
		public EdjCase.ICP.Clients.Models.RewardNodeProvider AsRewardNodeProvider()
		{
			this.ValidateType(ActionType.RewardNodeProvider);
			return (EdjCase.ICP.Clients.Models.RewardNodeProvider)this.value!;
		}
		
		public static Action SetDefaultFollowees(EdjCase.ICP.Clients.Models.SetDefaultFollowees info)
		{
			return new Action(ActionType.SetDefaultFollowees, info);
		}
		
		public EdjCase.ICP.Clients.Models.SetDefaultFollowees AsSetDefaultFollowees()
		{
			this.ValidateType(ActionType.SetDefaultFollowees);
			return (EdjCase.ICP.Clients.Models.SetDefaultFollowees)this.value!;
		}
		
		public static Action RewardNodeProviders(EdjCase.ICP.Clients.Models.RewardNodeProviders info)
		{
			return new Action(ActionType.RewardNodeProviders, info);
		}
		
		public EdjCase.ICP.Clients.Models.RewardNodeProviders AsRewardNodeProviders()
		{
			this.ValidateType(ActionType.RewardNodeProviders);
			return (EdjCase.ICP.Clients.Models.RewardNodeProviders)this.value!;
		}
		
		public static Action ManageNetworkEconomics(EdjCase.ICP.Clients.Models.NetworkEconomics info)
		{
			return new Action(ActionType.ManageNetworkEconomics, info);
		}
		
		public EdjCase.ICP.Clients.Models.NetworkEconomics AsManageNetworkEconomics()
		{
			this.ValidateType(ActionType.ManageNetworkEconomics);
			return (EdjCase.ICP.Clients.Models.NetworkEconomics)this.value!;
		}
		
		public static Action ApproveGenesisKyc(EdjCase.ICP.Clients.Models.ApproveGenesisKyc info)
		{
			return new Action(ActionType.ApproveGenesisKyc, info);
		}
		
		public EdjCase.ICP.Clients.Models.ApproveGenesisKyc AsApproveGenesisKyc()
		{
			this.ValidateType(ActionType.ApproveGenesisKyc);
			return (EdjCase.ICP.Clients.Models.ApproveGenesisKyc)this.value!;
		}
		
		public static Action AddOrRemoveNodeProvider(EdjCase.ICP.Clients.Models.AddOrRemoveNodeProvider info)
		{
			return new Action(ActionType.AddOrRemoveNodeProvider, info);
		}
		
		public EdjCase.ICP.Clients.Models.AddOrRemoveNodeProvider AsAddOrRemoveNodeProvider()
		{
			this.ValidateType(ActionType.AddOrRemoveNodeProvider);
			return (EdjCase.ICP.Clients.Models.AddOrRemoveNodeProvider)this.value!;
		}
		
		public static Action Motion(EdjCase.ICP.Clients.Models.Motion info)
		{
			return new Action(ActionType.Motion, info);
		}
		
		public EdjCase.ICP.Clients.Models.Motion AsMotion()
		{
			this.ValidateType(ActionType.Motion);
			return (EdjCase.ICP.Clients.Models.Motion)this.value!;
		}
		
		private void ValidateType(ActionType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class AddHotKey
	{
		public EdjCase.ICP.Candid.Models.Principal? NewHotKey { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class AddOrRemoveNodeProvider
	{
		public EdjCase.ICP.Clients.Models.Change? Change { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Amount
	{
		public ulong E8s { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ApproveGenesisKyc
	{
		public System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> Principals { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Ballot
	{
		public int Vote { get; set; }
		
		public ulong VotingPower { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class BallotInfo
	{
		public int Vote { get; set; }
		
		public EdjCase.ICP.Clients.Models.NeuronId? ProposalId { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum ByType
	{
		NeuronIdOrSubaccount,
		MemoAndController,
		Memo,
	}
	public class By
	{
		public ByType Type { get; }
		private readonly object? value;
		
		public By(ByType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static By NeuronIdOrSubaccount(NeuronIdOrSubaccountInfo info)
		{
			return new By(ByType.NeuronIdOrSubaccount, info);
		}
		
		public NeuronIdOrSubaccountInfo AsNeuronIdOrSubaccount()
		{
			this.ValidateType(ByType.NeuronIdOrSubaccount);
			return (NeuronIdOrSubaccountInfo)this.value!;
		}
		
		public static By MemoAndController(EdjCase.ICP.Clients.Models.ClaimOrRefreshNeuronFromAccount info)
		{
			return new By(ByType.MemoAndController, info);
		}
		
		public EdjCase.ICP.Clients.Models.ClaimOrRefreshNeuronFromAccount AsMemoAndController()
		{
			this.ValidateType(ByType.MemoAndController);
			return (EdjCase.ICP.Clients.Models.ClaimOrRefreshNeuronFromAccount)this.value!;
		}
		
		public static By Memo(ulong info)
		{
			return new By(ByType.Memo, info);
		}
		
		public ulong AsMemo()
		{
			this.ValidateType(ByType.Memo);
			return (ulong)this.value!;
		}
		
		private void ValidateType(ByType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
		public class NeuronIdOrSubaccountInfo
		{
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum ChangeType
	{
		ToRemove,
		ToAdd,
	}
	public class Change
	{
		public ChangeType Type { get; }
		private readonly object? value;
		
		public Change(ChangeType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Change ToRemove(EdjCase.ICP.Clients.Models.NodeProvider info)
		{
			return new Change(ChangeType.ToRemove, info);
		}
		
		public EdjCase.ICP.Clients.Models.NodeProvider AsToRemove()
		{
			this.ValidateType(ChangeType.ToRemove);
			return (EdjCase.ICP.Clients.Models.NodeProvider)this.value!;
		}
		
		public static Change ToAdd(EdjCase.ICP.Clients.Models.NodeProvider info)
		{
			return new Change(ChangeType.ToAdd, info);
		}
		
		public EdjCase.ICP.Clients.Models.NodeProvider AsToAdd()
		{
			this.ValidateType(ChangeType.ToAdd);
			return (EdjCase.ICP.Clients.Models.NodeProvider)this.value!;
		}
		
		private void ValidateType(ChangeType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ClaimOrRefresh
	{
		public EdjCase.ICP.Clients.Models.By? By { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ClaimOrRefreshNeuronFromAccount
	{
		public EdjCase.ICP.Candid.Models.Principal? Controller { get; set; }
		
		public ulong Memo { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ClaimOrRefreshNeuronFromAccountResponse
	{
		public EdjCase.ICP.Clients.Models.Result1? Result { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ClaimOrRefreshResponse
	{
		public EdjCase.ICP.Clients.Models.NeuronId? RefreshedNeuronId { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum CommandType
	{
		Spawn,
		Split,
		Follow,
		ClaimOrRefresh,
		Configure,
		RegisterVote,
		Merge,
		DisburseToNeuron,
		MakeProposal,
		MergeMaturity,
		Disburse,
	}
	public class Command
	{
		public CommandType Type { get; }
		private readonly object? value;
		
		public Command(CommandType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Command Spawn(EdjCase.ICP.Clients.Models.Spawn info)
		{
			return new Command(CommandType.Spawn, info);
		}
		
		public EdjCase.ICP.Clients.Models.Spawn AsSpawn()
		{
			this.ValidateType(CommandType.Spawn);
			return (EdjCase.ICP.Clients.Models.Spawn)this.value!;
		}
		
		public static Command Split(EdjCase.ICP.Clients.Models.Split info)
		{
			return new Command(CommandType.Split, info);
		}
		
		public EdjCase.ICP.Clients.Models.Split AsSplit()
		{
			this.ValidateType(CommandType.Split);
			return (EdjCase.ICP.Clients.Models.Split)this.value!;
		}
		
		public static Command Follow(EdjCase.ICP.Clients.Models.Follow info)
		{
			return new Command(CommandType.Follow, info);
		}
		
		public EdjCase.ICP.Clients.Models.Follow AsFollow()
		{
			this.ValidateType(CommandType.Follow);
			return (EdjCase.ICP.Clients.Models.Follow)this.value!;
		}
		
		public static Command ClaimOrRefresh(EdjCase.ICP.Clients.Models.ClaimOrRefresh info)
		{
			return new Command(CommandType.ClaimOrRefresh, info);
		}
		
		public EdjCase.ICP.Clients.Models.ClaimOrRefresh AsClaimOrRefresh()
		{
			this.ValidateType(CommandType.ClaimOrRefresh);
			return (EdjCase.ICP.Clients.Models.ClaimOrRefresh)this.value!;
		}
		
		public static Command Configure(EdjCase.ICP.Clients.Models.Configure info)
		{
			return new Command(CommandType.Configure, info);
		}
		
		public EdjCase.ICP.Clients.Models.Configure AsConfigure()
		{
			this.ValidateType(CommandType.Configure);
			return (EdjCase.ICP.Clients.Models.Configure)this.value!;
		}
		
		public static Command RegisterVote(EdjCase.ICP.Clients.Models.RegisterVote info)
		{
			return new Command(CommandType.RegisterVote, info);
		}
		
		public EdjCase.ICP.Clients.Models.RegisterVote AsRegisterVote()
		{
			this.ValidateType(CommandType.RegisterVote);
			return (EdjCase.ICP.Clients.Models.RegisterVote)this.value!;
		}
		
		public static Command Merge(EdjCase.ICP.Clients.Models.Merge info)
		{
			return new Command(CommandType.Merge, info);
		}
		
		public EdjCase.ICP.Clients.Models.Merge AsMerge()
		{
			this.ValidateType(CommandType.Merge);
			return (EdjCase.ICP.Clients.Models.Merge)this.value!;
		}
		
		public static Command DisburseToNeuron(EdjCase.ICP.Clients.Models.DisburseToNeuron info)
		{
			return new Command(CommandType.DisburseToNeuron, info);
		}
		
		public EdjCase.ICP.Clients.Models.DisburseToNeuron AsDisburseToNeuron()
		{
			this.ValidateType(CommandType.DisburseToNeuron);
			return (EdjCase.ICP.Clients.Models.DisburseToNeuron)this.value!;
		}
		
		public static Command MakeProposal(EdjCase.ICP.Clients.Models.Proposal info)
		{
			return new Command(CommandType.MakeProposal, info);
		}
		
		public EdjCase.ICP.Clients.Models.Proposal AsMakeProposal()
		{
			this.ValidateType(CommandType.MakeProposal);
			return (EdjCase.ICP.Clients.Models.Proposal)this.value!;
		}
		
		public static Command MergeMaturity(EdjCase.ICP.Clients.Models.MergeMaturity info)
		{
			return new Command(CommandType.MergeMaturity, info);
		}
		
		public EdjCase.ICP.Clients.Models.MergeMaturity AsMergeMaturity()
		{
			this.ValidateType(CommandType.MergeMaturity);
			return (EdjCase.ICP.Clients.Models.MergeMaturity)this.value!;
		}
		
		public static Command Disburse(EdjCase.ICP.Clients.Models.Disburse info)
		{
			return new Command(CommandType.Disburse, info);
		}
		
		public EdjCase.ICP.Clients.Models.Disburse AsDisburse()
		{
			this.ValidateType(CommandType.Disburse);
			return (EdjCase.ICP.Clients.Models.Disburse)this.value!;
		}
		
		private void ValidateType(CommandType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum Command1Type
	{
		Error,
		Spawn,
		Split,
		Follow,
		ClaimOrRefresh,
		Configure,
		RegisterVote,
		Merge,
		DisburseToNeuron,
		MakeProposal,
		MergeMaturity,
		Disburse,
	}
	public class Command1
	{
		public Command1Type Type { get; }
		private readonly object? value;
		
		public Command1(Command1Type type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Command1 Error(EdjCase.ICP.Clients.Models.GovernanceError info)
		{
			return new Command1(Command1Type.Error, info);
		}
		
		public EdjCase.ICP.Clients.Models.GovernanceError AsError()
		{
			this.ValidateType(Command1Type.Error);
			return (EdjCase.ICP.Clients.Models.GovernanceError)this.value!;
		}
		
		public static Command1 Spawn(EdjCase.ICP.Clients.Models.SpawnResponse info)
		{
			return new Command1(Command1Type.Spawn, info);
		}
		
		public EdjCase.ICP.Clients.Models.SpawnResponse AsSpawn()
		{
			this.ValidateType(Command1Type.Spawn);
			return (EdjCase.ICP.Clients.Models.SpawnResponse)this.value!;
		}
		
		public static Command1 Split(EdjCase.ICP.Clients.Models.SpawnResponse info)
		{
			return new Command1(Command1Type.Split, info);
		}
		
		public EdjCase.ICP.Clients.Models.SpawnResponse AsSplit()
		{
			this.ValidateType(Command1Type.Split);
			return (EdjCase.ICP.Clients.Models.SpawnResponse)this.value!;
		}
		
		public static Command1 Follow(FollowInfo info)
		{
			return new Command1(Command1Type.Follow, info);
		}
		
		public FollowInfo AsFollow()
		{
			this.ValidateType(Command1Type.Follow);
			return (FollowInfo)this.value!;
		}
		
		public static Command1 ClaimOrRefresh(EdjCase.ICP.Clients.Models.ClaimOrRefreshResponse info)
		{
			return new Command1(Command1Type.ClaimOrRefresh, info);
		}
		
		public EdjCase.ICP.Clients.Models.ClaimOrRefreshResponse AsClaimOrRefresh()
		{
			this.ValidateType(Command1Type.ClaimOrRefresh);
			return (EdjCase.ICP.Clients.Models.ClaimOrRefreshResponse)this.value!;
		}
		
		public static Command1 Configure(ConfigureInfo info)
		{
			return new Command1(Command1Type.Configure, info);
		}
		
		public ConfigureInfo AsConfigure()
		{
			this.ValidateType(Command1Type.Configure);
			return (ConfigureInfo)this.value!;
		}
		
		public static Command1 RegisterVote(RegisterVoteInfo info)
		{
			return new Command1(Command1Type.RegisterVote, info);
		}
		
		public RegisterVoteInfo AsRegisterVote()
		{
			this.ValidateType(Command1Type.RegisterVote);
			return (RegisterVoteInfo)this.value!;
		}
		
		public static Command1 Merge(MergeInfo info)
		{
			return new Command1(Command1Type.Merge, info);
		}
		
		public MergeInfo AsMerge()
		{
			this.ValidateType(Command1Type.Merge);
			return (MergeInfo)this.value!;
		}
		
		public static Command1 DisburseToNeuron(EdjCase.ICP.Clients.Models.SpawnResponse info)
		{
			return new Command1(Command1Type.DisburseToNeuron, info);
		}
		
		public EdjCase.ICP.Clients.Models.SpawnResponse AsDisburseToNeuron()
		{
			this.ValidateType(Command1Type.DisburseToNeuron);
			return (EdjCase.ICP.Clients.Models.SpawnResponse)this.value!;
		}
		
		public static Command1 MakeProposal(EdjCase.ICP.Clients.Models.MakeProposalResponse info)
		{
			return new Command1(Command1Type.MakeProposal, info);
		}
		
		public EdjCase.ICP.Clients.Models.MakeProposalResponse AsMakeProposal()
		{
			this.ValidateType(Command1Type.MakeProposal);
			return (EdjCase.ICP.Clients.Models.MakeProposalResponse)this.value!;
		}
		
		public static Command1 MergeMaturity(EdjCase.ICP.Clients.Models.MergeMaturityResponse info)
		{
			return new Command1(Command1Type.MergeMaturity, info);
		}
		
		public EdjCase.ICP.Clients.Models.MergeMaturityResponse AsMergeMaturity()
		{
			this.ValidateType(Command1Type.MergeMaturity);
			return (EdjCase.ICP.Clients.Models.MergeMaturityResponse)this.value!;
		}
		
		public static Command1 Disburse(EdjCase.ICP.Clients.Models.DisburseResponse info)
		{
			return new Command1(Command1Type.Disburse, info);
		}
		
		public EdjCase.ICP.Clients.Models.DisburseResponse AsDisburse()
		{
			this.ValidateType(Command1Type.Disburse);
			return (EdjCase.ICP.Clients.Models.DisburseResponse)this.value!;
		}
		
		private void ValidateType(Command1Type type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
		public class FollowInfo
		{
		}
		public class ConfigureInfo
		{
		}
		public class RegisterVoteInfo
		{
		}
		public class MergeInfo
		{
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum Command2Type
	{
		Spawn,
		Split,
		Configure,
		Merge,
		DisburseToNeuron,
		ClaimOrRefreshNeuron,
		MergeMaturity,
		Disburse,
	}
	public class Command2
	{
		public Command2Type Type { get; }
		private readonly object? value;
		
		public Command2(Command2Type type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Command2 Spawn(EdjCase.ICP.Clients.Models.Spawn info)
		{
			return new Command2(Command2Type.Spawn, info);
		}
		
		public EdjCase.ICP.Clients.Models.Spawn AsSpawn()
		{
			this.ValidateType(Command2Type.Spawn);
			return (EdjCase.ICP.Clients.Models.Spawn)this.value!;
		}
		
		public static Command2 Split(EdjCase.ICP.Clients.Models.Split info)
		{
			return new Command2(Command2Type.Split, info);
		}
		
		public EdjCase.ICP.Clients.Models.Split AsSplit()
		{
			this.ValidateType(Command2Type.Split);
			return (EdjCase.ICP.Clients.Models.Split)this.value!;
		}
		
		public static Command2 Configure(EdjCase.ICP.Clients.Models.Configure info)
		{
			return new Command2(Command2Type.Configure, info);
		}
		
		public EdjCase.ICP.Clients.Models.Configure AsConfigure()
		{
			this.ValidateType(Command2Type.Configure);
			return (EdjCase.ICP.Clients.Models.Configure)this.value!;
		}
		
		public static Command2 Merge(EdjCase.ICP.Clients.Models.Merge info)
		{
			return new Command2(Command2Type.Merge, info);
		}
		
		public EdjCase.ICP.Clients.Models.Merge AsMerge()
		{
			this.ValidateType(Command2Type.Merge);
			return (EdjCase.ICP.Clients.Models.Merge)this.value!;
		}
		
		public static Command2 DisburseToNeuron(EdjCase.ICP.Clients.Models.DisburseToNeuron info)
		{
			return new Command2(Command2Type.DisburseToNeuron, info);
		}
		
		public EdjCase.ICP.Clients.Models.DisburseToNeuron AsDisburseToNeuron()
		{
			this.ValidateType(Command2Type.DisburseToNeuron);
			return (EdjCase.ICP.Clients.Models.DisburseToNeuron)this.value!;
		}
		
		public static Command2 ClaimOrRefreshNeuron(EdjCase.ICP.Clients.Models.ClaimOrRefresh info)
		{
			return new Command2(Command2Type.ClaimOrRefreshNeuron, info);
		}
		
		public EdjCase.ICP.Clients.Models.ClaimOrRefresh AsClaimOrRefreshNeuron()
		{
			this.ValidateType(Command2Type.ClaimOrRefreshNeuron);
			return (EdjCase.ICP.Clients.Models.ClaimOrRefresh)this.value!;
		}
		
		public static Command2 MergeMaturity(EdjCase.ICP.Clients.Models.MergeMaturity info)
		{
			return new Command2(Command2Type.MergeMaturity, info);
		}
		
		public EdjCase.ICP.Clients.Models.MergeMaturity AsMergeMaturity()
		{
			this.ValidateType(Command2Type.MergeMaturity);
			return (EdjCase.ICP.Clients.Models.MergeMaturity)this.value!;
		}
		
		public static Command2 Disburse(EdjCase.ICP.Clients.Models.Disburse info)
		{
			return new Command2(Command2Type.Disburse, info);
		}
		
		public EdjCase.ICP.Clients.Models.Disburse AsDisburse()
		{
			this.ValidateType(Command2Type.Disburse);
			return (EdjCase.ICP.Clients.Models.Disburse)this.value!;
		}
		
		private void ValidateType(Command2Type type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Configure
	{
		public EdjCase.ICP.Clients.Models.Operation? Operation { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Disburse
	{
		public EdjCase.ICP.Clients.Models.AccountIdentifier? ToAccount { get; set; }
		
		public EdjCase.ICP.Clients.Models.Amount? Amount { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class DisburseResponse
	{
		public ulong TransferBlockHeight { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class DisburseToNeuron
	{
		public ulong DissolveDelaySeconds { get; set; }
		
		public bool KycVerified { get; set; }
		
		public ulong AmountE8s { get; set; }
		
		public EdjCase.ICP.Candid.Models.Principal? NewController { get; set; }
		
		public ulong Nonce { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum DissolveStateType
	{
		DissolveDelaySeconds,
		WhenDissolvedTimestampSeconds,
	}
	public class DissolveState
	{
		public DissolveStateType Type { get; }
		private readonly object? value;
		
		public DissolveState(DissolveStateType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static DissolveState DissolveDelaySeconds(ulong info)
		{
			return new DissolveState(DissolveStateType.DissolveDelaySeconds, info);
		}
		
		public ulong AsDissolveDelaySeconds()
		{
			this.ValidateType(DissolveStateType.DissolveDelaySeconds);
			return (ulong)this.value!;
		}
		
		public static DissolveState WhenDissolvedTimestampSeconds(ulong info)
		{
			return new DissolveState(DissolveStateType.WhenDissolvedTimestampSeconds, info);
		}
		
		public ulong AsWhenDissolvedTimestampSeconds()
		{
			this.ValidateType(DissolveStateType.WhenDissolvedTimestampSeconds);
			return (ulong)this.value!;
		}
		
		private void ValidateType(DissolveStateType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ExecuteNnsFunction
	{
		public int NnsFunction { get; set; }
		
		public System.Collections.Generic.List<byte> Payload { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Follow
	{
		public int Topic { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.NeuronId> Followees { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Followees
	{
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.NeuronId> Followees_ { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Governance
	{
		public System.Collections.Generic.List<DefaultFolloweesInfo> DefaultFollowees { get; set; }
		
		public ulong WaitForQuietThresholdSeconds { get; set; }
		
		public EdjCase.ICP.Clients.Models.GovernanceCachedMetrics? Metrics { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.NodeProvider> NodeProviders { get; set; }
		
		public EdjCase.ICP.Clients.Models.NetworkEconomics? Economics { get; set; }
		
		public EdjCase.ICP.Clients.Models.RewardEvent? LatestRewardEvent { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.NeuronStakeTransfer> ToClaimTransfers { get; set; }
		
		public ulong ShortVotingPeriodSeconds { get; set; }
		
		public System.Collections.Generic.List<ProposalsInfo> Proposals { get; set; }
		
		public System.Collections.Generic.List<InFlightCommandsInfo> InFlightCommands { get; set; }
		
		public System.Collections.Generic.List<NeuronsInfo> Neurons { get; set; }
		
		public ulong GenesisTimestampSeconds { get; set; }
		
		public class DefaultFolloweesInfo
		{
			public int F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.Followees F1 { get; set; }
			
		}
		public class ProposalsInfo
		{
			public ulong F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.ProposalData F1 { get; set; }
			
		}
		public class InFlightCommandsInfo
		{
			public ulong F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.NeuronInFlightCommand F1 { get; set; }
			
		}
		public class NeuronsInfo
		{
			public ulong F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.Neuron F1 { get; set; }
			
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class GovernanceCachedMetrics
	{
		public System.Collections.Generic.List<NotDissolvingNeuronsE8sBucketsInfo> NotDissolvingNeuronsE8sBuckets { get; set; }
		
		public ulong GarbageCollectableNeuronsCount { get; set; }
		
		public ulong NeuronsWithInvalidStakeCount { get; set; }
		
		public System.Collections.Generic.List<NotDissolvingNeuronsCountBucketsInfo> NotDissolvingNeuronsCountBuckets { get; set; }
		
		public ulong TotalSupplyIcp { get; set; }
		
		public ulong NeuronsWithLessThan6MonthsDissolveDelayCount { get; set; }
		
		public ulong DissolvedNeuronsCount { get; set; }
		
		public ulong TotalStakedE8s { get; set; }
		
		public ulong NotDissolvingNeuronsCount { get; set; }
		
		public ulong DissolvedNeuronsE8s { get; set; }
		
		public ulong NeuronsWithLessThan6MonthsDissolveDelayE8s { get; set; }
		
		public System.Collections.Generic.List<DissolvingNeuronsCountBucketsInfo> DissolvingNeuronsCountBuckets { get; set; }
		
		public ulong DissolvingNeuronsCount { get; set; }
		
		public System.Collections.Generic.List<DissolvingNeuronsE8sBucketsInfo> DissolvingNeuronsE8sBuckets { get; set; }
		
		public ulong CommunityFundTotalStakedE8s { get; set; }
		
		public ulong TimestampSeconds { get; set; }
		
		public class NotDissolvingNeuronsE8sBucketsInfo
		{
			public ulong F0 { get; set; }
			
			public double F1 { get; set; }
			
		}
		public class NotDissolvingNeuronsCountBucketsInfo
		{
			public ulong F0 { get; set; }
			
			public ulong F1 { get; set; }
			
		}
		public class DissolvingNeuronsCountBucketsInfo
		{
			public ulong F0 { get; set; }
			
			public ulong F1 { get; set; }
			
		}
		public class DissolvingNeuronsE8sBucketsInfo
		{
			public ulong F0 { get; set; }
			
			public double F1 { get; set; }
			
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class GovernanceError
	{
		public string ErrorMessage { get; set; }
		
		public int ErrorType { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class IncreaseDissolveDelay
	{
		public uint AdditionalDissolveDelaySeconds { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class KnownNeuron
	{
		public EdjCase.ICP.Clients.Models.NeuronId? Id { get; set; }
		
		public EdjCase.ICP.Clients.Models.KnownNeuronData? KnownNeuronData { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class KnownNeuronData
	{
		public string Name { get; set; }
		
		public string? Description { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ListKnownNeuronsResponse
	{
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.KnownNeuron> KnownNeurons { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ListNeurons
	{
		public System.Collections.Generic.List<ulong> NeuronIds { get; set; }
		
		public bool IncludeNeuronsReadableByCaller { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ListNeuronsResponse
	{
		public System.Collections.Generic.List<NeuronInfosInfo> NeuronInfos { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Neuron> FullNeurons { get; set; }
		
		public class NeuronInfosInfo
		{
			public ulong F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.NeuronInfo F1 { get; set; }
			
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ListNodeProvidersResponse
	{
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.NodeProvider> NodeProviders { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ListProposalInfo
	{
		public System.Collections.Generic.List<int> IncludeRewardStatus { get; set; }
		
		public EdjCase.ICP.Clients.Models.NeuronId? BeforeProposal { get; set; }
		
		public uint Limit { get; set; }
		
		public System.Collections.Generic.List<int> ExcludeTopic { get; set; }
		
		public System.Collections.Generic.List<int> IncludeStatus { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ListProposalInfoResponse
	{
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.ProposalInfo> ProposalInfo { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class MakeProposalResponse
	{
		public EdjCase.ICP.Clients.Models.NeuronId? ProposalId { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ManageNeuron
	{
		public EdjCase.ICP.Clients.Models.NeuronId? Id { get; set; }
		
		public EdjCase.ICP.Clients.Models.Command? Command { get; set; }
		
		public EdjCase.ICP.Clients.Models.NeuronIdOrSubaccount? NeuronIdOrSubaccount { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ManageNeuronResponse
	{
		public EdjCase.ICP.Clients.Models.Command1? Command { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Merge
	{
		public EdjCase.ICP.Clients.Models.NeuronId? SourceNeuronId { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class MergeMaturity
	{
		public uint PercentageToMerge { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class MergeMaturityResponse
	{
		public ulong MergedMaturityE8s { get; set; }
		
		public ulong NewStakeE8s { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Motion
	{
		public string MotionText { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class NetworkEconomics
	{
		public ulong NeuronMinimumStakeE8s { get; set; }
		
		public uint MaxProposalsToKeepPerTopic { get; set; }
		
		public ulong NeuronManagementFeePerProposalE8s { get; set; }
		
		public ulong RejectCostE8s { get; set; }
		
		public ulong TransactionFeeE8s { get; set; }
		
		public ulong NeuronSpawnDissolveDelaySeconds { get; set; }
		
		public ulong MinimumIcpXdrRate { get; set; }
		
		public ulong MaximumNodeProviderRewardsE8s { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Neuron
	{
		public EdjCase.ICP.Clients.Models.NeuronId? Id { get; set; }
		
		public EdjCase.ICP.Candid.Models.Principal? Controller { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.BallotInfo> RecentBallots { get; set; }
		
		public bool KycVerified { get; set; }
		
		public bool NotForProfit { get; set; }
		
		public ulong MaturityE8sEquivalent { get; set; }
		
		public ulong CachedNeuronStakeE8s { get; set; }
		
		public ulong CreatedTimestampSeconds { get; set; }
		
		public ulong AgingSinceTimestampSeconds { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Candid.Models.Principal> HotKeys { get; set; }
		
		public System.Collections.Generic.List<byte> Account { get; set; }
		
		public ulong? JoinedCommunityFundTimestampSeconds { get; set; }
		
		public EdjCase.ICP.Clients.Models.DissolveState? DissolveState { get; set; }
		
		public System.Collections.Generic.List<FolloweesInfo> Followees { get; set; }
		
		public ulong NeuronFeesE8s { get; set; }
		
		public EdjCase.ICP.Clients.Models.NeuronStakeTransfer? Transfer { get; set; }
		
		public EdjCase.ICP.Clients.Models.KnownNeuronData? KnownNeuronData { get; set; }
		
		public class FolloweesInfo
		{
			public int F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.Followees F1 { get; set; }
			
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class NeuronId
	{
		public ulong Id { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum NeuronIdOrSubaccountType
	{
		Subaccount,
		NeuronId,
	}
	public class NeuronIdOrSubaccount
	{
		public NeuronIdOrSubaccountType Type { get; }
		private readonly object? value;
		
		public NeuronIdOrSubaccount(NeuronIdOrSubaccountType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static NeuronIdOrSubaccount Subaccount(System.Collections.Generic.List<byte> info)
		{
			return new NeuronIdOrSubaccount(NeuronIdOrSubaccountType.Subaccount, info);
		}
		
		public System.Collections.Generic.List<byte> AsSubaccount()
		{
			this.ValidateType(NeuronIdOrSubaccountType.Subaccount);
			return (System.Collections.Generic.List<byte>)this.value!;
		}
		
		public static NeuronIdOrSubaccount NeuronId(EdjCase.ICP.Clients.Models.NeuronId info)
		{
			return new NeuronIdOrSubaccount(NeuronIdOrSubaccountType.NeuronId, info);
		}
		
		public EdjCase.ICP.Clients.Models.NeuronId AsNeuronId()
		{
			this.ValidateType(NeuronIdOrSubaccountType.NeuronId);
			return (EdjCase.ICP.Clients.Models.NeuronId)this.value!;
		}
		
		private void ValidateType(NeuronIdOrSubaccountType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class NeuronInFlightCommand
	{
		public EdjCase.ICP.Clients.Models.Command2? Command { get; set; }
		
		public ulong Timestamp { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class NeuronInfo
	{
		public ulong DissolveDelaySeconds { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.BallotInfo> RecentBallots { get; set; }
		
		public ulong CreatedTimestampSeconds { get; set; }
		
		public int State { get; set; }
		
		public ulong StakeE8s { get; set; }
		
		public ulong? JoinedCommunityFundTimestampSeconds { get; set; }
		
		public ulong RetrievedAtTimestampSeconds { get; set; }
		
		public EdjCase.ICP.Clients.Models.KnownNeuronData? KnownNeuronData { get; set; }
		
		public ulong VotingPower { get; set; }
		
		public ulong AgeSeconds { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class NeuronStakeTransfer
	{
		public System.Collections.Generic.List<byte> ToSubaccount { get; set; }
		
		public ulong NeuronStakeE8s { get; set; }
		
		public EdjCase.ICP.Candid.Models.Principal? From { get; set; }
		
		public ulong Memo { get; set; }
		
		public System.Collections.Generic.List<byte> FromSubaccount { get; set; }
		
		public ulong TransferTimestamp { get; set; }
		
		public ulong BlockHeight { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class NodeProvider
	{
		public EdjCase.ICP.Candid.Models.Principal? Id { get; set; }
		
		public EdjCase.ICP.Clients.Models.AccountIdentifier? RewardAccount { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum OperationType
	{
		RemoveHotKey,
		AddHotKey,
		StopDissolving,
		StartDissolving,
		IncreaseDissolveDelay,
		JoinCommunityFund,
		SetDissolveTimestamp,
	}
	public class Operation
	{
		public OperationType Type { get; }
		private readonly object? value;
		
		public Operation(OperationType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Operation RemoveHotKey(EdjCase.ICP.Clients.Models.RemoveHotKey info)
		{
			return new Operation(OperationType.RemoveHotKey, info);
		}
		
		public EdjCase.ICP.Clients.Models.RemoveHotKey AsRemoveHotKey()
		{
			this.ValidateType(OperationType.RemoveHotKey);
			return (EdjCase.ICP.Clients.Models.RemoveHotKey)this.value!;
		}
		
		public static Operation AddHotKey(EdjCase.ICP.Clients.Models.AddHotKey info)
		{
			return new Operation(OperationType.AddHotKey, info);
		}
		
		public EdjCase.ICP.Clients.Models.AddHotKey AsAddHotKey()
		{
			this.ValidateType(OperationType.AddHotKey);
			return (EdjCase.ICP.Clients.Models.AddHotKey)this.value!;
		}
		
		public static Operation StopDissolving(StopDissolvingInfo info)
		{
			return new Operation(OperationType.StopDissolving, info);
		}
		
		public StopDissolvingInfo AsStopDissolving()
		{
			this.ValidateType(OperationType.StopDissolving);
			return (StopDissolvingInfo)this.value!;
		}
		
		public static Operation StartDissolving(StartDissolvingInfo info)
		{
			return new Operation(OperationType.StartDissolving, info);
		}
		
		public StartDissolvingInfo AsStartDissolving()
		{
			this.ValidateType(OperationType.StartDissolving);
			return (StartDissolvingInfo)this.value!;
		}
		
		public static Operation IncreaseDissolveDelay(EdjCase.ICP.Clients.Models.IncreaseDissolveDelay info)
		{
			return new Operation(OperationType.IncreaseDissolveDelay, info);
		}
		
		public EdjCase.ICP.Clients.Models.IncreaseDissolveDelay AsIncreaseDissolveDelay()
		{
			this.ValidateType(OperationType.IncreaseDissolveDelay);
			return (EdjCase.ICP.Clients.Models.IncreaseDissolveDelay)this.value!;
		}
		
		public static Operation JoinCommunityFund(JoinCommunityFundInfo info)
		{
			return new Operation(OperationType.JoinCommunityFund, info);
		}
		
		public JoinCommunityFundInfo AsJoinCommunityFund()
		{
			this.ValidateType(OperationType.JoinCommunityFund);
			return (JoinCommunityFundInfo)this.value!;
		}
		
		public static Operation SetDissolveTimestamp(EdjCase.ICP.Clients.Models.SetDissolveTimestamp info)
		{
			return new Operation(OperationType.SetDissolveTimestamp, info);
		}
		
		public EdjCase.ICP.Clients.Models.SetDissolveTimestamp AsSetDissolveTimestamp()
		{
			this.ValidateType(OperationType.SetDissolveTimestamp);
			return (EdjCase.ICP.Clients.Models.SetDissolveTimestamp)this.value!;
		}
		
		private void ValidateType(OperationType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
		public class StopDissolvingInfo
		{
		}
		public class StartDissolvingInfo
		{
		}
		public class JoinCommunityFundInfo
		{
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Proposal
	{
		public string Url { get; set; }
		
		public string? Title { get; set; }
		
		public EdjCase.ICP.Clients.Models.Action? Action { get; set; }
		
		public string Summary { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ProposalData
	{
		public EdjCase.ICP.Clients.Models.NeuronId? Id { get; set; }
		
		public EdjCase.ICP.Clients.Models.GovernanceError? FailureReason { get; set; }
		
		public System.Collections.Generic.List<BallotsInfo> Ballots { get; set; }
		
		public ulong ProposalTimestampSeconds { get; set; }
		
		public ulong RewardEventRound { get; set; }
		
		public ulong FailedTimestampSeconds { get; set; }
		
		public ulong RejectCostE8s { get; set; }
		
		public EdjCase.ICP.Clients.Models.Tally? LatestTally { get; set; }
		
		public ulong DecidedTimestampSeconds { get; set; }
		
		public EdjCase.ICP.Clients.Models.Proposal? Proposal { get; set; }
		
		public EdjCase.ICP.Clients.Models.NeuronId? Proposer { get; set; }
		
		public EdjCase.ICP.Clients.Models.WaitForQuietState? WaitForQuietState { get; set; }
		
		public ulong ExecutedTimestampSeconds { get; set; }
		
		public class BallotsInfo
		{
			public ulong F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.Ballot F1 { get; set; }
			
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class ProposalInfo
	{
		public EdjCase.ICP.Clients.Models.NeuronId? Id { get; set; }
		
		public int Status { get; set; }
		
		public int Topic { get; set; }
		
		public EdjCase.ICP.Clients.Models.GovernanceError? FailureReason { get; set; }
		
		public System.Collections.Generic.List<BallotsInfo> Ballots { get; set; }
		
		public ulong ProposalTimestampSeconds { get; set; }
		
		public ulong RewardEventRound { get; set; }
		
		public ulong? DeadlineTimestampSeconds { get; set; }
		
		public ulong FailedTimestampSeconds { get; set; }
		
		public ulong RejectCostE8s { get; set; }
		
		public EdjCase.ICP.Clients.Models.Tally? LatestTally { get; set; }
		
		public int RewardStatus { get; set; }
		
		public ulong DecidedTimestampSeconds { get; set; }
		
		public EdjCase.ICP.Clients.Models.Proposal? Proposal { get; set; }
		
		public EdjCase.ICP.Clients.Models.NeuronId? Proposer { get; set; }
		
		public ulong ExecutedTimestampSeconds { get; set; }
		
		public class BallotsInfo
		{
			public ulong F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.Ballot F1 { get; set; }
			
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class RegisterVote
	{
		public int Vote { get; set; }
		
		public EdjCase.ICP.Clients.Models.NeuronId? Proposal { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class RemoveHotKey
	{
		public EdjCase.ICP.Candid.Models.Principal? HotKeyToRemove { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum ResultType
	{
		Ok,
		Err,
	}
	public class Result
	{
		public ResultType Type { get; }
		private readonly object? value;
		
		public Result(ResultType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Result Ok()
		{
			return new Result(ResultType.Ok, null);
		}
		
		public static Result Err(EdjCase.ICP.Clients.Models.GovernanceError info)
		{
			return new Result(ResultType.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.GovernanceError AsErr()
		{
			this.ValidateType(ResultType.Err);
			return (EdjCase.ICP.Clients.Models.GovernanceError)this.value!;
		}
		
		private void ValidateType(ResultType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum Result1Type
	{
		Error,
		NeuronId,
	}
	public class Result1
	{
		public Result1Type Type { get; }
		private readonly object? value;
		
		public Result1(Result1Type type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Result1 Error(EdjCase.ICP.Clients.Models.GovernanceError info)
		{
			return new Result1(Result1Type.Error, info);
		}
		
		public EdjCase.ICP.Clients.Models.GovernanceError AsError()
		{
			this.ValidateType(Result1Type.Error);
			return (EdjCase.ICP.Clients.Models.GovernanceError)this.value!;
		}
		
		public static Result1 NeuronId(EdjCase.ICP.Clients.Models.NeuronId info)
		{
			return new Result1(Result1Type.NeuronId, info);
		}
		
		public EdjCase.ICP.Clients.Models.NeuronId AsNeuronId()
		{
			this.ValidateType(Result1Type.NeuronId);
			return (EdjCase.ICP.Clients.Models.NeuronId)this.value!;
		}
		
		private void ValidateType(Result1Type type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum Result2Type
	{
		Ok,
		Err,
	}
	public class Result2
	{
		public Result2Type Type { get; }
		private readonly object? value;
		
		public Result2(Result2Type type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Result2 Ok(EdjCase.ICP.Clients.Models.Neuron info)
		{
			return new Result2(Result2Type.Ok, info);
		}
		
		public EdjCase.ICP.Clients.Models.Neuron AsOk()
		{
			this.ValidateType(Result2Type.Ok);
			return (EdjCase.ICP.Clients.Models.Neuron)this.value!;
		}
		
		public static Result2 Err(EdjCase.ICP.Clients.Models.GovernanceError info)
		{
			return new Result2(Result2Type.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.GovernanceError AsErr()
		{
			this.ValidateType(Result2Type.Err);
			return (EdjCase.ICP.Clients.Models.GovernanceError)this.value!;
		}
		
		private void ValidateType(Result2Type type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum Result3Type
	{
		Ok,
		Err,
	}
	public class Result3
	{
		public Result3Type Type { get; }
		private readonly object? value;
		
		public Result3(Result3Type type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Result3 Ok(EdjCase.ICP.Clients.Models.RewardNodeProviders info)
		{
			return new Result3(Result3Type.Ok, info);
		}
		
		public EdjCase.ICP.Clients.Models.RewardNodeProviders AsOk()
		{
			this.ValidateType(Result3Type.Ok);
			return (EdjCase.ICP.Clients.Models.RewardNodeProviders)this.value!;
		}
		
		public static Result3 Err(EdjCase.ICP.Clients.Models.GovernanceError info)
		{
			return new Result3(Result3Type.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.GovernanceError AsErr()
		{
			this.ValidateType(Result3Type.Err);
			return (EdjCase.ICP.Clients.Models.GovernanceError)this.value!;
		}
		
		private void ValidateType(Result3Type type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum Result4Type
	{
		Ok,
		Err,
	}
	public class Result4
	{
		public Result4Type Type { get; }
		private readonly object? value;
		
		public Result4(Result4Type type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Result4 Ok(EdjCase.ICP.Clients.Models.NeuronInfo info)
		{
			return new Result4(Result4Type.Ok, info);
		}
		
		public EdjCase.ICP.Clients.Models.NeuronInfo AsOk()
		{
			this.ValidateType(Result4Type.Ok);
			return (EdjCase.ICP.Clients.Models.NeuronInfo)this.value!;
		}
		
		public static Result4 Err(EdjCase.ICP.Clients.Models.GovernanceError info)
		{
			return new Result4(Result4Type.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.GovernanceError AsErr()
		{
			this.ValidateType(Result4Type.Err);
			return (EdjCase.ICP.Clients.Models.GovernanceError)this.value!;
		}
		
		private void ValidateType(Result4Type type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum Result5Type
	{
		Ok,
		Err,
	}
	public class Result5
	{
		public Result5Type Type { get; }
		private readonly object? value;
		
		public Result5(Result5Type type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static Result5 Ok(EdjCase.ICP.Clients.Models.NodeProvider info)
		{
			return new Result5(Result5Type.Ok, info);
		}
		
		public EdjCase.ICP.Clients.Models.NodeProvider AsOk()
		{
			this.ValidateType(Result5Type.Ok);
			return (EdjCase.ICP.Clients.Models.NodeProvider)this.value!;
		}
		
		public static Result5 Err(EdjCase.ICP.Clients.Models.GovernanceError info)
		{
			return new Result5(Result5Type.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.GovernanceError AsErr()
		{
			this.ValidateType(Result5Type.Err);
			return (EdjCase.ICP.Clients.Models.GovernanceError)this.value!;
		}
		
		private void ValidateType(Result5Type type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class RewardEvent
	{
		public ulong DayAfterGenesis { get; set; }
		
		public ulong ActualTimestampSeconds { get; set; }
		
		public ulong DistributedE8sEquivalent { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.NeuronId> SettledProposals { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum RewardModeType
	{
		RewardToNeuron,
		RewardToAccount,
	}
	public class RewardMode
	{
		public RewardModeType Type { get; }
		private readonly object? value;
		
		public RewardMode(RewardModeType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static RewardMode RewardToNeuron(EdjCase.ICP.Clients.Models.RewardToNeuron info)
		{
			return new RewardMode(RewardModeType.RewardToNeuron, info);
		}
		
		public EdjCase.ICP.Clients.Models.RewardToNeuron AsRewardToNeuron()
		{
			this.ValidateType(RewardModeType.RewardToNeuron);
			return (EdjCase.ICP.Clients.Models.RewardToNeuron)this.value!;
		}
		
		public static RewardMode RewardToAccount(EdjCase.ICP.Clients.Models.RewardToAccount info)
		{
			return new RewardMode(RewardModeType.RewardToAccount, info);
		}
		
		public EdjCase.ICP.Clients.Models.RewardToAccount AsRewardToAccount()
		{
			this.ValidateType(RewardModeType.RewardToAccount);
			return (EdjCase.ICP.Clients.Models.RewardToAccount)this.value!;
		}
		
		private void ValidateType(RewardModeType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class RewardNodeProvider
	{
		public EdjCase.ICP.Clients.Models.NodeProvider? NodeProvider { get; set; }
		
		public EdjCase.ICP.Clients.Models.RewardMode? RewardMode { get; set; }
		
		public ulong AmountE8s { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class RewardNodeProviders
	{
		public bool? UseRegistryDerivedRewards { get; set; }
		
		public System.Collections.Generic.List<EdjCase.ICP.Clients.Models.RewardNodeProvider> Rewards { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class RewardToAccount
	{
		public EdjCase.ICP.Clients.Models.AccountIdentifier? ToAccount { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class RewardToNeuron
	{
		public ulong DissolveDelaySeconds { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class SetDefaultFollowees
	{
		public System.Collections.Generic.List<DefaultFolloweesInfo> DefaultFollowees { get; set; }
		
		public class DefaultFolloweesInfo
		{
			public int F0 { get; set; }
			
			public EdjCase.ICP.Clients.Models.Followees F1 { get; set; }
			
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class SetDissolveTimestamp
	{
		public ulong DissolveTimestampSeconds { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Spawn
	{
		public uint? PercentageToSpawn { get; set; }
		
		public EdjCase.ICP.Candid.Models.Principal? NewController { get; set; }
		
		public ulong? Nonce { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class SpawnResponse
	{
		public EdjCase.ICP.Clients.Models.NeuronId? CreatedNeuronId { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Split
	{
		public ulong AmountE8s { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Tally
	{
		public ulong No { get; set; }
		
		public ulong Yes { get; set; }
		
		public ulong Total { get; set; }
		
		public ulong TimestampSeconds { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class UpdateNodeProvider
	{
		public EdjCase.ICP.Clients.Models.AccountIdentifier? RewardAccount { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class WaitForQuietState
	{
		public ulong CurrentDeadlineTimestampSeconds { get; set; }
		
	}
}
,
  
  
namespace EdjCase.ICP.Clients.Models
{
	public enum WithdrawReceiptType
	{
		Err,
		Ok,
	}
	public class WithdrawReceipt
	{
		public WithdrawReceiptType Type { get; }
		private readonly object? value;
		
		public WithdrawReceipt(WithdrawReceiptType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static WithdrawReceipt Err(EdjCase.ICP.Clients.Models.WithdrawErr info)
		{
			return new WithdrawReceipt(WithdrawReceiptType.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.WithdrawErr AsErr()
		{
			this.ValidateType(WithdrawReceiptType.Err);
			return (EdjCase.ICP.Clients.Models.WithdrawErr)this.value!;
		}
		
		public static WithdrawReceipt Ok(EdjCase.ICP.Candid.UnboundedUInt info)
		{
			return new WithdrawReceipt(WithdrawReceiptType.Ok, info);
		}
		
		public EdjCase.ICP.Candid.UnboundedUInt AsOk()
		{
			this.ValidateType(WithdrawReceiptType.Ok);
			return (EdjCase.ICP.Candid.UnboundedUInt)this.value!;
		}
		
		private void ValidateType(WithdrawReceiptType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum WithdrawErrType
	{
		BalanceLow,
		TransferFailure,
	}
	public class WithdrawErr
	{
		public WithdrawErrType Type { get; }
		private readonly object? value;
		
		public WithdrawErr(WithdrawErrType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static WithdrawErr BalanceLow()
		{
			return new WithdrawErr(WithdrawErrType.BalanceLow, null);
		}
		
		public static WithdrawErr TransferFailure()
		{
			return new WithdrawErr(WithdrawErrType.TransferFailure, null);
		}
		
		private void ValidateType(WithdrawErrType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum OrderPlacementReceiptType
	{
		Err,
		Ok,
	}
	public class OrderPlacementReceipt
	{
		public OrderPlacementReceiptType Type { get; }
		private readonly object? value;
		
		public OrderPlacementReceipt(OrderPlacementReceiptType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static OrderPlacementReceipt Err(EdjCase.ICP.Clients.Models.OrderPlacementErr info)
		{
			return new OrderPlacementReceipt(OrderPlacementReceiptType.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.OrderPlacementErr AsErr()
		{
			this.ValidateType(OrderPlacementReceiptType.Err);
			return (EdjCase.ICP.Clients.Models.OrderPlacementErr)this.value!;
		}
		
		public static OrderPlacementReceipt Ok(EdjCase.ICP.Clients.Models.Order? info)
		{
			return new OrderPlacementReceipt(OrderPlacementReceiptType.Ok, info);
		}
		
		public EdjCase.ICP.Clients.Models.Order? AsOk()
		{
			this.ValidateType(OrderPlacementReceiptType.Ok);
			return (EdjCase.ICP.Clients.Models.Order?)this.value!;
		}
		
		private void ValidateType(OrderPlacementReceiptType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum OrderPlacementErrType
	{
		InvalidOrder,
		OrderBookFull,
	}
	public class OrderPlacementErr
	{
		public OrderPlacementErrType Type { get; }
		private readonly object? value;
		
		public OrderPlacementErr(OrderPlacementErrType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static OrderPlacementErr InvalidOrder()
		{
			return new OrderPlacementErr(OrderPlacementErrType.InvalidOrder, null);
		}
		
		public static OrderPlacementErr OrderBookFull()
		{
			return new OrderPlacementErr(OrderPlacementErrType.OrderBookFull, null);
		}
		
		private void ValidateType(OrderPlacementErrType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Order
	{
		public Token From { get; set; }
		
		public EdjCase.ICP.Candid.UnboundedUInt FromAmount { get; set; }
		
		public OrderId Id { get; set; }
		
		public EdjCase.ICP.Candid.Models.Principal Owner { get; set; }
		
		public Token To { get; set; }
		
		public EdjCase.ICP.Candid.UnboundedUInt ToAmount { get; set; }
		
	}
}

  
namespace EdjCase.ICP.Clients
{
	public class DexApiClient
	{
		public IAgent Agent { get; }
		public Principal CanisterId { get; }
		public DexApiClient(IAgent agent, Principal canisterId)
		{
			this.Agent = agent ?? throw new ArgumentNullException(nameof(agent));
			this.Can`isterId = canisterId ?? throw new ArgumentNullException(nameof(canisterId));
		}
		public async Task<EdjCase.ICP.Clients.Models.CancelOrderReceipt> CancelOrder(OrderId arg0)
		{
			string method = "cancelOrder";
			CandidValueWithType p0 = CandidValueWithType.FromObject<OrderId>(arg0);
			var candidArgs = new List<CandidValueWithType>
			{
				p0,
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			EdjCase.ICP.Clients.Models.CancelOrderReceipt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.CancelOrderReceipt>();
			return (r0);
		}
		public async Task Clear()
		{
			string method = "clear";
			var candidArgs = new List<CandidValueWithType>
			{
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
		}
		public async Task Credit(EdjCase.ICP.Candid.Models.Principal arg0, Token arg1, EdjCase.ICP.Candid.UnboundedUInt arg2)
		{
			string method = "credit";
			CandidValueWithType p0 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.Models.Principal>(arg0);
			CandidValueWithType p1 = CandidValueWithType.FromObject<Token>(arg1);
			CandidValueWithType p2 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg2);
			var candidArgs = new List<CandidValueWithType>
			{
				p0,
				p1,
				p2,
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
		}
		public async Task<EdjCase.ICP.Clients.Models.DepositReceipt> Deposit(Token arg0)
		{
			string method = "deposit";
			CandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);
			var candidArgs = new List<CandidValueWithType>
			{
				p0,
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			EdjCase.ICP.Clients.Models.DepositReceipt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.DepositReceipt>();
			return (r0);
		}
		public async Task<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance>> GetAllBalances()
		{
			string method = "getAllBalances";
			var candidArgs = new List<CandidValueWithType>
			{
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance>>();
			return (r0);
		}
		public async Task<EdjCase.ICP.Candid.UnboundedUInt> GetBalance(Token arg0)
		{
			string method = "getBalance";
			CandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);
			var candidArgs = new List<CandidValueWithType>
			{
				p0,
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			EdjCase.ICP.Candid.UnboundedUInt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Candid.UnboundedUInt>();
			return (r0);
		}
		public async Task<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance>> GetBalances()
		{
			string method = "getBalances";
			var candidArgs = new List<CandidValueWithType>
			{
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Balance>>();
			return (r0);
		}
		public async Task<System.Collections.Generic.List<byte>> GetDepositAddress()
		{
			string method = "getDepositAddress";
			var candidArgs = new List<CandidValueWithType>
			{
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			System.Collections.Generic.List<byte> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<byte>>();
			return (r0);
		}
		public async Task<EdjCase.ICP.Clients.Models.Order?> GetOrder(OrderId arg0)
		{
			string method = "getOrder";
			CandidValueWithType p0 = CandidValueWithType.FromObject<OrderId>(arg0);
			var candidArgs = new List<CandidValueWithType>
			{
				p0,
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			EdjCase.ICP.Clients.Models.Order? r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.Order?>();
			return (r0);
		}
		public async Task<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Order>> GetOrders()
		{
			string method = "getOrders";
			var candidArgs = new List<CandidValueWithType>
			{
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Order> r0 = reply.Arg.Values[0].ToObject<System.Collections.Generic.List<EdjCase.ICP.Clients.Models.Order>>();
			return (r0);
		}
		public async Task<string> GetSymbol(Token arg0)
		{
			string method = "getSymbol";
			CandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);
			var candidArgs = new List<CandidValueWithType>
			{
				p0,
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			string r0 = reply.Arg.Values[0].ToObject<string>();
			return (r0);
		}
		public async Task<EdjCase.ICP.Clients.Models.OrderPlacementReceipt> PlaceOrder(Token arg0, EdjCase.ICP.Candid.UnboundedUInt arg1, Token arg2, EdjCase.ICP.Candid.UnboundedUInt arg3)
		{
			string method = "placeOrder";
			CandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);
			CandidValueWithType p1 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg1);
			CandidValueWithType p2 = CandidValueWithType.FromObject<Token>(arg2);
			CandidValueWithType p3 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg3);
			var candidArgs = new List<CandidValueWithType>
			{
				p0,
				p1,
				p2,
				p3,
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			EdjCase.ICP.Clients.Models.OrderPlacementReceipt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.OrderPlacementReceipt>();
			return (r0);
		}
		public async Task<EdjCase.ICP.Candid.Models.Principal> Whoami()
		{
			string method = "whoami";
			var candidArgs = new List<CandidValueWithType>
			{
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			EdjCase.ICP.Candid.Models.Principal r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Candid.Models.Principal>();
			return (r0);
		}
		public async Task<EdjCase.ICP.Clients.Models.WithdrawReceipt> Withdraw(Token arg0, EdjCase.ICP.Candid.UnboundedUInt arg1, EdjCase.ICP.Candid.Models.Principal arg2)
		{
			string method = "withdraw";
			CandidValueWithType p0 = CandidValueWithType.FromObject<Token>(arg0);
			CandidValueWithType p1 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.UnboundedUInt>(arg1);
			CandidValueWithType p2 = CandidValueWithType.FromObject<EdjCase.ICP.Candid.Models.Principal>(arg2);
			var candidArgs = new List<CandidValueWithType>
			{
				p0,
				p1,
				p2,
			};
			CandidArg arg = CandidArg.FromCandid(candidArgs);
			QueryResponse response = await this.Agent.QueryAsync(this.CanisterId, method, arg, identityOverride: null);
			QueryReply reply = response.ThrowOrGetReply();
			EdjCase.ICP.Clients.Models.WithdrawReceipt r0 = reply.Arg.Values[0].ToObject<EdjCase.ICP.Clients.Models.WithdrawReceipt>();
			return (r0);
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum DepositReceiptType
	{
		Err,
		Ok,
	}
	public class DepositReceipt
	{
		public DepositReceiptType Type { get; }
		private readonly object? value;
		
		public DepositReceipt(DepositReceiptType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static DepositReceipt Err(EdjCase.ICP.Clients.Models.DepositErr info)
		{
			return new DepositReceipt(DepositReceiptType.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.DepositErr AsErr()
		{
			this.ValidateType(DepositReceiptType.Err);
			return (EdjCase.ICP.Clients.Models.DepositErr)this.value!;
		}
		
		public static DepositReceipt Ok(EdjCase.ICP.Candid.UnboundedUInt info)
		{
			return new DepositReceipt(DepositReceiptType.Ok, info);
		}
		
		public EdjCase.ICP.Candid.UnboundedUInt AsOk()
		{
			this.ValidateType(DepositReceiptType.Ok);
			return (EdjCase.ICP.Candid.UnboundedUInt)this.value!;
		}
		
		private void ValidateType(DepositReceiptType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum DepositErrType
	{
		BalanceLow,
		TransferFailure,
	}
	public class DepositErr
	{
		public DepositErrType Type { get; }
		private readonly object? value;
		
		public DepositErr(DepositErrType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static DepositErr BalanceLow()
		{
			return new DepositErr(DepositErrType.BalanceLow, null);
		}
		
		public static DepositErr TransferFailure()
		{
			return new DepositErr(DepositErrType.TransferFailure, null);
		}
		
		private void ValidateType(DepositErrType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum CancelOrderReceiptType
	{
		Err,
		Ok,
	}
	public class CancelOrderReceipt
	{
		public CancelOrderReceiptType Type { get; }
		private readonly object? value;
		
		public CancelOrderReceipt(CancelOrderReceiptType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static CancelOrderReceipt Err(EdjCase.ICP.Clients.Models.CancelOrderErr info)
		{
			return new CancelOrderReceipt(CancelOrderReceiptType.Err, info);
		}
		
		public EdjCase.ICP.Clients.Models.CancelOrderErr AsErr()
		{
			this.ValidateType(CancelOrderReceiptType.Err);
			return (EdjCase.ICP.Clients.Models.CancelOrderErr)this.value!;
		}
		
		public static CancelOrderReceipt Ok(OrderId info)
		{
			return new CancelOrderReceipt(CancelOrderReceiptType.Ok, info);
		}
		
		public OrderId AsOk()
		{
			this.ValidateType(CancelOrderReceiptType.Ok);
			return (OrderId)this.value!;
		}
		
		private void ValidateType(CancelOrderReceiptType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public enum CancelOrderErrType
	{
		NotAllowed,
		NotExistingOrder,
	}
	public class CancelOrderErr
	{
		public CancelOrderErrType Type { get; }
		private readonly object? value;
		
		public CancelOrderErr(CancelOrderErrType type, object? value)
		{
			this.Type = type;
			this.value = value;
		}
		
		public static CancelOrderErr NotAllowed()
		{
			return new CancelOrderErr(CancelOrderErrType.NotAllowed, null);
		}
		
		public static CancelOrderErr NotExistingOrder()
		{
			return new CancelOrderErr(CancelOrderErrType.NotExistingOrder, null);
		}
		
		private void ValidateType(CancelOrderErrType type)
		{
			if (this.Type != type)
			{
				throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
			}
		}
	}
}

  
namespace EdjCase.ICP.Clients.Models
{
	public class Balance
	{
		public EdjCase.ICP.Candid.UnboundedUInt Amount { get; set; }
		
		public EdjCase.ICP.Candid.Models.Principal Owner { get; set; }
		
		public Token Token { get; set; }
		
	}
}

  
global using Token = EdjCase.ICP.Candid.Models.Principal;
global using OrderId = System.UInt32;

]