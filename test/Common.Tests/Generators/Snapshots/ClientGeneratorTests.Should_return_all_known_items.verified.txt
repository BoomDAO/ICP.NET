[  
public class AccountIdentifier
{
	public List<byte> hash { get; set; }
	
}

  
public class Action
{
	public ActionType Type { get; }
	private readonly object value;
	
	public Action(Action type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Action RegisterKnownNeuron(KnownNeuron info)
	{
		return new Action(ActionType.RegisterKnownNeuron, info);
	}
	
	public KnownNeuron RegisterKnownNeuron()
	{
		this.ValidateType(ActionType.RegisterKnownNeuron);
		return (KnownNeuron)this.value;
	}
	
	public static Action ManageNeuron(ManageNeuron info)
	{
		return new Action(ActionType.ManageNeuron, info);
	}
	
	public ManageNeuron ManageNeuron()
	{
		this.ValidateType(ActionType.ManageNeuron);
		return (ManageNeuron)this.value;
	}
	
	public static Action ExecuteNnsFunction(ExecuteNnsFunction info)
	{
		return new Action(ActionType.ExecuteNnsFunction, info);
	}
	
	public ExecuteNnsFunction ExecuteNnsFunction()
	{
		this.ValidateType(ActionType.ExecuteNnsFunction);
		return (ExecuteNnsFunction)this.value;
	}
	
	public static Action RewardNodeProvider(RewardNodeProvider info)
	{
		return new Action(ActionType.RewardNodeProvider, info);
	}
	
	public RewardNodeProvider RewardNodeProvider()
	{
		this.ValidateType(ActionType.RewardNodeProvider);
		return (RewardNodeProvider)this.value;
	}
	
	public static Action SetDefaultFollowees(SetDefaultFollowees info)
	{
		return new Action(ActionType.SetDefaultFollowees, info);
	}
	
	public SetDefaultFollowees SetDefaultFollowees()
	{
		this.ValidateType(ActionType.SetDefaultFollowees);
		return (SetDefaultFollowees)this.value;
	}
	
	public static Action RewardNodeProviders(RewardNodeProviders info)
	{
		return new Action(ActionType.RewardNodeProviders, info);
	}
	
	public RewardNodeProviders RewardNodeProviders()
	{
		this.ValidateType(ActionType.RewardNodeProviders);
		return (RewardNodeProviders)this.value;
	}
	
	public static Action ManageNetworkEconomics(NetworkEconomics info)
	{
		return new Action(ActionType.ManageNetworkEconomics, info);
	}
	
	public NetworkEconomics ManageNetworkEconomics()
	{
		this.ValidateType(ActionType.ManageNetworkEconomics);
		return (NetworkEconomics)this.value;
	}
	
	public static Action ApproveGenesisKyc(ApproveGenesisKyc info)
	{
		return new Action(ActionType.ApproveGenesisKyc, info);
	}
	
	public ApproveGenesisKyc ApproveGenesisKyc()
	{
		this.ValidateType(ActionType.ApproveGenesisKyc);
		return (ApproveGenesisKyc)this.value;
	}
	
	public static Action AddOrRemoveNodeProvider(AddOrRemoveNodeProvider info)
	{
		return new Action(ActionType.AddOrRemoveNodeProvider, info);
	}
	
	public AddOrRemoveNodeProvider AddOrRemoveNodeProvider()
	{
		this.ValidateType(ActionType.AddOrRemoveNodeProvider);
		return (AddOrRemoveNodeProvider)this.value;
	}
	
	public static Action Motion(Motion info)
	{
		return new Action(ActionType.Motion, info);
	}
	
	public Motion Motion()
	{
		this.ValidateType(ActionType.Motion);
		return (Motion)this.value;
	}
	
	private void ValidateType(ActionType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class AddHotKey
{
	public Principal? new_hot_key { get; set; }
	
}

  
public class AddOrRemoveNodeProvider
{
	public Change? change { get; set; }
	
}

  
public class Amount
{
	public ulong e8s { get; set; }
	
}

  
public class ApproveGenesisKyc
{
	public List<Principal> principals { get; set; }
	
}

  
public class Ballot
{
	public int vote { get; set; }
	
	public ulong voting_power { get; set; }
	
}

  
public class BallotInfo
{
	public int vote { get; set; }
	
	public NeuronId? proposal_id { get; set; }
	
}

  
public class By
{
	public ByType Type { get; }
	private readonly object value;
	
	public By(By type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static By NeuronIdOrSubaccount(Record0 info)
	{
		return new By(ByType.NeuronIdOrSubaccount, info);
	}
	
	public Record0 NeuronIdOrSubaccount()
	{
		this.ValidateType(ByType.NeuronIdOrSubaccount);
		return (Record0)this.value;
	}
	public class Record0
	{
	}
	
	public static By MemoAndController(ClaimOrRefreshNeuronFromAccount info)
	{
		return new By(ByType.MemoAndController, info);
	}
	
	public ClaimOrRefreshNeuronFromAccount MemoAndController()
	{
		this.ValidateType(ByType.MemoAndController);
		return (ClaimOrRefreshNeuronFromAccount)this.value;
	}
	
	public static By Memo(ulong info)
	{
		return new By(ByType.Memo, info);
	}
	
	public ulong Memo()
	{
		this.ValidateType(ByType.Memo);
		return (ulong)this.value;
	}
	
	private void ValidateType(ByType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Change
{
	public ChangeType Type { get; }
	private readonly object value;
	
	public Change(Change type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Change ToRemove(NodeProvider info)
	{
		return new Change(ChangeType.ToRemove, info);
	}
	
	public NodeProvider ToRemove()
	{
		this.ValidateType(ChangeType.ToRemove);
		return (NodeProvider)this.value;
	}
	
	public static Change ToAdd(NodeProvider info)
	{
		return new Change(ChangeType.ToAdd, info);
	}
	
	public NodeProvider ToAdd()
	{
		this.ValidateType(ChangeType.ToAdd);
		return (NodeProvider)this.value;
	}
	
	private void ValidateType(ChangeType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class ClaimOrRefresh
{
	public By? by { get; set; }
	
}

  
public class ClaimOrRefreshNeuronFromAccount
{
	public Principal? controller { get; set; }
	
	public ulong memo { get; set; }
	
}

  
public class ClaimOrRefreshNeuronFromAccountResponse
{
	public Result_1? result { get; set; }
	
}

  
public class ClaimOrRefreshResponse
{
	public NeuronId? refreshed_neuron_id { get; set; }
	
}

  
public class Command
{
	public CommandType Type { get; }
	private readonly object value;
	
	public Command(Command type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Command Spawn(Spawn info)
	{
		return new Command(CommandType.Spawn, info);
	}
	
	public Spawn Spawn()
	{
		this.ValidateType(CommandType.Spawn);
		return (Spawn)this.value;
	}
	
	public static Command Split(Split info)
	{
		return new Command(CommandType.Split, info);
	}
	
	public Split Split()
	{
		this.ValidateType(CommandType.Split);
		return (Split)this.value;
	}
	
	public static Command Follow(Follow info)
	{
		return new Command(CommandType.Follow, info);
	}
	
	public Follow Follow()
	{
		this.ValidateType(CommandType.Follow);
		return (Follow)this.value;
	}
	
	public static Command ClaimOrRefresh(ClaimOrRefresh info)
	{
		return new Command(CommandType.ClaimOrRefresh, info);
	}
	
	public ClaimOrRefresh ClaimOrRefresh()
	{
		this.ValidateType(CommandType.ClaimOrRefresh);
		return (ClaimOrRefresh)this.value;
	}
	
	public static Command Configure(Configure info)
	{
		return new Command(CommandType.Configure, info);
	}
	
	public Configure Configure()
	{
		this.ValidateType(CommandType.Configure);
		return (Configure)this.value;
	}
	
	public static Command RegisterVote(RegisterVote info)
	{
		return new Command(CommandType.RegisterVote, info);
	}
	
	public RegisterVote RegisterVote()
	{
		this.ValidateType(CommandType.RegisterVote);
		return (RegisterVote)this.value;
	}
	
	public static Command Merge(Merge info)
	{
		return new Command(CommandType.Merge, info);
	}
	
	public Merge Merge()
	{
		this.ValidateType(CommandType.Merge);
		return (Merge)this.value;
	}
	
	public static Command DisburseToNeuron(DisburseToNeuron info)
	{
		return new Command(CommandType.DisburseToNeuron, info);
	}
	
	public DisburseToNeuron DisburseToNeuron()
	{
		this.ValidateType(CommandType.DisburseToNeuron);
		return (DisburseToNeuron)this.value;
	}
	
	public static Command MakeProposal(Proposal info)
	{
		return new Command(CommandType.MakeProposal, info);
	}
	
	public Proposal MakeProposal()
	{
		this.ValidateType(CommandType.MakeProposal);
		return (Proposal)this.value;
	}
	
	public static Command MergeMaturity(MergeMaturity info)
	{
		return new Command(CommandType.MergeMaturity, info);
	}
	
	public MergeMaturity MergeMaturity()
	{
		this.ValidateType(CommandType.MergeMaturity);
		return (MergeMaturity)this.value;
	}
	
	public static Command Disburse(Disburse info)
	{
		return new Command(CommandType.Disburse, info);
	}
	
	public Disburse Disburse()
	{
		this.ValidateType(CommandType.Disburse);
		return (Disburse)this.value;
	}
	
	private void ValidateType(CommandType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Command_1
{
	public Command_1Type Type { get; }
	private readonly object value;
	
	public Command_1(Command_1 type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Command_1 Error(GovernanceError info)
	{
		return new Command_1(Command_1Type.Error, info);
	}
	
	public GovernanceError Error()
	{
		this.ValidateType(Command_1Type.Error);
		return (GovernanceError)this.value;
	}
	
	public static Command_1 Spawn(SpawnResponse info)
	{
		return new Command_1(Command_1Type.Spawn, info);
	}
	
	public SpawnResponse Spawn()
	{
		this.ValidateType(Command_1Type.Spawn);
		return (SpawnResponse)this.value;
	}
	
	public static Command_1 Split(SpawnResponse info)
	{
		return new Command_1(Command_1Type.Split, info);
	}
	
	public SpawnResponse Split()
	{
		this.ValidateType(Command_1Type.Split);
		return (SpawnResponse)this.value;
	}
	
	public static Command_1 Follow(Record0 info)
	{
		return new Command_1(Command_1Type.Follow, info);
	}
	
	public Record0 Follow()
	{
		this.ValidateType(Command_1Type.Follow);
		return (Record0)this.value;
	}
	public class Record0
	{
	}
	
	public static Command_1 ClaimOrRefresh(ClaimOrRefreshResponse info)
	{
		return new Command_1(Command_1Type.ClaimOrRefresh, info);
	}
	
	public ClaimOrRefreshResponse ClaimOrRefresh()
	{
		this.ValidateType(Command_1Type.ClaimOrRefresh);
		return (ClaimOrRefreshResponse)this.value;
	}
	
	public static Command_1 Configure(Record0 info)
	{
		return new Command_1(Command_1Type.Configure, info);
	}
	
	public Record0 Configure()
	{
		this.ValidateType(Command_1Type.Configure);
		return (Record0)this.value;
	}
	public class Record0
	{
	}
	
	public static Command_1 RegisterVote(Record0 info)
	{
		return new Command_1(Command_1Type.RegisterVote, info);
	}
	
	public Record0 RegisterVote()
	{
		this.ValidateType(Command_1Type.RegisterVote);
		return (Record0)this.value;
	}
	public class Record0
	{
	}
	
	public static Command_1 Merge(Record0 info)
	{
		return new Command_1(Command_1Type.Merge, info);
	}
	
	public Record0 Merge()
	{
		this.ValidateType(Command_1Type.Merge);
		return (Record0)this.value;
	}
	public class Record0
	{
	}
	
	public static Command_1 DisburseToNeuron(SpawnResponse info)
	{
		return new Command_1(Command_1Type.DisburseToNeuron, info);
	}
	
	public SpawnResponse DisburseToNeuron()
	{
		this.ValidateType(Command_1Type.DisburseToNeuron);
		return (SpawnResponse)this.value;
	}
	
	public static Command_1 MakeProposal(MakeProposalResponse info)
	{
		return new Command_1(Command_1Type.MakeProposal, info);
	}
	
	public MakeProposalResponse MakeProposal()
	{
		this.ValidateType(Command_1Type.MakeProposal);
		return (MakeProposalResponse)this.value;
	}
	
	public static Command_1 MergeMaturity(MergeMaturityResponse info)
	{
		return new Command_1(Command_1Type.MergeMaturity, info);
	}
	
	public MergeMaturityResponse MergeMaturity()
	{
		this.ValidateType(Command_1Type.MergeMaturity);
		return (MergeMaturityResponse)this.value;
	}
	
	public static Command_1 Disburse(DisburseResponse info)
	{
		return new Command_1(Command_1Type.Disburse, info);
	}
	
	public DisburseResponse Disburse()
	{
		this.ValidateType(Command_1Type.Disburse);
		return (DisburseResponse)this.value;
	}
	
	private void ValidateType(Command_1Type type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Command_2
{
	public Command_2Type Type { get; }
	private readonly object value;
	
	public Command_2(Command_2 type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Command_2 Spawn(Spawn info)
	{
		return new Command_2(Command_2Type.Spawn, info);
	}
	
	public Spawn Spawn()
	{
		this.ValidateType(Command_2Type.Spawn);
		return (Spawn)this.value;
	}
	
	public static Command_2 Split(Split info)
	{
		return new Command_2(Command_2Type.Split, info);
	}
	
	public Split Split()
	{
		this.ValidateType(Command_2Type.Split);
		return (Split)this.value;
	}
	
	public static Command_2 Configure(Configure info)
	{
		return new Command_2(Command_2Type.Configure, info);
	}
	
	public Configure Configure()
	{
		this.ValidateType(Command_2Type.Configure);
		return (Configure)this.value;
	}
	
	public static Command_2 Merge(Merge info)
	{
		return new Command_2(Command_2Type.Merge, info);
	}
	
	public Merge Merge()
	{
		this.ValidateType(Command_2Type.Merge);
		return (Merge)this.value;
	}
	
	public static Command_2 DisburseToNeuron(DisburseToNeuron info)
	{
		return new Command_2(Command_2Type.DisburseToNeuron, info);
	}
	
	public DisburseToNeuron DisburseToNeuron()
	{
		this.ValidateType(Command_2Type.DisburseToNeuron);
		return (DisburseToNeuron)this.value;
	}
	
	public static Command_2 ClaimOrRefreshNeuron(ClaimOrRefresh info)
	{
		return new Command_2(Command_2Type.ClaimOrRefreshNeuron, info);
	}
	
	public ClaimOrRefresh ClaimOrRefreshNeuron()
	{
		this.ValidateType(Command_2Type.ClaimOrRefreshNeuron);
		return (ClaimOrRefresh)this.value;
	}
	
	public static Command_2 MergeMaturity(MergeMaturity info)
	{
		return new Command_2(Command_2Type.MergeMaturity, info);
	}
	
	public MergeMaturity MergeMaturity()
	{
		this.ValidateType(Command_2Type.MergeMaturity);
		return (MergeMaturity)this.value;
	}
	
	public static Command_2 Disburse(Disburse info)
	{
		return new Command_2(Command_2Type.Disburse, info);
	}
	
	public Disburse Disburse()
	{
		this.ValidateType(Command_2Type.Disburse);
		return (Disburse)this.value;
	}
	
	private void ValidateType(Command_2Type type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Configure
{
	public Operation? operation { get; set; }
	
}

  
public class Disburse
{
	public AccountIdentifier? to_account { get; set; }
	
	public Amount? amount { get; set; }
	
}

  
public class DisburseResponse
{
	public ulong transfer_block_height { get; set; }
	
}

  
public class DisburseToNeuron
{
	public ulong dissolve_delay_seconds { get; set; }
	
	public bool kyc_verified { get; set; }
	
	public ulong amount_e8s { get; set; }
	
	public Principal? new_controller { get; set; }
	
	public ulong nonce { get; set; }
	
}

  
public class DissolveState
{
	public DissolveStateType Type { get; }
	private readonly object value;
	
	public DissolveState(DissolveState type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static DissolveState DissolveDelaySeconds(ulong info)
	{
		return new DissolveState(DissolveStateType.DissolveDelaySeconds, info);
	}
	
	public ulong DissolveDelaySeconds()
	{
		this.ValidateType(DissolveStateType.DissolveDelaySeconds);
		return (ulong)this.value;
	}
	
	public static DissolveState WhenDissolvedTimestampSeconds(ulong info)
	{
		return new DissolveState(DissolveStateType.WhenDissolvedTimestampSeconds, info);
	}
	
	public ulong WhenDissolvedTimestampSeconds()
	{
		this.ValidateType(DissolveStateType.WhenDissolvedTimestampSeconds);
		return (ulong)this.value;
	}
	
	private void ValidateType(DissolveStateType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class ExecuteNnsFunction
{
	public int nns_function { get; set; }
	
	public List<byte> payload { get; set; }
	
}

  
public class Follow
{
	public int topic { get; set; }
	
	public List<NeuronId> followees { get; set; }
	
}

  
public class Followees
{
	public List<NeuronId> followees { get; set; }
	
}

  
public class Governance
{
	public List<Record0> default_followees { get; set; }
	
	public class List<Record0>
	{
		public int F0 { get; set; }
		
		public Followees F1 { get; set; }
		
	}
	public ulong wait_for_quiet_threshold_seconds { get; set; }
	
	public GovernanceCachedMetrics? metrics { get; set; }
	
	public List<NodeProvider> node_providers { get; set; }
	
	public NetworkEconomics? economics { get; set; }
	
	public RewardEvent? latest_reward_event { get; set; }
	
	public List<NeuronStakeTransfer> to_claim_transfers { get; set; }
	
	public ulong short_voting_period_seconds { get; set; }
	
	public List<Record0> proposals { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public ProposalData F1 { get; set; }
		
	}
	public List<Record0> in_flight_commands { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public NeuronInFlightCommand F1 { get; set; }
		
	}
	public List<Record0> neurons { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public Neuron F1 { get; set; }
		
	}
	public ulong genesis_timestamp_seconds { get; set; }
	
}

  
public class GovernanceCachedMetrics
{
	public List<Record0> not_dissolving_neurons_e8s_buckets { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public double F1 { get; set; }
		
	}
	public ulong garbage_collectable_neurons_count { get; set; }
	
	public ulong neurons_with_invalid_stake_count { get; set; }
	
	public List<Record0> not_dissolving_neurons_count_buckets { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public ulong F1 { get; set; }
		
	}
	public ulong total_supply_icp { get; set; }
	
	public ulong neurons_with_less_than_6_months_dissolve_delay_count { get; set; }
	
	public ulong dissolved_neurons_count { get; set; }
	
	public ulong total_staked_e8s { get; set; }
	
	public ulong not_dissolving_neurons_count { get; set; }
	
	public ulong dissolved_neurons_e8s { get; set; }
	
	public ulong neurons_with_less_than_6_months_dissolve_delay_e8s { get; set; }
	
	public List<Record0> dissolving_neurons_count_buckets { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public ulong F1 { get; set; }
		
	}
	public ulong dissolving_neurons_count { get; set; }
	
	public List<Record0> dissolving_neurons_e8s_buckets { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public double F1 { get; set; }
		
	}
	public ulong community_fund_total_staked_e8s { get; set; }
	
	public ulong timestamp_seconds { get; set; }
	
}

  
public class GovernanceError
{
	public string error_message { get; set; }
	
	public int error_type { get; set; }
	
}

  
public class IncreaseDissolveDelay
{
	public uint additional_dissolve_delay_seconds { get; set; }
	
}

  
public class KnownNeuron
{
	public NeuronId? id { get; set; }
	
	public KnownNeuronData? known_neuron_data { get; set; }
	
}

  
public class KnownNeuronData
{
	public string name { get; set; }
	
	public string? description { get; set; }
	
}

  
public class ListKnownNeuronsResponse
{
	public List<KnownNeuron> known_neurons { get; set; }
	
}

  
public class ListNeurons
{
	public List<ulong> neuron_ids { get; set; }
	
	public bool include_neurons_readable_by_caller { get; set; }
	
}

  
public class ListNeuronsResponse
{
	public List<Record0> neuron_infos { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public NeuronInfo F1 { get; set; }
		
	}
	public List<Neuron> full_neurons { get; set; }
	
}

  
public class ListNodeProvidersResponse
{
	public List<NodeProvider> node_providers { get; set; }
	
}

  
public class ListProposalInfo
{
	public List<int> include_reward_status { get; set; }
	
	public NeuronId? before_proposal { get; set; }
	
	public uint limit { get; set; }
	
	public List<int> exclude_topic { get; set; }
	
	public List<int> include_status { get; set; }
	
}

  
public class ListProposalInfoResponse
{
	public List<ProposalInfo> proposal_info { get; set; }
	
}

  
public class MakeProposalResponse
{
	public NeuronId? proposal_id { get; set; }
	
}

  
public class ManageNeuron
{
	public NeuronId? id { get; set; }
	
	public Command? command { get; set; }
	
	public NeuronIdOrSubaccount? neuron_id_or_subaccount { get; set; }
	
}

  
public class ManageNeuronResponse
{
	public Command_1? command { get; set; }
	
}

  
public class Merge
{
	public NeuronId? source_neuron_id { get; set; }
	
}

  
public class MergeMaturity
{
	public uint percentage_to_merge { get; set; }
	
}

  
public class MergeMaturityResponse
{
	public ulong merged_maturity_e8s { get; set; }
	
	public ulong new_stake_e8s { get; set; }
	
}

  
public class Motion
{
	public string motion_text { get; set; }
	
}

  
public class NetworkEconomics
{
	public ulong neuron_minimum_stake_e8s { get; set; }
	
	public uint max_proposals_to_keep_per_topic { get; set; }
	
	public ulong neuron_management_fee_per_proposal_e8s { get; set; }
	
	public ulong reject_cost_e8s { get; set; }
	
	public ulong transaction_fee_e8s { get; set; }
	
	public ulong neuron_spawn_dissolve_delay_seconds { get; set; }
	
	public ulong minimum_icp_xdr_rate { get; set; }
	
	public ulong maximum_node_provider_rewards_e8s { get; set; }
	
}

  
public class Neuron
{
	public NeuronId? id { get; set; }
	
	public Principal? controller { get; set; }
	
	public List<BallotInfo> recent_ballots { get; set; }
	
	public bool kyc_verified { get; set; }
	
	public bool not_for_profit { get; set; }
	
	public ulong maturity_e8s_equivalent { get; set; }
	
	public ulong cached_neuron_stake_e8s { get; set; }
	
	public ulong created_timestamp_seconds { get; set; }
	
	public ulong aging_since_timestamp_seconds { get; set; }
	
	public List<Principal> hot_keys { get; set; }
	
	public List<byte> account { get; set; }
	
	public ulong? joined_community_fund_timestamp_seconds { get; set; }
	
	public DissolveState? dissolve_state { get; set; }
	
	public List<Record0> followees { get; set; }
	
	public class List<Record0>
	{
		public int F0 { get; set; }
		
		public Followees F1 { get; set; }
		
	}
	public ulong neuron_fees_e8s { get; set; }
	
	public NeuronStakeTransfer? transfer { get; set; }
	
	public KnownNeuronData? known_neuron_data { get; set; }
	
}

  
public class NeuronId
{
	public ulong id { get; set; }
	
}

  
public class NeuronIdOrSubaccount
{
	public NeuronIdOrSubaccountType Type { get; }
	private readonly object value;
	
	public NeuronIdOrSubaccount(NeuronIdOrSubaccount type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static NeuronIdOrSubaccount Subaccount(List<byte> info)
	{
		return new NeuronIdOrSubaccount(NeuronIdOrSubaccountType.Subaccount, info);
	}
	
	public List<byte> Subaccount()
	{
		this.ValidateType(NeuronIdOrSubaccountType.Subaccount);
		return (List<byte>)this.value;
	}
	
	public static NeuronIdOrSubaccount NeuronId(NeuronId info)
	{
		return new NeuronIdOrSubaccount(NeuronIdOrSubaccountType.NeuronId, info);
	}
	
	public NeuronId NeuronId()
	{
		this.ValidateType(NeuronIdOrSubaccountType.NeuronId);
		return (NeuronId)this.value;
	}
	
	private void ValidateType(NeuronIdOrSubaccountType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class NeuronInFlightCommand
{
	public Command_2? command { get; set; }
	
	public ulong timestamp { get; set; }
	
}

  
public class NeuronInfo
{
	public ulong dissolve_delay_seconds { get; set; }
	
	public List<BallotInfo> recent_ballots { get; set; }
	
	public ulong created_timestamp_seconds { get; set; }
	
	public int state { get; set; }
	
	public ulong stake_e8s { get; set; }
	
	public ulong? joined_community_fund_timestamp_seconds { get; set; }
	
	public ulong retrieved_at_timestamp_seconds { get; set; }
	
	public KnownNeuronData? known_neuron_data { get; set; }
	
	public ulong voting_power { get; set; }
	
	public ulong age_seconds { get; set; }
	
}

  
public class NeuronStakeTransfer
{
	public List<byte> to_subaccount { get; set; }
	
	public ulong neuron_stake_e8s { get; set; }
	
	public Principal? from { get; set; }
	
	public ulong memo { get; set; }
	
	public List<byte> from_subaccount { get; set; }
	
	public ulong transfer_timestamp { get; set; }
	
	public ulong block_height { get; set; }
	
}

  
public class NodeProvider
{
	public Principal? id { get; set; }
	
	public AccountIdentifier? reward_account { get; set; }
	
}

  
public class Operation
{
	public OperationType Type { get; }
	private readonly object value;
	
	public Operation(Operation type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Operation RemoveHotKey(RemoveHotKey info)
	{
		return new Operation(OperationType.RemoveHotKey, info);
	}
	
	public RemoveHotKey RemoveHotKey()
	{
		this.ValidateType(OperationType.RemoveHotKey);
		return (RemoveHotKey)this.value;
	}
	
	public static Operation AddHotKey(AddHotKey info)
	{
		return new Operation(OperationType.AddHotKey, info);
	}
	
	public AddHotKey AddHotKey()
	{
		this.ValidateType(OperationType.AddHotKey);
		return (AddHotKey)this.value;
	}
	
	public static Operation StopDissolving(Record0 info)
	{
		return new Operation(OperationType.StopDissolving, info);
	}
	
	public Record0 StopDissolving()
	{
		this.ValidateType(OperationType.StopDissolving);
		return (Record0)this.value;
	}
	public class Record0
	{
	}
	
	public static Operation StartDissolving(Record0 info)
	{
		return new Operation(OperationType.StartDissolving, info);
	}
	
	public Record0 StartDissolving()
	{
		this.ValidateType(OperationType.StartDissolving);
		return (Record0)this.value;
	}
	public class Record0
	{
	}
	
	public static Operation IncreaseDissolveDelay(IncreaseDissolveDelay info)
	{
		return new Operation(OperationType.IncreaseDissolveDelay, info);
	}
	
	public IncreaseDissolveDelay IncreaseDissolveDelay()
	{
		this.ValidateType(OperationType.IncreaseDissolveDelay);
		return (IncreaseDissolveDelay)this.value;
	}
	
	public static Operation JoinCommunityFund(Record0 info)
	{
		return new Operation(OperationType.JoinCommunityFund, info);
	}
	
	public Record0 JoinCommunityFund()
	{
		this.ValidateType(OperationType.JoinCommunityFund);
		return (Record0)this.value;
	}
	public class Record0
	{
	}
	
	public static Operation SetDissolveTimestamp(SetDissolveTimestamp info)
	{
		return new Operation(OperationType.SetDissolveTimestamp, info);
	}
	
	public SetDissolveTimestamp SetDissolveTimestamp()
	{
		this.ValidateType(OperationType.SetDissolveTimestamp);
		return (SetDissolveTimestamp)this.value;
	}
	
	private void ValidateType(OperationType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Proposal
{
	public string url { get; set; }
	
	public string? title { get; set; }
	
	public Action? action { get; set; }
	
	public string summary { get; set; }
	
}

  
public class ProposalData
{
	public NeuronId? id { get; set; }
	
	public GovernanceError? failure_reason { get; set; }
	
	public List<Record0> ballots { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public Ballot F1 { get; set; }
		
	}
	public ulong proposal_timestamp_seconds { get; set; }
	
	public ulong reward_event_round { get; set; }
	
	public ulong failed_timestamp_seconds { get; set; }
	
	public ulong reject_cost_e8s { get; set; }
	
	public Tally? latest_tally { get; set; }
	
	public ulong decided_timestamp_seconds { get; set; }
	
	public Proposal? proposal { get; set; }
	
	public NeuronId? proposer { get; set; }
	
	public WaitForQuietState? wait_for_quiet_state { get; set; }
	
	public ulong executed_timestamp_seconds { get; set; }
	
}

  
public class ProposalInfo
{
	public NeuronId? id { get; set; }
	
	public int status { get; set; }
	
	public int topic { get; set; }
	
	public GovernanceError? failure_reason { get; set; }
	
	public List<Record0> ballots { get; set; }
	
	public class List<Record0>
	{
		public ulong F0 { get; set; }
		
		public Ballot F1 { get; set; }
		
	}
	public ulong proposal_timestamp_seconds { get; set; }
	
	public ulong reward_event_round { get; set; }
	
	public ulong? deadline_timestamp_seconds { get; set; }
	
	public ulong failed_timestamp_seconds { get; set; }
	
	public ulong reject_cost_e8s { get; set; }
	
	public Tally? latest_tally { get; set; }
	
	public int reward_status { get; set; }
	
	public ulong decided_timestamp_seconds { get; set; }
	
	public Proposal? proposal { get; set; }
	
	public NeuronId? proposer { get; set; }
	
	public ulong executed_timestamp_seconds { get; set; }
	
}

  
public class RegisterVote
{
	public int vote { get; set; }
	
	public NeuronId? proposal { get; set; }
	
}

  
public class RemoveHotKey
{
	public Principal? hot_key_to_remove { get; set; }
	
}

  
public class Result
{
	public ResultType Type { get; }
	private readonly object value;
	
	public Result(Result type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Result Ok()
	{
		return new Result(ResultType.Ok, null);
	}
	
	public static Result Err(GovernanceError info)
	{
		return new Result(ResultType.Err, info);
	}
	
	public GovernanceError Err()
	{
		this.ValidateType(ResultType.Err);
		return (GovernanceError)this.value;
	}
	
	private void ValidateType(ResultType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Result_1
{
	public Result_1Type Type { get; }
	private readonly object value;
	
	public Result_1(Result_1 type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Result_1 Error(GovernanceError info)
	{
		return new Result_1(Result_1Type.Error, info);
	}
	
	public GovernanceError Error()
	{
		this.ValidateType(Result_1Type.Error);
		return (GovernanceError)this.value;
	}
	
	public static Result_1 NeuronId(NeuronId info)
	{
		return new Result_1(Result_1Type.NeuronId, info);
	}
	
	public NeuronId NeuronId()
	{
		this.ValidateType(Result_1Type.NeuronId);
		return (NeuronId)this.value;
	}
	
	private void ValidateType(Result_1Type type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Result_2
{
	public Result_2Type Type { get; }
	private readonly object value;
	
	public Result_2(Result_2 type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Result_2 Ok(Neuron info)
	{
		return new Result_2(Result_2Type.Ok, info);
	}
	
	public Neuron Ok()
	{
		this.ValidateType(Result_2Type.Ok);
		return (Neuron)this.value;
	}
	
	public static Result_2 Err(GovernanceError info)
	{
		return new Result_2(Result_2Type.Err, info);
	}
	
	public GovernanceError Err()
	{
		this.ValidateType(Result_2Type.Err);
		return (GovernanceError)this.value;
	}
	
	private void ValidateType(Result_2Type type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Result_3
{
	public Result_3Type Type { get; }
	private readonly object value;
	
	public Result_3(Result_3 type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Result_3 Ok(RewardNodeProviders info)
	{
		return new Result_3(Result_3Type.Ok, info);
	}
	
	public RewardNodeProviders Ok()
	{
		this.ValidateType(Result_3Type.Ok);
		return (RewardNodeProviders)this.value;
	}
	
	public static Result_3 Err(GovernanceError info)
	{
		return new Result_3(Result_3Type.Err, info);
	}
	
	public GovernanceError Err()
	{
		this.ValidateType(Result_3Type.Err);
		return (GovernanceError)this.value;
	}
	
	private void ValidateType(Result_3Type type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Result_4
{
	public Result_4Type Type { get; }
	private readonly object value;
	
	public Result_4(Result_4 type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Result_4 Ok(NeuronInfo info)
	{
		return new Result_4(Result_4Type.Ok, info);
	}
	
	public NeuronInfo Ok()
	{
		this.ValidateType(Result_4Type.Ok);
		return (NeuronInfo)this.value;
	}
	
	public static Result_4 Err(GovernanceError info)
	{
		return new Result_4(Result_4Type.Err, info);
	}
	
	public GovernanceError Err()
	{
		this.ValidateType(Result_4Type.Err);
		return (GovernanceError)this.value;
	}
	
	private void ValidateType(Result_4Type type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Result_5
{
	public Result_5Type Type { get; }
	private readonly object value;
	
	public Result_5(Result_5 type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static Result_5 Ok(NodeProvider info)
	{
		return new Result_5(Result_5Type.Ok, info);
	}
	
	public NodeProvider Ok()
	{
		this.ValidateType(Result_5Type.Ok);
		return (NodeProvider)this.value;
	}
	
	public static Result_5 Err(GovernanceError info)
	{
		return new Result_5(Result_5Type.Err, info);
	}
	
	public GovernanceError Err()
	{
		this.ValidateType(Result_5Type.Err);
		return (GovernanceError)this.value;
	}
	
	private void ValidateType(Result_5Type type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class RewardEvent
{
	public ulong day_after_genesis { get; set; }
	
	public ulong actual_timestamp_seconds { get; set; }
	
	public ulong distributed_e8s_equivalent { get; set; }
	
	public List<NeuronId> settled_proposals { get; set; }
	
}

  
public class RewardMode
{
	public RewardModeType Type { get; }
	private readonly object value;
	
	public RewardMode(RewardMode type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static RewardMode RewardToNeuron(RewardToNeuron info)
	{
		return new RewardMode(RewardModeType.RewardToNeuron, info);
	}
	
	public RewardToNeuron RewardToNeuron()
	{
		this.ValidateType(RewardModeType.RewardToNeuron);
		return (RewardToNeuron)this.value;
	}
	
	public static RewardMode RewardToAccount(RewardToAccount info)
	{
		return new RewardMode(RewardModeType.RewardToAccount, info);
	}
	
	public RewardToAccount RewardToAccount()
	{
		this.ValidateType(RewardModeType.RewardToAccount);
		return (RewardToAccount)this.value;
	}
	
	private void ValidateType(RewardModeType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class RewardNodeProvider
{
	public NodeProvider? node_provider { get; set; }
	
	public RewardMode? reward_mode { get; set; }
	
	public ulong amount_e8s { get; set; }
	
}

  
public class RewardNodeProviders
{
	public bool? use_registry_derived_rewards { get; set; }
	
	public List<RewardNodeProvider> rewards { get; set; }
	
}

  
public class RewardToAccount
{
	public AccountIdentifier? to_account { get; set; }
	
}

  
public class RewardToNeuron
{
	public ulong dissolve_delay_seconds { get; set; }
	
}

  
public class SetDefaultFollowees
{
	public List<Record0> default_followees { get; set; }
	
	public class List<Record0>
	{
		public int F0 { get; set; }
		
		public Followees F1 { get; set; }
		
	}
}

  
public class SetDissolveTimestamp
{
	public ulong dissolve_timestamp_seconds { get; set; }
	
}

  
public class Spawn
{
	public uint? percentage_to_spawn { get; set; }
	
	public Principal? new_controller { get; set; }
	
	public ulong? nonce { get; set; }
	
}

  
public class SpawnResponse
{
	public NeuronId? created_neuron_id { get; set; }
	
}

  
public class Split
{
	public ulong amount_e8s { get; set; }
	
}

  
public class Tally
{
	public ulong no { get; set; }
	
	public ulong yes { get; set; }
	
	public ulong total { get; set; }
	
	public ulong timestamp_seconds { get; set; }
	
}

  
public class UpdateNodeProvider
{
	public AccountIdentifier? reward_account { get; set; }
	
}

  
public class WaitForQuietState
{
	public ulong current_deadline_timestamp_seconds { get; set; }
	
}

  
public class GovernanceApiClient
{
	public void claim_gtc_neurons(Principal arg0, List<NeuronId> arg1)
	{
	}
	public void claim_or_refresh_neuron_from_account(ClaimOrRefreshNeuronFromAccount arg0)
	{
	}
	public void get_build_metadata()
	{
	}
	public void get_full_neuron(ulong arg0)
	{
	}
	public void get_full_neuron_by_id_or_subaccount(NeuronIdOrSubaccount arg0)
	{
	}
	public void get_monthly_node_provider_rewards()
	{
	}
	public void get_network_economics_parameters()
	{
	}
	public void get_neuron_ids()
	{
	}
	public void get_neuron_info(ulong arg0)
	{
	}
	public void get_neuron_info_by_id_or_subaccount(NeuronIdOrSubaccount arg0)
	{
	}
	public void get_node_provider_by_caller()
	{
	}
	public void get_pending_proposals()
	{
	}
	public void get_proposal_info(ulong arg0)
	{
	}
	public void list_known_neurons()
	{
	}
	public void list_neurons(ListNeurons arg0)
	{
	}
	public void list_node_providers()
	{
	}
	public void list_proposals(ListProposalInfo arg0)
	{
	}
	public void manage_neuron(ManageNeuron arg0)
	{
	}
	public void transfer_gtc_neuron(NeuronId arg0, NeuronId arg1)
	{
	}
	public void update_node_provider(UpdateNodeProvider arg0)
	{
	}
}

  
public class WithdrawReceipt
{
	public WithdrawReceiptType Type { get; }
	private readonly object value;
	
	public WithdrawReceipt(WithdrawReceipt type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static WithdrawReceipt Err(WithdrawErr info)
	{
		return new WithdrawReceipt(WithdrawReceiptType.Err, info);
	}
	
	public WithdrawErr Err()
	{
		this.ValidateType(WithdrawReceiptType.Err);
		return (WithdrawErr)this.value;
	}
	
	public static WithdrawReceipt Ok(UnboundedUInt info)
	{
		return new WithdrawReceipt(WithdrawReceiptType.Ok, info);
	}
	
	public UnboundedUInt Ok()
	{
		this.ValidateType(WithdrawReceiptType.Ok);
		return (UnboundedUInt)this.value;
	}
	
	private void ValidateType(WithdrawReceiptType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class WithdrawErr
{
	public WithdrawErrType Type { get; }
	private readonly object value;
	
	public WithdrawErr(WithdrawErr type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static WithdrawErr BalanceLow()
	{
		return new WithdrawErr(WithdrawErrType.BalanceLow, null);
	}
	
	public static WithdrawErr TransferFailure()
	{
		return new WithdrawErr(WithdrawErrType.TransferFailure, null);
	}
	
	private void ValidateType(WithdrawErrType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}
,
  
  
public class OrderPlacementErr
{
	public OrderPlacementErrType Type { get; }
	private readonly object value;
	
	public OrderPlacementErr(OrderPlacementErr type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static OrderPlacementErr InvalidOrder()
	{
		return new OrderPlacementErr(OrderPlacementErrType.InvalidOrder, null);
	}
	
	public static OrderPlacementErr OrderBookFull()
	{
		return new OrderPlacementErr(OrderPlacementErrType.OrderBookFull, null);
	}
	
	private void ValidateType(OrderPlacementErrType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}
,
  
  
public class DexApiClient
{
	public void cancelOrder(OrderId arg0)
	{
	}
	public void clear()
	{
	}
	public void credit(Principal arg0, Token arg1, UnboundedUInt arg2)
	{
	}
	public void deposit(Token arg0)
	{
	}
	public void getAllBalances()
	{
	}
	public void getBalance(Token arg0)
	{
	}
	public void getBalances()
	{
	}
	public void getDepositAddress()
	{
	}
	public void getOrder(OrderId arg0)
	{
	}
	public void getOrders()
	{
	}
	public void getSymbol(Token arg0)
	{
	}
	public void placeOrder(Token arg0, UnboundedUInt arg1, Token arg2, UnboundedUInt arg3)
	{
	}
	public void whoami()
	{
	}
	public void withdraw(Token arg0, UnboundedUInt arg1, Principal arg2)
	{
	}
}

  
public class DepositReceipt
{
	public DepositReceiptType Type { get; }
	private readonly object value;
	
	public DepositReceipt(DepositReceipt type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static DepositReceipt Err(DepositErr info)
	{
		return new DepositReceipt(DepositReceiptType.Err, info);
	}
	
	public DepositErr Err()
	{
		this.ValidateType(DepositReceiptType.Err);
		return (DepositErr)this.value;
	}
	
	public static DepositReceipt Ok(UnboundedUInt info)
	{
		return new DepositReceipt(DepositReceiptType.Ok, info);
	}
	
	public UnboundedUInt Ok()
	{
		this.ValidateType(DepositReceiptType.Ok);
		return (UnboundedUInt)this.value;
	}
	
	private void ValidateType(DepositReceiptType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class DepositErr
{
	public DepositErrType Type { get; }
	private readonly object value;
	
	public DepositErr(DepositErr type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static DepositErr BalanceLow()
	{
		return new DepositErr(DepositErrType.BalanceLow, null);
	}
	
	public static DepositErr TransferFailure()
	{
		return new DepositErr(DepositErrType.TransferFailure, null);
	}
	
	private void ValidateType(DepositErrType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class CancelOrderReceipt
{
	public CancelOrderReceiptType Type { get; }
	private readonly object value;
	
	public CancelOrderReceipt(CancelOrderReceipt type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static CancelOrderReceipt Err(CancelOrderErr info)
	{
		return new CancelOrderReceipt(CancelOrderReceiptType.Err, info);
	}
	
	public CancelOrderErr Err()
	{
		this.ValidateType(CancelOrderReceiptType.Err);
		return (CancelOrderErr)this.value;
	}
	
	public static CancelOrderReceipt Ok(OrderId info)
	{
		return new CancelOrderReceipt(CancelOrderReceiptType.Ok, info);
	}
	
	public OrderId Ok()
	{
		this.ValidateType(CancelOrderReceiptType.Ok);
		return (OrderId)this.value;
	}
	
	private void ValidateType(CancelOrderReceiptType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class CancelOrderErr
{
	public CancelOrderErrType Type { get; }
	private readonly object value;
	
	public CancelOrderErr(CancelOrderErr type, object value)
	{
		this.Type = type;
		this.value = value;
	}
	
	public static CancelOrderErr NotAllowed()
	{
		return new CancelOrderErr(CancelOrderErrType.NotAllowed, null);
	}
	
	public static CancelOrderErr NotExistingOrder()
	{
		return new CancelOrderErr(CancelOrderErrType.NotExistingOrder, null);
	}
	
	private void ValidateType(CancelOrderErrType type)
	{
		if (this.Type != type)
		{
			throw new InvalidOperationException($"Cannot cast '{this.Type}' to type '{type}'");
		}
	}
}

  
public class Balance
{
	public UnboundedUInt amount { get; set; }
	
	public Principal owner { get; set; }
	
	public Token token { get; set; }
	
}

  
public class defi_dappApiClient
{
	public void cancelOrder(OrderId arg0)
	{
	}
	public void clear()
	{
	}
	public void credit(Principal arg0, Token arg1, UnboundedUInt arg2)
	{
	}
	public void deposit(Token arg0)
	{
	}
	public void getAllBalances()
	{
	}
	public void getBalance(Token arg0)
	{
	}
	public void getBalances()
	{
	}
	public void getDepositAddress()
	{
	}
	public void getOrder(OrderId arg0)
	{
	}
	public void getOrders()
	{
	}
	public void getSymbol(Token arg0)
	{
	}
	public void placeOrder(Token arg0, UnboundedUInt arg1, Token arg2, UnboundedUInt arg3)
	{
	}
	public void whoami()
	{
	}
	public void withdraw(Token arg0, UnboundedUInt arg1, Principal arg2)
	{
	}
}

]