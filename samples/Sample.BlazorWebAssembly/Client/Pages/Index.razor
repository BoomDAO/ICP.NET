@page "/"
@using EdjCase.ICP.Agent
@using EdjCase.ICP.Agent.Models
@using EdjCase.ICP.Agent.Identities
@using EdjCase.ICP.Candid.Models
@using System.Text.Json.Serialization
@using EdjCase.ICP.Agent.Keys;
@using EdjCase.ICP.Candid.Utilities

@inject IJSRuntime JSRuntime
@inject Sample.Shared.Governance.GovernanceApiClient Client
@inject System.Net.Http.HttpClient Http


<PageTitle>Get Proposal Info</PageTitle>

<h1>Get Proposal Info</h1>

<input type="number" @bind-value="this.ProposalId" @bind-value:event="oninput" />

<button @onclick="ReloadProposalInfo">Fetch</button>

@if (this.Identity == null)
{
    <button @onclick="Login">Login</button>
}
else
{
    <button @onclick="Logout">Logout</button>
}
@if (this.Info?.HasValue == true)
{
    ProposalInfo info = this.Info.GetValueOrThrow();
    <h2>Id: @info.Id.GetValueOrDefault()</h2>
    <h2>Status: @info.Status</h2>
    <h2>Topic: @info.Topic</h2>
    if (info.LatestTally.HasValue)
    {
        Tally latestTally = info.LatestTally.GetValueOrThrow();
        <h1>Votes</h1>
        <ul>
            <li>Yes: @latestTally.Yes</li>
            <li>No: @latestTally.No</li>
            <li>Total: @latestTally.Total</li>
        </ul>
    }
    if (info.Proposal.HasValue)
    {
        Proposal proposal = info.Proposal.GetValueOrThrow();
        <h1>Proposal</h1>
        <h2>Title: @proposal.Title</h2>
        <h2>Summary: @proposal.Summary</h2>
        <h2>Url: @proposal.Url</h2>
        if (proposal.Action.HasValue)
        {
            var action = proposal.Action.GetValueOrThrow();
            switch (action.Tag)
            {
                case ActionTag.Motion:
                    <h2>Motion: @action.AsMotion().MotionText</h2>
                    break;
            }
        }
    }
    <pre>
        @JsonSerializer.Serialize(info, new JsonSerializerOptions{WriteIndented=true});
            </pre>

}
else if (this.MadeCall && this.ProposalId != null)
{
    <h2>Id: @this.ProposalId</h2>
    <h2>Proposal Not Found</h2>
}

@code {
    public ulong? ProposalId { get; set; }
    public bool MadeCall { get; set; }
    public OptionalValue<ProposalInfo>? Info { get; set; }
    public IIdentity? Identity { get; set; }

    public async Task ReloadProposalInfo()
    {
        if (this.ProposalId != null)
        {
            this.Info = await this.Client.GetProposalInfo(this.ProposalId.Value, identityOverride: this.Identity);
            this.MadeCall = true;
        }
    }

    public async Task Login()
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("window.authClientLogin", dotNetReference);
    }

    public async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("window.authClientLogout");
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await this.SetIdentityAsync();
    }

    [JSInvokable("OnLoginSuccess")] // This is required in order to JS be able to execute it
    public async Task OnLoginSuccessAsync()
    {
        await this.SetIdentityAsync();

    }

    public async Task SetIdentityAsync()
    {
        List<string>? identityValues = await this.GetLocalStorageValueAsync<List<string>>("ic-identity");
        DelegationChainModel? chainModel = await this.GetLocalStorageValueAsync<DelegationChainModel>("ic-delegation");
        if (identityValues != null && chainModel != null)
        {
            byte[] publicKeyBytes = FromHexString(identityValues[0]);
            var publicKey = new Ed25519PublicKey(publicKeyBytes);
            byte[] privateKey = FromHexString(identityValues[1]);
            var identity = new Ed25519Identity(publicKey, privateKey);
            DelegationChain chain = chainModel.ToCommon();
            this.Identity = new DelegationIdentity(identity, chain);
        }
        this.StateHasChanged();
    }

    public static byte[] FromHexString(string hexString)
    {
        var bytes = new byte[hexString.Length / 2];
        for (var i = 0; i < bytes.Length; i++)
        {
            bytes[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
        }
        return bytes;
    }

    public async Task<T?> GetLocalStorageValueAsync<T>(string key)
    {
        JsonElement storageJsonElement = await JSRuntime.InvokeAsync<JsonElement>("localStorage.getItem", key);
        string? json = storageJsonElement.GetString();
        if (json == null)
        {
            return default;
        }
        return JsonSerializer.Deserialize<T>(json)!;
    }

    public class DelegationChainModel
    {
        [JsonPropertyName("delegations")]
        public List<SignedDelegationModel> Delegations { get; set; } = new List<SignedDelegationModel>();
        [JsonPropertyName("publicKey")]
        public string PublicKey { get; set; }

        public DelegationChain ToCommon()
        {
            List<SignedDelegation> delegations = this.Delegations
                .Select(d => d.ToCommon())
                .ToList();
            Ed25519PublicKey publicKey = new(Convert.FromHexString(this.PublicKey));
            return new DelegationChain(publicKey, delegations);
        }
    }

    public class SignedDelegationModel
    {
        [JsonPropertyName("delegation")]
        public DelegationModel Delegation { get; set; }
        [JsonPropertyName("signature")]
        public string Signature { get; set; }

        public SignedDelegation ToCommon()
        {
            Delegation delegation = this.Delegation.ToCommon();
            byte[] signature = Convert.FromHexString(this.Signature);
            return new SignedDelegation(delegation, signature);
        }
    }

    public class DelegationModel
    {
        [JsonPropertyName("expiration")]
        public string Expiration { get; set; }
        [JsonPropertyName("pubkey")]
        public string PubKey { get; set; }

        public Delegation ToCommon()
        {
            var publicKey = new Ed25519PublicKey(Convert.FromHexString(this.PubKey));
            ulong nanosecondsFromNow = (ulong)ToBigInteger(FromHexString(this.Expiration), isUnsigned: true, isBigEndian: true);
            ICTimestamp expiration = ICTimestamp.FromNanoSeconds(nanosecondsFromNow);
            return new Delegation(publicKey.GetRawBytes(), expiration, targets: null);
        }

        public static System.Numerics.BigInteger ToBigInteger(byte[] bytes, bool isUnsigned, bool isBigEndian)
        {
            // BigInteger takes a twos compliment little endian value
            if (isUnsigned || isBigEndian)
            {
                BinarySequence bits = BinarySequence.FromBytes(bytes, isBigEndian);
                if (isUnsigned && bits.MostSignificantBit)
                {
                    // Convert unsigned to signed
                    bits = bits.ToTwosCompliment();
                }
                bytes = bits.ToByteArray(bigEndian: false);
            }
            return new System.Numerics.BigInteger(bytes);
        }

        internal class BinarySequence
        {
            // Least signifcant bit (index 0) => Most signifcant bit (index n - 1)
            private readonly bool[] bits;

            public bool MostSignificantBit => this.bits[this.bits.Length - 1];

            /// <param name="bits">Least signifcant to most ordered bits</param>
            public BinarySequence(bool[] bits)
            {
                this.bits = bits;
            }

            public BinarySequence ToTwosCompliment()
            {
                // If value most significant bit is `1`, the 2's compliment needs to be 1 bit larger to hold sign bit
                if (this.MostSignificantBit)
                {
                    bool[] newBits = new bool[this.bits.Length + 1];
                    this.bits.CopyTo(newBits, 0);
                    return new BinarySequence(newBits);
                }
                bool[] bits = this.ToTwosComplimentInternal().ToArray();
                return new BinarySequence(bits);
            }

            public BinarySequence ToReverseTwosCompliment()
            {
                if (this.bits.Last())
                {
                    throw new InvalidOperationException("Cannot reverse two's compliment on a negative number");
                }
                bool[] bits = this.ToTwosComplimentInternal().ToArray();
                return new BinarySequence(bits);
            }

            public byte[] ToByteArray(bool bigEndian = false)
            {
                IEnumerable<byte> bytes = this.bits
                    .Chunk(8)
                    .Select(BitsToByte);
                // Reverse if need big endian
                if (bigEndian)
                {
                    bytes = bytes.Reverse();
                }

                return bytes.ToArray();

                byte BitsToByte(bool[] bits)
                {
                    if (bits.Length > 8)
                    {
                        throw new ArgumentException("Bit length must be less than or equal to 8");
                    }
                    // Bits are in least significant first order
                    int value = 0;
                    for (int i = 0; i < bits.Length; i++)
                    {
                        bool b = bits[i];
                        if (b)
                        {
                            value |= 1 << i;
                        }
                    }
                    return (byte)value;
                }
            }

            public override string ToString()
            {
                var stringBuilder = new System.Text.StringBuilder();
                foreach (bool bit in this.bits.Reverse()) // Reverse to show LSB on right (normal display)
                {
                    stringBuilder.Append(bit ? "1" : "0");
                }
                return stringBuilder.ToString();
            }

            public static BinarySequence FromBytes(byte[] bytes, bool isBigEndian)
            {
                IEnumerable<byte> byteSeq = bytes;
                if (isBigEndian)
                {
                    byteSeq = byteSeq.Reverse();
                }
                bool[] bits = byteSeq
                    .SelectMany(ByteToBits)
                    .ToArray();
                return new BinarySequence(bits);

                IEnumerable<bool> ByteToBits(byte b)
                {
                    // Least significant first
                    yield return (b & 0b00000001) == 0b00000001;
                    yield return (b & 0b00000010) == 0b00000010;
                    yield return (b & 0b00000100) == 0b00000100;
                    yield return (b & 0b00001000) == 0b00001000;
                    yield return (b & 0b00010000) == 0b00010000;
                    yield return (b & 0b00100000) == 0b00100000;
                    yield return (b & 0b01000000) == 0b01000000;
                    yield return (b & 0b10000000) == 0b10000000;
                }
            }

            private IEnumerable<bool> ToTwosComplimentInternal()
            {
                // Invert all numbers left of the right-most `1` to get 2's compliment

                bool flipBits = false;
                foreach (bool bit in this.bits.Reverse())
                {
                    yield return flipBits ? !bit : bit;
                    // If bit is `1`, all bits to left are flipped
                    if (bit)
                    {
                        flipBits = true;
                    }
                }
            }
        }
    }
}