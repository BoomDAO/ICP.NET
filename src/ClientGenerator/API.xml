<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EdjCase.ICP.ClientGenerator</name>
    </assembly>
    <members>
        <member name="T:EdjCase.ICP.ClientGenerator.ClientCodeGenerator">
            <summary>
            Generator to create client source code based of candid definitions from `.did` files
            or from a canister id
            </summary>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.ClientCodeGenerator.GenerateClientFromCanisterAsync(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.ClientGenerator.ClientGenerationOptions)">
            <summary>
            Creates client source code for a canister based on its id. This only works if 
            the canister has the `candid:service` meta data available in its public state
            </summary>
            <param name="canisterId">The canister to get the definition from</param>
            <param name="options">The options for client generation</param>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.ClientCodeGenerator.GenerateClientFromFile(System.String,EdjCase.ICP.ClientGenerator.ClientGenerationOptions)">
            <summary>
            Generates client source code for a canister based on a `.did` file definition
            </summary>
            <param name="fileText">The text content of the `.did` definition file</param>
            <param name="options">The options for client generation</param>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.ClientCodeGenerator.GenerateClient(EdjCase.ICP.Candid.Models.CandidServiceDescription,EdjCase.ICP.ClientGenerator.ClientGenerationOptions)">
            <summary>
            Generates client source code for a canister based on a `.did` file definition
            </summary>
            <param name="service">The service definition to generate the client from</param>
            <param name="options">The options for client generation</param>
        </member>
        <member name="T:EdjCase.ICP.ClientGenerator.ClientGenerationOptions">
            <summary>
            Options for generating a client
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.Name">
            <summary>
            The name of the client class and file to use
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.GetDefinitionFromCansiter">
            <summary>
            If true, will treat `FilePathOrCanisterId` as a canister id and get the definition from the canister. Otherwise will treat it as a file path and get the definition from the file
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.FilePathOrCanisterId">
            <summary>
            The file path to a local *.did file to get definition from or the canister id, depending on `GetDefinitionFromCansiter` value
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.PurgeOutputDirectory">
            <summary>
            If true, removes all files in the output directory before regeneration, otherwise does nothing. Defaults to true
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.Namespace">
            <summary>
            The base namespace to use in the generated files
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.OutputDirectory">
            <summary>
            If true, there will be no folders, all files will be in the same directory
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.NoFolders">
            <summary>
            If true, there will be no folders, all files will be in the same directory
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.FeatureNullable">
            <summary>
            If true, the nullable C# feature will be used
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.VariantsUseProperties">
            <summary>
            If true, variant classes will be generated with properties instead of methods
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.KeepCandidCase">
            <summary>
            If true, the names of properties and methods will keep the raw candid name.
            Otherwise they will be converted to something prettier
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.OverrideOptionalValue">
            <summary>
            If true, OptionalValue will be used for opt values
            Otherwise will use just the nullable class values or nullable struct
            Defaults to true
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.BoundryNodeUrl">
            <summary>
            Optional. The url of the boundry node for the internet computer. Defaults to ic0.app
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.Types">
            <summary>
            Optional. Specifies options for each candid type in the definition.
            Only supports named types, no anonymous types
            </summary>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.ClientGenerationOptions.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Uri,System.Collections.Generic.Dictionary{System.String,EdjCase.ICP.ClientGenerator.NamedTypeOptions})">
            <param name="name">The name of the client class and file to use</param>
            <param name="namespace">The base namespace to use in the generated files</param>
            <param name="getDefinitionFromCanister">If true, will treat <paramref name="filePathOrCandidId"/> as a canister id and get the definition from the canister. Otherwise will treat it as a file path and get the definition from the file</param>
            <param name="filePathOrCandidId">The file path to a local *.did file to get definition from or the canister id, depending on <paramref name="getDefinitionFromCanister"/> value</param>
            <param name="outputDirectory">The output directory to generate the client files</param>
            <param name="purgeOutputDirectory">If true, removes all files in the output directory before regeneration. Defaults to true</param>
            <param name="noFolders">If true, there will be no folders, all files will be in the same directory</param>
            <param name="featureNullable">If true, the nullable C# feature will be used</param>
            <param name="variantsUseProperties">If true, variant classes will be generated with properties instead of methods</param>
            <param name="keepCandidCase">If true, the names of properties and methods will keep the raw candid name. Otherwise they will be converted to something prettier</param>
            <param name="overrideOptionalValue">If false, OptionalValue will be used for opt values, Otherwise will use just the nullable class values or nullable struct where possible. Defaults to false</param>
            <param name="boundryNodeUrl">Optional. The url of the boundry node for the internet computer. Defaults to ic0.app</param>
            <param name="types">Optional. Specifies options for each candid type in the definition</param>
        </member>
        <member name="T:EdjCase.ICP.ClientGenerator.NamedTypeOptions">
            <summary>
            Type options for a record field or variant option
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.NamedTypeOptions.NameOverride">
            <summary>
            Optional. The C# type name to use instead of the default
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.NamedTypeOptions.TypeOptions">
            <summary>
            Optional. The field or option type information
            </summary>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.NamedTypeOptions.#ctor(System.String,EdjCase.ICP.ClientGenerator.TypeOptions)">
            <param name="nameOverride">Optional. The C# type name to use instead of the default</param>
            <param name="typeOptions">Optional. The field or option type information</param>
        </member>
        <member name="T:EdjCase.ICP.ClientGenerator.TypeOptions">
            <summary>
            Interface to specify generation options for specific types in the candid
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.TypeOptions.Fields">
            <summary>
            Optional. The type options for each of the records fields or variant options
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.TypeOptions.InnerType">
            <summary>
            Optional. The type options for the sub type of a vec or opt
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.TypeOptions.Representation">
            <summary>
            Optional. How the type should be represented in C#
            </summary>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.TypeOptions.#ctor(System.Collections.Generic.Dictionary{System.String,EdjCase.ICP.ClientGenerator.NamedTypeOptions},EdjCase.ICP.ClientGenerator.TypeOptions,System.String)">
            <param name="fields">Optional. The type options for each of the records fields or variant options</param>
            <param name="innerType">Optional. The type options for the sub type of a vec or opt</param>
            <param name="representation">Optional. How the type should be represented in C#</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:EdjCase.ICP.ClientGenerator.ClientSyntax">
            <summary>
            A model containing the client code to be rendered
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientSyntax.Name">
            <summary>
            The name of the client
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientSyntax.ClientFile">
            <summary>
            The syntax of the client file
            </summary>
        </member>
        <member name="P:EdjCase.ICP.ClientGenerator.ClientSyntax.TypeFiles">
            <summary>
            The syntax of different declared types for the client
            </summary>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.ClientSyntax.#ctor(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax,System.Collections.Generic.List{System.ValueTuple{System.String,Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax}})">
            <param name="name">The name of the client</param>
            <param name="clientFile">The syntax of the client file</param>
            <param name="typeFiles">The syntax of different declared types for the client</param>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.ClientSyntax.Rewrite(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter)">
            <summary>
            Rewrites the syntax with the specified `CSharpSyntaxRewriter`
            </summary>
            <param name="rewriter">A `CSharpSyntaxRewriter` to rewrite the csharp syntax</param>
            <returns>Updated client syntax</returns>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.ClientSyntax.GenerateFileContents">
            <summary>
            Converts the file syntax objects into source code string values to use as a file
            </summary>
            <returns>Client and type source code file contents</returns>
        </member>
        <member name="M:EdjCase.ICP.ClientGenerator.ClientSyntax.GenerateFileContents(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)">
            <summary>
            Helper function to turn a client or type into a string of file contents
            </summary>
            <param name="syntax">The client or type file to convert to a string</param>
            <returns>String source code of the specified syntax</returns>
        </member>
    </members>
</doc>
