<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EdjCase.ICP.Agent</name>
    </assembly>
    <members>
        <member name="T:EdjCase.ICP.Agent.Agents.Http.DefaultHttpClient">
            <summary>
            The default http client to use with the built in `HttpClient`
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.Http.DefaultHttpClient.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">HTTP client to use</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.Http.DefaultHttpClient.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.Http.DefaultHttpClient.PostAsync(System.String,System.Byte[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="T:EdjCase.ICP.Agent.Agents.Http.IHttpClient">
            <summary>
            A simple http request interface for sending messages
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.Http.IHttpClient.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Sends a GET http request and awaits the response
            </summary>
            <param name="url">The url to send the GET request to</param>
            <param name="cancellationToken">Optional. Token to cancel request</param>
            <returns>The http response</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.Http.IHttpClient.PostAsync(System.String,System.Byte[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Sends a POST http request and awaits a response
            </summary>
            <param name="url">The url to send the POST request to</param>
            <param name="cborBody">The CBOR encoded body to send</param>
            <param name="cancellationToken">Optional. Token to cancel request</param>
            <returns>The http response</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Agents.Http.HttpResponse">
            <summary>
            A model holding the HTTP response info
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Agents.Http.HttpResponse.StatusCode">
            <summary>
            The HTTP status code
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.Http.HttpResponse.#ctor(System.Net.HttpStatusCode,System.Func{System.Threading.Tasks.Task{System.Byte[]}})">
            <summary>
            Default constructor
            </summary>
            <param name="statusCode">The status code from the http response</param>
            <param name="getContentFunc">A func that returns the http response content</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.Http.HttpResponse.GetContentAsync">
            <summary>
            Returns the response content bytes
            </summary>
            <returns>Content bytes</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.Http.HttpResponse.ThrowIfErrorAsync">
            <summary>
            Throws an exception if the status code is not 200-299, otherwise does nothing
            </summary>
            <returns></returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Agents.HttpAgent">
            <summary>
            An `IAgent` implementation using HTTP to make requests to the IC
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Agents.HttpAgent.Identity">
            <summary>
            The identity that will be used on each request unless overriden
            This identity can be anonymous
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.HttpAgent.#ctor(EdjCase.ICP.Agent.Agents.Http.IHttpClient,EdjCase.ICP.Agent.Identities.IIdentity,EdjCase.ICP.BLS.IBlsCryptography)">
            <param name="identity">Optional. Identity to use for each request. If unspecified, will use anonymous identity</param>
            <param name="bls">Optional. Bls crypto implementation to validate signatures. If unspecified, will use default implementation</param>
            <param name="httpClient">Optional. Sets the http client to use, otherwise will use the default http client</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.HttpAgent.#ctor(EdjCase.ICP.Agent.Identities.IIdentity,System.Uri,EdjCase.ICP.BLS.IBlsCryptography)">
            <param name="identity">Optional. Identity to use for each request. If unspecified, will use anonymous identity</param>
            <param name="bls">Optional. Bls crypto implementation to validate signatures. If unspecified, will use default implementation</param>
            <param name="httpBoundryNodeUrl">Url to the boundry node to connect to. Defaults to `https://ic0.app/`</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.HttpAgent.CallAsync(EdjCase.ICP.Candid.Models.Principal,System.String,EdjCase.ICP.Candid.Models.CandidArg,EdjCase.ICP.Candid.Models.Principal,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.HttpAgent.QueryAsync(EdjCase.ICP.Candid.Models.Principal,System.String,EdjCase.ICP.Candid.Models.CandidArg,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.HttpAgent.ReadStateAsync(EdjCase.ICP.Candid.Models.Principal,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.StatePath},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.HttpAgent.GetRequestStatusAsync(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Candid.Models.RequestId,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.HttpAgent.GetRootKeyAsync(System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.HttpAgent.GetReplicaStatusAsync(System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="T:EdjCase.ICP.Agent.Agents.IAgent">
            <summary>
            An agent is used to communicate with the Internet Computer with certain protocols that 
            are specific to an `IAgent` implementation
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Agents.IAgent.Identity">
            <summary>
            The identity to use for requests. If null, then it will use the anonymous identity
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.ReadStateAsync(EdjCase.ICP.Candid.Models.Principal,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.StatePath},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the state of a specified canister with the subset of state information
            specified by the paths parameter
            </summary>
            <param name="canisterId">Canister to read state for</param>
            <param name="paths">The state paths to get information for. Other state data will be pruned if not specified</param>
            <param name="cancellationToken">Optional. Token to cancel request</param>
            <returns>A response that contains the certificate of the current cansiter state</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.GetRequestStatusAsync(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Candid.Models.RequestId,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the status of a request that is being processed by the specified canister
            </summary>
            <param name="canisterId">Canister where the request was sent to</param>
            <param name="id">Id of the request to get a status for</param>
            <param name="cancellationToken">Optional. Token to cancel request</param>
            <returns>A status variant of the request. If request is not found, will return null</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.CallAsync(EdjCase.ICP.Candid.Models.Principal,System.String,EdjCase.ICP.Candid.Models.CandidArg,EdjCase.ICP.Candid.Models.Principal,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Sends a call request to a specified canister method and gets back an id of the 
            request that is being processed. This call does NOT wait for the request to be complete.
            Either check the status with `GetRequestStatusAsync` or use the `CallAndWaitAsync` method
            </summary>
            <param name="canisterId">Canister to read state for</param>
            <param name="method">The name of the method to call on the cansiter</param>
            <param name="arg">The candid arg to send with the request</param>
            <param name="effectiveCanisterId">Optional. Specifies the relevant canister id if calling the root canister</param>
            <param name="cancellationToken">Optional. Token to cancel request</param>
            <returns>The id of the request that can be used to look up its status with `GetRequestStatusAsync`</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.GetReplicaStatusAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the status of the IC replica. This includes versioning information
            about the replica
            </summary>
            <returns>A response containing all replica status information</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.QueryAsync(EdjCase.ICP.Candid.Models.Principal,System.String,EdjCase.ICP.Candid.Models.CandidArg,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Sends a query request to a specified canister method
            </summary>
            <param name="canisterId">Canister to read state for</param>
            <param name="method">The name of the method to call on the cansiter</param>
            <param name="arg">The candid arg to send with the request</param>
            <param name="cancellationToken">Optional. Token to cancel request</param>
            <returns>The response data of the query call</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.GetRootKeyAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the root public key of the current Internet Computer network
            </summary>
            <param name="cancellationToken">Optional. Token to cancel request</param>
            <returns>The root public key bytes </returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Agents.IAgentExtensions">
            <summary>
            Extension methods for the `IAgent` interface
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgentExtensions.CallAndWaitAsync(EdjCase.ICP.Agent.Agents.IAgent,EdjCase.ICP.Candid.Models.Principal,System.String,EdjCase.ICP.Candid.Models.CandidArg,EdjCase.ICP.Candid.Models.Principal,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Sends a call request to a specified canister method, waits for the request to be processed,
            the returns the candid response to the call. This is helper method built on top of `CallAsync`
            to wait for the response so it doesn't need to be implemented manually
            </summary>
            <param name="agent">The agent to use for the call</param>
            <param name="canisterId">Canister to read state for</param>
            <param name="method">The name of the method to call on the cansiter</param>
            <param name="arg">The candid arg to send with the request</param>
            <param name="effectiveCanisterId">Optional. Specifies the relevant canister id if calling the root canister</param>
            <param name="cancellationToken">Optional. Token to cancel request</param>
            <returns>The id of the request that can be used to look up its status with `GetRequestStatusAsync`</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.AlgorithmIdentifier">
            <summary>
            A model to contain OID information for cryptographic algorithms and their curves.
            Used in SubjectPublicKeyInfo models
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.AlgorithmIdentifier.AlgorithmOid">
            <summary>
            The OID of the algorithm
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.AlgorithmIdentifier.ParametersOid">
            <summary>
            The OID of the parameters of the algorithm, such as a specific curve OID
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.AlgorithmIdentifier.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="algorithmOid">The OID of the algorithm</param>
            <param name="parametersOid">The OID of the parameters of the algorithm, such as a specific curve OID</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.AlgorithmIdentifier.Ed25519">
            <summary>
            Helper method to create an `AlgorithmIdentifier` for Ed25519
            </summary>
            <returns>AlgorithmIdentifier for Ed25519</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.AlgorithmIdentifier.Secp256k1">
            <summary>
            Helper method to create an `AlgorithmIdentifier` for Secp256k1
            </summary>
            <returns>AlgorithmIdentifier for Secp256k1</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.AlgorithmIdentifier.Ecdsa(System.String)">
            <summary>
            Helper method to create an `AlgorithmIdentifier` for Ecdsa
            </summary>
            <param name="curveOid">The OID of the specific curve to use for ECDSA</param>
            <returns>AlgorithmIdentifier for Ecdsa</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.AlgorithmIdentifier.Bls">
            <summary>
            Helper method to create an `AlgorithmIdentifier` for Bls
            </summary>
            <returns>AlgorithmIdentifier for Bls</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.RequestCleanedUpException">
            <summary>
            Exception to indicate that a request has been cleaned up.
            This is usually due to the request being too old
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.RequestCleanedUpException.#ctor">
            <summary></summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.InvalidPublicKey">
            <summary>
            Exception to indicate that the specified public key is invalid
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.InvalidPublicKey.#ctor(System.Exception)">
            <summary></summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.InvalidCertificateException">
            <summary>
            Exception to indicate that the certificate is invalid
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.InvalidCertificateException.#ctor(System.String)">
            <param name="message">Specific error message</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.CallRejectedException">
            <summary>
            Exception for when a call to a canister is rejected/has an error
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.CallRejectedException.RejectCode">
            <summary>
            The type of rejection that occurred
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.CallRejectedException.RejectMessage">
            <summary>
            The human readable message of the rejection error
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.CallRejectedException.ErrorCode">
            <summary>
            Optional. Specific error code for differentiating specific errors
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.CallRejectedException.#ctor(EdjCase.ICP.Agent.Responses.RejectCode,System.String,System.String)">
            <param name="rejectCode">The type of rejection that occurred</param>
            <param name="rejectMessage">The human readable message of the rejection error</param>
            <param name="errorCode">Optional. Specific error code for differentiating specific errors</param>
        </member>
        <member name="P:EdjCase.ICP.Agent.CallRejectedException.Message">
            <inheritdoc />
        </member>
        <member name="T:EdjCase.ICP.Agent.QueryRejectedException">
            <summary>
            Exception for when a query to a canister is rejected/has an error
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.QueryRejectedException.Info">
            <summary>
            The details of the rejection
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.QueryRejectedException.#ctor(EdjCase.ICP.Agent.Responses.QueryRejectInfo)">
            <param name="info">The type of rejection that occurred</param>
        </member>
        <member name="P:EdjCase.ICP.Agent.QueryRejectedException.Message">
            <inheritdoc />
        </member>
        <member name="T:EdjCase.ICP.Agent.Identities.DelegationIdentity">
            <summary>
            An identity that has a signed delegation chain that authorizes
            the identity to act as another identity
            
            This is commonly used for things like Internet Identity where
            a login session always generates a new key but that key has been 
            signed by an authorized device through internet identity
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Identities.DelegationIdentity.Identity">
            <summary>
            The identity that authorization has been delegated to
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Identities.DelegationIdentity.Chain">
            <summary>
            The chain of singed delegations that prove authorization of the identity
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.DelegationIdentity.#ctor(EdjCase.ICP.Agent.Identities.IIdentity,EdjCase.ICP.Agent.Models.DelegationChain)">
            <param name="identity">The identity that authorization has been delegated to</param>
            <param name="chain">The chain of singed delegations that prove authorization of the identity</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.DelegationIdentity.GetPublicKey">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.DelegationIdentity.Sign(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.DelegationIdentity.GetSenderDelegations">
            <inheritdoc/>
        </member>
        <member name="T:EdjCase.ICP.Agent.Identities.EcdsaIdentity">
            <summary>
            An identity using a Ed25519 key
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Identities.EcdsaIdentity.PublicKey">
            <summary>
            The public key of the identity, DER encoded
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Identities.EcdsaIdentity.PrivateKey">
            <summary>
            The private key of the identity
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.EcdsaIdentity.#ctor(System.Byte[],System.Byte[],System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="publicKey">The raw public key</param>
            <param name="privateKey">The raw private key</param>
            <param name="curveOid">The ecdsa curve OID to use</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.EcdsaIdentity.GetPublicKey">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.EcdsaIdentity.Sign(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.EcdsaIdentity.GetSenderDelegations">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.EcdsaIdentity.DeriveUncompressedPublicKey(System.Byte[],System.String)">
            <summary>
            Derive the public key value from the private key and curve
            </summary>
            <param name="privateKey">The raw private key</param>
            <param name="curveOid">The OID of the curve to use</param>
            <returns>The raw uncompressed public key</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.EcdsaIdentity.GeneratePrivateKey(System.String)">
            <summary>
            Generates a new private key with the specified curve
            </summary>
            <param name="curveOid">The OID of the curve to use</param>
            <returns>A raw private key</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Identities.Ed25519Identity">
            <summary>
            An identity using a Ed25519 key
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Identities.Ed25519Identity.PublicKey">
            <summary>
            The public key of the identity
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Identities.Ed25519Identity.PrivateKey">
            <summary>
            The private key of the identity
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Ed25519Identity.#ctor(System.Byte[],System.Byte[])">
            <param name="publicKey">The public key of the identity</param>
            <param name="privateKey">The private key of the identity</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Ed25519Identity.GetPublicKey">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Ed25519Identity.Sign(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Ed25519Identity.GetSenderDelegations">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Ed25519Identity.Generate">
            <summary>
            Generates an identity with a new Ed25519 key pair
            </summary>
            <returns>A Ed25519 identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Ed25519Identity.FromPrivateKey(System.Byte[])">
            <summary>
            Converts a raw ed25519 private key to a Secp256k1Identity, deriving the public key
            </summary>
            <param name="privateKey">Raw ed25519 private key</param>
            <returns>Ed25519Identity with specified private key</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Identities.IdentityUtil">
            <summary>
            Utility class for helper methods around Identities
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IdentityUtil.GenerateSecp256k1Identity">
            <summary>
            Generates a new Secp256k1 identity with a new private key
            </summary>
            <returns>Secp256k1 identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IdentityUtil.GenerateEd25519Identity">
            <summary>
            Generates a new Ed25519 identity with a new private key
            </summary>
            <returns>Ed25519 identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IdentityUtil.FromSecp256k1PrivateKey(System.Byte[])">
            <summary>
            Converts a raw private key into a Secp256k1Identity class
            </summary>
            <param name="privateKey">A raw Secp256k1 private key</param>
            <returns>Secp256k1 identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IdentityUtil.FromEd25519PrivateKey(System.Byte[])">
            <summary>
            Converts a raw private key into a Ed25519Identity class
            </summary>
            <param name="privateKey">A raw Ed25519 private key</param>
            <returns>Ed25519 identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IdentityUtil.FromPemFile(System.String,System.String)">
            <summary>
            Parses a PEM file into the proper IIdentity class
            </summary>
            <param name="pemFilePath">The file path of a PEM file</param>
            <param name="password">Optional. The password of the encrypted PEM file</param>
            <returns>IIdentity for the private key</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IdentityUtil.FromPemFile(System.IO.Stream,System.String)">
            <summary>
            Parses a PEM file into the proper IIdentity class
            </summary>
            <param name="pemFile">The stream of a PEM file</param>
            <param name="password">Optional. The password of the encrypted PEM file</param>
            <returns>IIdentity for the private key</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IdentityUtil.FromPemFile(System.IO.TextReader,System.String)">
            <summary>
            Parses a PEM file into the proper IIdentity class
            </summary>
            <param name="pemFileReader">The text reader of a PEM file</param>
            <param name="password">Optional. The password of the encrypted PEM file</param>
            <returns>IIdentity for the private key</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Identities.IIdentity">
            <summary>
            Identity to use for requests to Internet Computer canisters
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IIdentity.GetPublicKey">
            <summary>
            Returns the public key of the identity
            </summary>
            <returns>Public key of the identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IIdentity.GetPrincipal">
            <summary>
            Returns the principal of the identity
            </summary>
            <returns>Principal of the identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IIdentity.GetSenderDelegations">
            <summary>
            Gets the signed delegations for the identity.
            Delegations will exist if the identity is a delegated identity
            instead of having the raw keys. This is used in Internet Identity
            </summary>
            <returns>The signed delegations, otherwise an empty list</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IIdentity.Sign(System.Byte[])">
            <summary>
            Signs the specified bytes with the identity key
            </summary>
            <param name="data">The byte data to sign</param>
            <returns>The signature bytes of the specified data bytes</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Identities.IIdentityExtensions">
            <summary>
            Extension methods for the IIdentity interface
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.IIdentityExtensions.SignContent(EdjCase.ICP.Agent.Identities.IIdentity,System.Collections.Generic.Dictionary{System.String,EdjCase.ICP.Candid.Models.IHashable})">
            <summary>
            Signs the hashable content
            </summary>
            <param name="identity">The identity to sign the content with</param>
            <param name="content">The data that needs to be signed</param>
            <returns>The content with signature(s) from the identity</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Identities.Secp256k1Identity">
            <summary>
            An identity using a Secp256k1 key
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Secp256k1Identity.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Default constructor
            </summary>
            <param name="publicKey">The raw Secp256k1 public key</param>
            <param name="privateKey">The raw Secp256k1 private key</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Secp256k1Identity.FromPrivateKey(System.Byte[])">
            <summary>
            Converts a raw secp256k1 private key to a Secp256k1Identity, deriving the public key
            </summary>
            <param name="privateKey">Raw secp256k1 private key</param>
            <returns>Secp256k1Identity with specified private key</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Identities.Secp256k1Identity.Generate">
            <summary>
            Generates a new secp256k1 public/private key pair and creates an identity
            for them
            </summary>
            <returns>Secp256k1Identity with new key pair</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Models.Certificate">
            <summary>
            A model that contains a state tree along with a validation signature. If required
            the model can have a delegation to allow for subnet data/keys
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.Certificate.Tree">
            <summary>
            A partial state tree of the requested state data
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.Certificate.Signature">
            <summary>
            A signature on the tree root hash. Used to validate the tree
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.Certificate.Delegation">
            <summary>
            Optional. A signed delegation that links a public key to the root public key
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.Certificate.#ctor(EdjCase.ICP.Candid.Models.HashTree,System.Byte[],EdjCase.ICP.Agent.Models.CertificateDelegation)">
            <param name="tree">A partial state tree of the requested state data</param>
            <param name="signature">A signature on the tree root hash. Used to validate the tree</param>
            <param name="delegation">Optional. A signed delegation that links a public key to the root public key</param>
            <exception cref="T:System.ArgumentNullException">Throws if either `tree` or `signature` are null</exception>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.Certificate.IsValid(EdjCase.ICP.BLS.IBlsCryptography,EdjCase.ICP.Agent.SubjectPublicKeyInfo)">
            <summary>
            Checks the validity of the certificate based off the 
            specified root public key
            </summary>
            <param name="bls">BLS crytography implementation to verify signature</param>
            <param name="rootPublicKey">The root public key (DER encoded) of the internet computer network</param>
            <returns>True if the certificate is valid, otherwise false</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Models.CertificateDelegation">
            <summary>
            A model that contains a certificate proving the delegation of a subnet for the subnet certificate
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.CertificateDelegation.SubnetId">
            <summary>
            The principal of the subnet being delegated to
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.CertificateDelegation.Certificate">
            <summary>
            The signed certificate that is signed by the delegator
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.CertificateDelegation.#ctor(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Agent.Models.Certificate)">
            <param name="subnetId">The principal of the subnet being delegated to</param>
            <param name="certificate">The signed certificate that is signed by the delegator</param>
            <exception cref="T:System.ArgumentNullException">Throws if either `subnetId` or `certificate` are null</exception>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.CertificateDelegation.GetPublicKey">
            <summary>
            Gets the public key value from the hash tree in the certificate
            </summary>
            <returns>The delegation public key for the subnet</returns>
            <exception cref="T:System.InvalidOperationException">Throws if certificate is missing `subnet/{subnet_id}/public_key`</exception>
        </member>
        <member name="T:EdjCase.ICP.Agent.Models.Delegation">
            <summary>
            A model that contains data on delegating authority from an identity
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.Delegation.PublicKey">
            <summary>
            The public key from the authorizing identity
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.Delegation.Expiration">
            <summary>
            The expiration when the delegation will no longer be valid
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.Delegation.Targets">
            <summary>
            Optional. A list of canister ids where the delegation can be sent to and be authorized
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.Delegation.Senders">
            <summary>
            Optional. A list of sender ids that can send this delegation and be authorized
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.Delegation.#ctor(EdjCase.ICP.Agent.SubjectPublicKeyInfo,EdjCase.ICP.Candid.Models.ICTimestamp,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal},System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal})">
            <param name="publicKey">The public key from the authorizing identity</param>
            <param name="expiration">The expiration when the delegation will no longer be valid</param>
            <param name="targets">Optional. A list of canister ids where the delegation can be sent to and be authorized</param>
            <param name="senders">Optional. A list of sender ids that can send this delegation and be authorized</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.Delegation.BuildHashableItem">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.Delegation.ComputeHash(EdjCase.ICP.Candid.Crypto.IHashFunction)">
            <inheritdoc/>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.Delegation.BuildSigningChallenge">
            <summary>
            Creates a byte array of the data that can be signed by an algorithm for authorization/signature purposes
            </summary>
            <returns>Byte array representation of the data</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Models.DelegationChain">
            <summary>
            A model containing a list of signed delegations to authorize an identity 
            to act on behalf of the chain's public key
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.DelegationChain.PublicKey">
            <summary>
            The public key of the identity that has delegated authority, DER encoded
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.DelegationChain.Delegations">
            <summary>
            <para>The chain of delegations to authorize a key<br/>
            Each delegation is signed by its parent key<br/>
            The first delegation's parent is the root key (`PublicKey` in `DelegationChain`)<br/>
            The last delegation is for the key to be authorized</para>
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.DelegationChain.#ctor(EdjCase.ICP.Agent.SubjectPublicKeyInfo,System.Collections.Generic.List{EdjCase.ICP.Agent.Models.SignedDelegation})">
            <param name="publicKey">The public key of the identity that has delegated authority, DER encoded</param>
            <param name="delegations">The chain of delegations to authorize a key</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.DelegationChain.Create(EdjCase.ICP.Agent.SubjectPublicKeyInfo,EdjCase.ICP.Agent.Identities.IIdentity,EdjCase.ICP.Candid.Models.ICTimestamp,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal},System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal})">
            <summary>
            Creates a delegation chain from the specified keys
            </summary>
            <param name="keyToDelegateTo">The key to delegate authority to, DER encoded</param>
            <param name="delegatingIdentity">The identity that is signing the delegation</param>
            <param name="expiration">How long to delegate for</param>
            <param name="targets">Optional. List of canister ids to limit delegation to</param>
            <param name="senders">Optional. List of pricipals where requests can originate from</param>
            <returns>A delegation chain signed by the delegating identity</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Models.SignedContent">
            <summary>
            A model containing content and the signature information of it
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.SignedContent.Content">
            <summary>
            The content that is signed in the form of key value pairs
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.SignedContent.SenderPublicKey">
            <summary>
            Public key used to authenticate this request, unless anonymous, then null
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.SignedContent.SenderDelegations">
            <summary>
            Optional. A chain of delegations, starting with the one signed by sender_pubkey
            and ending with the one delegating to the key relating to sender_sig.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.SignedContent.SenderSignature">
            <summary>
            Signature to authenticate this request, unless anonymous, then null
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.SignedContent.#ctor(System.Collections.Generic.Dictionary{System.String,EdjCase.ICP.Candid.Models.IHashable},EdjCase.ICP.Agent.SubjectPublicKeyInfo,System.Collections.Generic.List{EdjCase.ICP.Agent.Models.SignedDelegation},System.Byte[])">
            <param name="content">The content that is signed in the form of key value pairs</param>
            <param name="senderPublicKey">Public key used to authenticate this request, unless anonymous, then null</param>
            <param name="delegations">Optional. A chain of delegations, starting with the one signed by sender_pubkey 
            and ending with the one delegating to the key relating to sender_sig.</param>
            <param name="senderSignature">Signature to authenticate this request, unless anonymous, then null</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.SignedContent.BuildHashableItem">
            <inheritdoc />
        </member>
        <member name="T:EdjCase.ICP.Agent.Models.SignedDelegation">
            <summary>
            A delegation that has been signed by an identity
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.SignedDelegation.Delegation">
            <summary>
            The delegation that is signed
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Models.SignedDelegation.Signature">
            <summary>
            The signature for the delegation
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.SignedDelegation.#ctor(EdjCase.ICP.Agent.Models.Delegation,System.Byte[])">
            <param name="delegation">The delegation that is signed</param>
            <param name="signature">The signature for the delegation</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.SignedDelegation.Create(EdjCase.ICP.Agent.SubjectPublicKeyInfo,EdjCase.ICP.Agent.Identities.IIdentity,EdjCase.ICP.Candid.Models.ICTimestamp,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal},System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal})">
            <summary>
            Creates a delegation signed by the delegating identity, authorizing the public key
            </summary>
            <param name="keyToDelegateTo">The key to delegate authority to</param>
            <param name="delegatingIdentity">The identity that is signing the delegation</param>
            <param name="expiration">How long to delegate for</param>
            <param name="targets">Optional. List of canister ids to limit delegation to</param>
            <param name="senders">Optional. List of pricipals where requests can originate from</param>
            <returns>A delegation signed by the delegating identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.SignedDelegation.Create(EdjCase.ICP.Agent.SubjectPublicKeyInfo,System.Func{System.Byte[],System.Byte[]},EdjCase.ICP.Candid.Models.ICTimestamp,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal},System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal})">
            <summary>
            Creates a delegation signed by the delegating identity, authorizing the public key
            </summary>
            <param name="keyToDelegateTo">The key to delegate authority to</param>
            <param name="signingFunc">Function to sign the delegation bytes</param>
            <param name="expiration">How long to delegate for</param>
            <param name="targets">Optional. List of canister ids to limit delegation to</param>
            <param name="senders">Optional. List of pricipals where requests can originate from</param>
            <returns>A delegation signed by the delegating identity</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Models.SignedDelegation.ComputeHash(EdjCase.ICP.Candid.Crypto.IHashFunction)">
            <inheritdoc />
        </member>
        <member name="T:EdjCase.ICP.Agent.Requests.CallRequest">
            <summary>
            A model for making call requests to a canister
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.CanisterId">
            <summary>
            The principal of the canister to call
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.Method">
            <summary>
            Name of the canister method to call
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.Arg">
            <summary>
            Argument to pass to the canister method
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.Sender">
            <summary>
            The user who issued the request
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.IngressExpiry">
            <summary>
            An upper limit on the validity of the request, expressed in nanoseconds since 1970-01-01
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.Nonce">
            <summary>
            Optional. Arbitrary user-provided data, typically randomly generated. This can be used to create distinct requests with otherwise identical fields.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Requests.CallRequest.#ctor(EdjCase.ICP.Candid.Models.Principal,System.String,EdjCase.ICP.Candid.Models.CandidArg,EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Candid.Models.ICTimestamp,System.Byte[])">
            <param name="canisterId">The principal of the canister to call</param>
            <param name="method">Name of the canister method to call</param>
            <param name="arg">Argument to pass to the canister method</param>
            <param name="sender">The user who issued the request</param>
            <param name="ingressExpiry">An upper limit on the validity of the request, expressed in nanoseconds since 1970-01-01</param>
            <param name="nonce">Optional. Arbitrary user-provided data, typically randomly generated. This can be used to create distinct requests with otherwise identical fields.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Requests.CallRequest.BuildHashableItem">
            <inheritdoc />
        </member>
        <member name="T:EdjCase.ICP.Agent.Requests.QueryRequest">
            <summary>
            A model for making query requests to a canister
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.RequestType">
            <summary>
            The type of request to send. Will always be 'query'
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.CanisterId">
            <summary>
            The principal of the canister to call
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.Method">
            <summary>
            Name of the canister method to call
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.Arg">
            <summary>
            Arguments to pass to the canister method
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.Sender">
            <summary>
            The user who issued the request
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.IngressExpiry">
            <summary>
            An upper limit on the validity of the request, expressed in nanoseconds since 1970-01-01
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.Nonce">
            <summary>
            Optional. Arbitrary user-provided data, typically randomly generated. 
            This can be used to create distinct requests with otherwise identical fields.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Requests.QueryRequest.#ctor(EdjCase.ICP.Candid.Models.Principal,System.String,EdjCase.ICP.Candid.Models.CandidArg,EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Candid.Models.ICTimestamp)">
            <param name="canisterId">The principal of the canister to call</param>
            <param name="method">Name of the canister method to call</param>
            <param name="arg">Arguments to pass to the canister method</param>
            <param name="sender">The user who issued the request</param>
            <param name="ingressExpiry"> The expiration of the request to avoid replay attacks</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Requests.QueryRequest.BuildHashableItem">
            <inheritdoc />
        </member>
        <member name="T:EdjCase.ICP.Agent.Requests.ReadStateRequest">
            <summary>
            A model for making a read state request to a canister
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.ReadStateRequest.REQUEST_TYPE">
            <summary>
            The type of request to send. Will always be 'query'
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.ReadStateRequest.Paths">
            <summary>
            A list of paths to different state data to obtain. If not specified, data will be pruned and 
            be unavailable in the response
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.ReadStateRequest.Sender">
            <summary>
            The user who is sending the request
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.ReadStateRequest.IngressExpiry">
            <summary>
            The expiration of the request to avoid replay attacks
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Requests.ReadStateRequest.#ctor(System.Collections.Generic.List{EdjCase.ICP.Candid.Models.StatePath},EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Candid.Models.ICTimestamp)">
            <param name="paths">A list of paths to different state data to obtain. If not specified, data will be pruned and 
            be unavailable in the response</param>
            <param name="sender">The user who is sending the request</param>
            <param name="ingressExpiry">The expiration of the request to avoid replay attacks</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Requests.ReadStateRequest.BuildHashableItem">
            <inheritdoc />
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.CallRejectedResponse.Code">
            <summary>
            The type of query reject
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.CallRejectedResponse.Message">
            <summary>
            Optional. A human readable message about the rejection
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.CallRejectedResponse.ErrorCode">
            <summary>
            Optional. A specific error id for the reject
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.NodeSignature">
            <summary>
            Signature data from a replica node
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.NodeSignature.Timestamp">
            <summary>
            Timestamp when the signature was created
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.NodeSignature.Signature">
            <summary>
            The signature bytes
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.NodeSignature.Identity">
            <summary>
            The identity of the signer
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Responses.NodeSignature.#ctor(EdjCase.ICP.Candid.Models.ICTimestamp,System.Byte[],EdjCase.ICP.Candid.Models.Principal)">
            <param name="timestamp">Timestamp when the signature was created</param>
            <param name="signature">The signature bytes</param>
            <param name="identity">The identity of the signer</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.QueryResponse">
            <summary>
            A model representing the response data in the form of a variant
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.QueryResponse.Type">
            <summary>
            The type of response returned. Can be used to call the right method
            to extract the variant data
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.QueryResponse.Signatures">
            <summary>
            Signatures from the replica node
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Responses.QueryResponse.AsReplied">
            <summary>
            Gets the reply data IF the response type is 'replied'. Otherwise will throw exception
            </summary>
            <exception cref="T:System.InvalidOperationException">Will throw if not of type 'replied'</exception>
            <returns>Reply data</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Responses.QueryResponse.AsRejected">
            <summary>
            Gets the reply data IF the response type is 'rejected'. Otherwise will throw exception
            </summary>
            <exception cref="T:System.InvalidOperationException">Will throw if not of type 'rejected'</exception>
            <returns>Reject error information</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Responses.QueryResponse.ThrowOrGetReply">
            <summary>
            Helper method to either get the reply data or throw an exception
            that formats the 'rejected' data
            </summary>
            <returns>Query reply data</returns>
            <exception cref="T:EdjCase.ICP.Agent.QueryRejectedException">Throws if 'rejected'</exception>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.QueryResponseType">
            <summary>
            The variant options for a query response
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.QueryResponseType.Replied">
            <summary>
            When the canister replies to a query request with no errors
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.QueryResponseType.Rejected">
            <summary>
            When the cansiter request has errors to query request
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.QueryRejectInfo">
            <summary>
            Data from a query response that has been rejected
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.QueryRejectInfo.Code">
            <summary>
            The type of query reject
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.QueryRejectInfo.Message">
            <summary>
            Optional. A human readable message about the rejection
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.QueryRejectInfo.ErrorCode">
            <summary>
            Optional. A specific error id for the reject
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.ReadStateResponse">
            <summary>
            Model for a reponse to a read state request
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.ReadStateResponse.Certificate">
            <summary>
            The certificate data of the current canister state
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Responses.ReadStateResponse.#ctor(EdjCase.ICP.Agent.Models.Certificate)">
            <param name="certificate">The certificate data of the current canister state</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.RejectCode">
            <summary>
            The set of code that are possible from a 'reject' response to a request
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RejectCode.SysFatal">
            <summary>
            Fatal system error, retry unlikely to be useful
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RejectCode.SysTransient">
            <summary>
            Transient system error, retry might be possible
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RejectCode.DestinationInvalid">
            <summary>
            Invalid destination (e.g. canister/account does not exist)
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RejectCode.CanisterReject">
            <summary>
            Explicit reject by the canister
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RejectCode.CanisterError">
            <summary>
            Canister error (e.g., trap, no response)
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.RequestStatus">
            <summary>
            A variant type of the status of a request that has been sent to a canister
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.RequestStatus.StatusType">
            <summary>
            The types of statuses the request can be
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RequestStatus.StatusType.Received">
            <summary>
            The request has been received by the node, but not yet being processed
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RequestStatus.StatusType.Processing">
            <summary>
            The request is being processed and does not have a response yet
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RequestStatus.StatusType.Replied">
            <summary>
            The request has been processed and it has reply data
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RequestStatus.StatusType.Rejected">
            <summary>
            The request has been processed and has reject data
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Responses.RequestStatus.StatusType.Done">
            <summary>
            The request has been processed but the response data has been removed.
            This usually happens after a certain amount of time to save space
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.RequestStatus.Type">
            <summary>
            The type of status was returned
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Responses.RequestStatus.AsReplied">
            <summary>
            Returns the candid arg IF the status is 'replied', otherwise throws exception
            </summary>
            <returns>Candid arg of reply</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Responses.RequestStatus.AsRejected">
            <summary>
            Returns the reject data IF the status is 'rejected', otherwise throws exception
            </summary>
            <returns>Reject error information</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Responses.StatusResponse">
            <summary>
            The model for response data from a status request
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.StatusResponse.ICApiVersion">
            <summary>
            Identifies the interface version supported, i.e. the version of the present
            document that the internet computer aims to support, e.g. `0.8.1`.
            The implementation may also return unversioned to indicate that it does not
            comply to a particular version, e.g. in between releases.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.StatusResponse.ImplementationSource">
            <summary>
            Optional. Identifies the implementation of the Internet Computer Protocol,
            by convention with the canonical location of the source code 
            (e.g. https://github.com/dfinity/ic).
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.StatusResponse.ImplementationVersion">
            <summary>
             Optional. If the user is talking to a released version of an Internet Computer Protocol
             implementation, this is the version number. For non-released versions, output
             of git describe like `0.1.13-13-g2414721` would also be very suitable.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.StatusResponse.ImplementationRevision">
            <summary>
            Optional. The precise git revision of the Internet Computer Protocol implementation
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Responses.StatusResponse.DevelopmentRootKey">
            <summary>
            The public key (a DER-encoded BLS key) of the root key of this development
            instance of the Internet Computer Protocol. This must be present in short-lived
            development instances, to allow the agent to fetch the public key. For the
            Internet Computer, agents must have an independent trustworthy source for this data,
            and must not be tempted to fetch it from this insecure location.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Responses.StatusResponse.#ctor(System.String,System.String,System.String,System.String,System.Byte[])">
            <param name="icApiVersion">Identifies the interface version supported, i.e. the version of the present
            document that the internet computer aims to support, e.g. `0.8.1`.
            The implementation may also return unversioned to indicate that it does not
            comply to a particular version, e.g. in between releases.</param>
            <param name="implementationSource">Optional. Identifies the implementation of the Internet Computer Protocol,
            by convention with the canonical location of the source code 
            (e.g. https://github.com/dfinity/ic).</param>
            <param name="implementationVersion">Optional. If the user is talking to a released version of an Internet Computer Protocol
             implementation, this is the version number. For non-released versions, output
             of git describe like `0.1.13-13-g2414721` would also be very suitable.</param>
            <param name="implementationRevision">Optional. The precise git revision of the Internet Computer Protocol implementation</param>
            <param name="developmentRootKey">The public key (a DER-encoded BLS key) of the root key of this development
            instance of the Internet Computer Protocol. This must be present in short-lived
            development instances, to allow the agent to fetch the public key. For the
            Internet Computer, agents must have an independent trustworthy source for this data,
            and must not be tempted to fetch it from this insecure location</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient">
            <summary>
            Represents a client for interacting with the Asset Canister API.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.MAX_INGRESS_MESSAGE_SIZE">
            <summary>
            The maximum size of an ingress message in bytes.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.MAX_CHUNK_SIZE">
            <summary>
            The maximum size of a file chunk
            It is set to just under 2MB.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.Agent">
            <summary>
            The IC agent
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.CanisterId">
            <summary>
            The asset canister id
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.Converter">
            <summary>
            The optional custom candid converter for request and response objects
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.#ctor(EdjCase.ICP.Agent.Agents.IAgent,EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Candid.CandidConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient"/> class.
            </summary>
            <param name="agent">The agent used for communication.</param>
            <param name="canisterId">The ID of the asset canister.</param>
            <param name="converter">The Candid converter to use for encoding and decoding values (optional).</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.UploadAssetSimpleAsync(System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            A helper method to upload an asset to the asset canister.
            If the asset is larger than <see cref="F:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.MAX_CHUNK_SIZE"/>, it will be chunked.
            If the asset is smaller than <see cref="F:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.MAX_CHUNK_SIZE"/>, it will be uploaded in a single request.
            See <see cref="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.UploadAssetChunkedAsync(System.String,System.String,System.String,System.IO.Stream,System.Byte[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},System.Nullable{System.UInt64})"/> for more advanced options
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentType">The content type of the asset.</param>
            <param name="contentEncoding">The content encoding of the asset.</param>
            <param name="content">The content of the asset.</param>
            <param name="sha256">The SHA256 hash of the asset (optional).</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.UploadAssetChunkedAsync(System.String,System.String,System.String,System.IO.Stream,System.Byte[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},System.Nullable{System.UInt64})">
            <summary>
             A helper method to upload an asset to the asset canister in chunks
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentType">The content type of the asset.</param>
            <param name="contentEncoding">The content encoding of the asset.</param>
            <param name="contentStream">The stream containing the asset content.</param>
            <param name="sha256">The SHA256 hash of the asset content.</param>
            <param name="allowRawAccess">Specifies whether raw access is allowed for the asset.</param>
            <param name="enableAliasing">Specifies whether aliasing is enabled for the asset.</param>
            <param name="headers">Additional headers to be included in the request.</param>
            <param name="maxAge">The maximum age of the asset in seconds.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.DownloadAssetAsync(System.String,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            A helper method to download an asset from the asset canister in chunks.
            </summary>
            <param name="key">The key of the asset to download.</param>
            <param name="maxConcurrency">The maximum number of concurrent chunk downloads.</param>
            <param name="acceptEncodings">The encodings to accept for the asset in order. Defaults to ["identity", "gzip", "deflate", "br"]</param>
            <returns>The downloaded asset content as a byte array.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.GetApiVersionAsync">
            <summary>
            Retrieves the API version for the asset canister
            </summary>
            <returns>The API version</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.GetAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Retrieves the specified asset with the given accept encodings
            </summary>
            <param name="key">The asset key to get</param>
            <param name="acceptEncodings">A list of encodings to accept for the asset</param>
            <returns>The result of the get request</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.GetChunkAsync(System.String,System.String,EdjCase.ICP.Candid.Models.UnboundedUInt,System.Byte[])">
            <summary>
            Retrieves a chunk of data from the asset canister.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentEncoding">The content encoding of the asset.</param>
            <param name="index">The index of the chunk.</param>
            <param name="sha256">The SHA256 hash of the chunk (optional).</param>
            <returns>The result of the chunk retrieval operation.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ListAsync">
            <summary>
            Retrieves a list of assets from the asset canister
            </summary>
            <returns>List of assets</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.GetCertifiedTreeAsync">
            <summary>
            Retrieves the certified tree of the asset canister
            </summary>
            <returns>The certified tree result.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.CreateBatchAsync">
            <summary>
            Creates a new batch for asset operations.
            </summary>
            <returns>The result of the batch creation operation.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.CreateChunkAsync(EdjCase.ICP.Candid.Models.UnboundedUInt,System.Byte[])">
            <summary>
            Creates a new chunk in a batch.
            </summary>
            <param name="batchId">The ID of the batch.</param>
            <param name="content">The content of the chunk.</param>
            <returns>The result of the chunk creation operation.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.CommitBatchAsync(EdjCase.ICP.Candid.Models.UnboundedUInt,System.Collections.Generic.List{EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind})">
            <summary>
            Commits a batch of operations to the asset canister.
            </summary>
            <param name="batchId">The ID of the batch.</param>
            <param name="operations">The operations to commit.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ProposeCommitBatchAsync(EdjCase.ICP.Candid.Models.UnboundedUInt,System.Collections.Generic.List{EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind})">
            <summary>
            Proposes a batch of operations for later commitment.
            </summary>
            <param name="batchId">The ID of the batch.</param>
            <param name="operations">The operations to propose.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.CommitProposedBatchAsync(EdjCase.ICP.Candid.Models.UnboundedUInt,System.Byte[])">
            <summary>
            Commits a previously proposed batch of operations.
            </summary>
            <param name="batchId">The ID of the batch.</param>
            <param name="evidence">The evidence for the proposed batch.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ComputeEvidenceAsync(EdjCase.ICP.Candid.Models.UnboundedUInt,System.Nullable{System.UInt16})">
            <summary>
            Computes evidence for a proposed batch of operations.
            </summary>
            <param name="batchId">The ID of the batch.</param>
            <param name="maxIterations">The maximum number of iterations (optional).</param>
            <returns>The computed evidence.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.DeleteBatchAsync(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Deletes a batch of operations.
            </summary>
            <param name="batchId">The ID of the batch.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.CreateAssetAsync(System.String,System.String,System.Nullable{System.UInt64},System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates a new asset in the asset canister.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentType">The content type of the asset.</param>
            <param name="maxAge">The maximum age of the asset in seconds (optional).</param>
            <param name="headers">Additional headers for the asset (optional).</param>
            <param name="enableAliasing">Specifies whether aliasing is enabled for the asset (optional).</param>
            <param name="allowRawAccess">Specifies whether raw access is allowed for the asset (optional).</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.SetAssetContentAsync(System.String,System.String,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.UnboundedUInt},System.Byte[])">
            <summary>
            Sets the content for an asset in the asset canister.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentEncoding">The content encoding of the asset.</param>
            <param name="chunkIds">The IDs of the chunks comprising the asset content.</param>
            <param name="sha256">The SHA256 hash of the asset content (optional).</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.UnsetAssetContentAsync(System.String,System.String)">
            <summary>
            Removes a content encoding from an asset in the asset canister.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentEncoding">The content encoding to remove.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.DeleteAssetAsync(System.String)">
            <summary>
            Deletes an asset from the asset canister.
            </summary>
            <param name="key">The key of the asset to delete.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ClearAsync">
            <summary>
            Deletes all assets from the asset canister.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.StoreAsync(System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Stores an asset in the asset canister.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentType">The content type of the asset.</param>
            <param name="contextEncoding">The content encoding of the asset.</param>
            <param name="content">The content of the asset.</param>
            <param name="sha256">The SHA256 hash of the asset (optional).</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.AuthorizeAsync(EdjCase.ICP.Candid.Models.Principal)">
            <summary>
            Grants the Commit permission to an identity
            </summary>
            <param name="principal">The principal to authorize.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.DeauthorizeAsync(EdjCase.ICP.Candid.Models.Principal)">
            <summary>
            Revokes the Commit permission from a principal.
            </summary>
            <param name="principal">The principal to deauthorize.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ListAuthorizedAsync">
            <summary>
            Retrieves a list of principals with the Commit permission.
            </summary>
            <returns>List of principals.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.GrantPermissionAsync(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission)">
            <summary>
            Grants a permission to an identity
            </summary>
            <param name="principal">The principal to grant permission to.</param>
            <param name="permission">The permission to grant.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.RevokePermissionAsync(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission)">
            <summary>
            Revokes a permission from a principal.
            </summary>
            <param name="principal">The principal to revoke permission from.</param>
            <param name="permission">The permission to revoke.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ListPermittedAsync(EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission)">
            <summary>
            Retrieves a list of principals with a specified permission.
            </summary>
            <param name="withPermission">The permission to check.</param>
            <returns>List of principals.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.TakeOwnershipAsync">
            <summary>
            Takes ownership of the asset canister.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.GetAssetPropertiesAsync(System.String)">
            <summary>
            Retrieves properties of a specific asset.
            </summary>
            <param name="key">The key of the asset.</param>
            <returns>The asset properties.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.SetAssetPropertiesAsync(EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest)">
            <summary>
            Sets properties for an asset in the asset canister.
            </summary>
            <param name="request">The request containing the asset properties to set.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.GetConfigurationAsync">
            <summary>
            Retrieves the configuration of the asset canister.
            </summary>
            <returns>The configuration response.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ConfigureAsync(EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest)">
            <summary>
            Configures the asset canister.
            </summary>
            <param name="request">The request containing the configuration settings.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ValidateGrantPermissionAsync(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission)">
            <summary>
            Validates the granting of a permission to a principal.
            </summary>
            <param name="principal">The principal to grant permission to.</param>
            <param name="permission">The permission to grant.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ValidateRevokePermissionAsync(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission)">
            <summary>
            Validates the revocation of a permission from a principal.
            </summary>
            <param name="principal">The principal to revoke permission from.</param>
            <param name="permission">The permission to revoke.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ValidateTakeOwnershipAsync">
            <summary>
            Validates the taking of ownership of the asset canister.
            </summary>
            <returns>The validation result.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ValidateCommitProposedBatchAsync(EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitProposedBatchRequest)">
            <summary>
            Validates the commitment of a proposed batch of operations.
            </summary>
            <param name="request">The request containing the proposed batch details.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.AssetCanisterApiClient.ValidateConfigureAsync(EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest)">
            <summary>
            Validates the configuration settings for the asset canister.
            </summary>
            <param name="request">The request containing the configuration settings.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Asset">
            <summary>
            Represents an asset in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Asset.Key">
            <summary>
            The key of the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Asset.ContentType">
            <summary>
            The content type of the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Asset.Encodings">
            <summary>
            A list of encodings for the asset.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Asset.#ctor(System.String,System.String,System.Collections.Generic.List{EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding})">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Asset"/> class.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentType">The content type of the asset.</param>
            <param name="encodings">A list of encodings for the asset.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Asset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Asset"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding">
            <summary>
            Represents an encoding of an asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding.ContentEncoding">
            <summary>
            The content encoding of the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding.Sha256">
            <summary>
            The SHA256 hash of the asset content.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding.Length">
            <summary>
            The length of the asset content.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding.Modified">
            <summary>
            The last modified timestamp of the asset content.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding.#ctor(System.String,EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]},EdjCase.ICP.Candid.Models.UnboundedUInt,EdjCase.ICP.Candid.Models.UnboundedInt)">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding"/> class.
            </summary>
            <param name="contentEncoding">The content encoding of the asset.</param>
            <param name="sha256">The SHA256 hash of the asset content.</param>
            <param name="length">The length of the asset content.</param>
            <param name="modified">The last modified timestamp of the asset content.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Encoding"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs">
            <summary>
            Represents arguments for asset canister operations, supporting different variants.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs.Tag">
            <summary>
            The tag indicating the type of the asset canister argument.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs.Value">
            <summary>
            The value of the asset canister argument.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs.#ctor(EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgsTag,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs"/> class.
            </summary>
            <param name="tag">The tag indicating the type of the argument.</param>
            <param name="value">The value of the argument.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs.#ctor">
            <summary>
            Protected constructor for <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs"/>.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs.Init">
            <summary>
            Creates an instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs"/> for the 'Init' operation.
            </summary>
            <returns>A new instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs"/>.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs.Upgrade(EdjCase.ICP.Agent.Standards.AssetCanister.Models.UpgradeArgs)">
            <summary>
            Creates an instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs"/> for the 'Upgrade' operation.
            </summary>
            <param name="info">The upgrade arguments.</param>
            <returns>A new instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs"/>.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs.AsUpgrade">
            <summary>
            Retrieves the 'Upgrade' arguments from the instance.
            </summary>
            <returns>The 'Upgrade' arguments.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgs.ValidateTag(EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgsTag)">
            <summary>
            Validates that the current tag matches the expected tag.
            </summary>
            <param name="tag">The expected tag.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the current tag does not match the expected tag.</exception>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgsTag">
            <summary>
            Enumerates the tags for different types of asset canister arguments.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgsTag.Init">
            <summary>
            Tag for initialization arguments.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.AssetCanisterArgsTag.Upgrade">
            <summary>
            Tag for upgrade arguments.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind">
            <summary>
            Represents a batch operation kind for asset canister operations, supporting different variants.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.Tag">
            <summary>
            The tag indicating the type of the batch operation.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.Value">
            <summary>
            The value of the batch operation.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.#ctor(EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/> class.
            </summary>
            <param name="tag">The tag indicating the type of the operation.</param>
            <param name="value">The value of the operation.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.#ctor">
            <summary>
            Protected constructor for <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/>.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.CreateAsset(EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments)">
            <summary>
            Creates an instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/> for the 'CreateAsset' operation.
            </summary>
            <param name="info">The arguments for the 'CreateAsset' operation.</param>
            <returns>A new instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/>.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.SetAssetContent(EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetContentArguments)">
            <summary>
            Creates an instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/> for the 'SetAssetContent' operation.
            </summary>
            <param name="info">The arguments for the 'SetAssetContent' operation.</param>
            <returns>A new instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/>.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.SetAssetProperties(EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest)">
            <summary>
            Creates an instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/> for the 'SetAssetProperties' operation.
            </summary>
            <param name="info">The arguments for the 'SetAssetProperties' operation.</param>
            <returns>A new instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/>.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.UnsetAssetContent(EdjCase.ICP.Agent.Standards.AssetCanister.Models.UnsetAssetContentArguments)">
            <summary>
            Creates an instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/> for the 'UnsetAssetContent' operation.
            </summary>
            <param name="info">The arguments for the 'UnsetAssetContent' operation.</param>
            <returns>A new instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/>.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.DeleteAsset(EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteAssetArguments)">
            <summary>
            Creates an instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/> for the 'DeleteAsset' operation.
            </summary>
            <param name="info">The arguments for the 'DeleteAsset' operation.</param>
            <returns>A new instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/>.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.Clear">
            <summary>
            Creates an instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/> for the 'Clear' operation.
            </summary>
            <returns>A new instance of <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind"/>.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.AsCreateAsset">
            <summary>
            Retrieves the 'CreateAsset' arguments from the instance.
            </summary>
            <returns>The 'CreateAsset' arguments.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.AsSetAssetContent">
            <summary>
            Retrieves the 'SetAssetContent' arguments from the instance.
            </summary>
            <returns>The 'SetAssetContent' arguments.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.AsSetAssetProperties">
            <summary>
            Retrieves the 'SetAssetProperties' arguments from the instance.
            </summary>
            <returns>The 'SetAssetProperties' arguments.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.AsUnsetAssetContent">
            <summary>
            Retrieves the 'UnsetAssetContent' arguments from the instance.
            </summary>
            <returns>The 'UnsetAssetContent' arguments.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.AsDeleteAsset">
            <summary>
            Retrieves the 'DeleteAsset' arguments from the instance.
            </summary>
            <returns>The 'DeleteAsset' arguments.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind.ValidateTag(EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag)">
            <summary>
            Validates that the current tag matches the expected tag.
            </summary>
            <param name="tag">The expected tag.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the current tag does not match the expected tag.</exception>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag">
            <summary>
            Enumerates the tags for different types of batch operations.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag.CreateAsset">
            <summary>
            Tag for the 'CreateAsset' operation.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag.SetAssetContent">
            <summary>
            Tag for the 'SetAssetContent' operation.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag.SetAssetProperties">
            <summary>
            Tag for the 'SetAssetProperties' operation.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag.UnsetAssetContent">
            <summary>
            Tag for the 'UnsetAssetContent' operation.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag.DeleteAsset">
            <summary>
            Tag for the 'DeleteAsset' operation.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKindTag.Clear">
            <summary>
            Tag for the 'Clear' operation.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CertifiedTreeResult">
            <summary>
            Represents the result of a certified tree query to the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CertifiedTreeResult.Certificate">
            <summary>
            The certificate associated with the certified tree.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CertifiedTreeResult.Tree">
            <summary>
            The binary representation of the certified tree.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CertifiedTreeResult.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CertifiedTreeResult"/> class with specified certificate and tree.
            </summary>
            <param name="certificate">The certificate associated with the certified tree.</param>
            <param name="tree">The binary representation of the certified tree.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CertifiedTreeResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CertifiedTreeResult"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitBatchArguments">
            <summary>
            Represents the arguments for committing a batch of operations in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitBatchArguments.BatchId">
            <summary>
            The unique identifier of the batch.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitBatchArguments.Operations">
            <summary>
            A list of operations to be committed in the batch.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitBatchArguments.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt,System.Collections.Generic.List{EdjCase.ICP.Agent.Standards.AssetCanister.Models.BatchOperationKind})">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitBatchArguments"/> class with specified batch ID and operations.
            </summary>
            <param name="batchId">The unique identifier of the batch.</param>
            <param name="operations">A list of operations to be committed in the batch.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitBatchArguments.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitBatchArguments"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitProposedBatchRequest">
            <summary>
            Represents a request to commit a proposed batch of operations in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitProposedBatchRequest.BatchId">
            <summary>
            The unique identifier of the proposed batch.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitProposedBatchRequest.Evidence">
            <summary>
            The evidence required to commit the proposed batch.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitProposedBatchRequest.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitProposedBatchRequest"/> class with specified batch ID and evidence.
            </summary>
            <param name="batchId">The unique identifier of the proposed batch.</param>
            <param name="evidence">The evidence required to commit the proposed batch.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitProposedBatchRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CommitProposedBatchRequest"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ComputeEvidenceArguments">
            <summary>
            Represents the arguments for computing evidence for a proposed batch in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ComputeEvidenceArguments.BatchId">
            <summary>
            The unique identifier of the batch for which evidence is being computed.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ComputeEvidenceArguments.MaxIterations">
            <summary>
            The maximum number of iterations to use in the computation of evidence.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ComputeEvidenceArguments.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt,EdjCase.ICP.Candid.Models.OptionalValue{System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ComputeEvidenceArguments"/> class with specified batch ID and maximum iterations.
            </summary>
            <param name="batchId">The unique identifier of the batch.</param>
            <param name="maxIterations">The maximum number of iterations for the evidence computation.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ComputeEvidenceArguments.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ComputeEvidenceArguments"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigurationResponse">
            <summary>
            Represents the response for the configuration of an asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigurationResponse.MaxBatches">
            <summary>
            Maximum number of batches allowed for upload at one time.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigurationResponse.MaxChunks">
            <summary>
            Maximum number of chunks across all batches being uploaded.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigurationResponse.MaxBytes">
            <summary>
            Maximum total size of content bytes across all chunks being uploaded.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigurationResponse.#ctor(EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64},EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64},EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64})">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigurationResponse"/> class with specified configuration values.
            </summary>
            <param name="maxBatches">Maximum number of batches allowed for upload at one time.</param>
            <param name="maxChunks">Maximum number of chunks across all batches being uploaded.</param>
            <param name="maxBytes">Maximum total size of content bytes across all chunks being uploaded.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigurationResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigurationResponse"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest">
            <summary>
            Represents a request to configure the asset canister with limits on batches, chunks, and bytes.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest.MaxBatches">
            <summary>
            Optional maximum number of batches being uploaded at one time.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest.MaxChunks">
            <summary>
            Optional maximum number of chunks across all batches being uploaded.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest.MaxBytes">
            <summary>
            Optional maximum total size of content bytes across all chunks being uploaded.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest.#ctor(EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64}},EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64}},EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64}})">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest"/> class with specified limits.
            </summary>
            <param name="maxBatches">Optional maximum number of batches.</param>
            <param name="maxChunks">Optional maximum number of chunks.</param>
            <param name="maxBytes">Optional maximum size of bytes.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ConfigureRequest"/> class without specified limits.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments">
            <summary>
            Represents the arguments for creating a new asset in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments.Key">
            <summary>
            Unique key identifier for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments.ContentType">
            <summary>
            Content type of the asset (e.g., 'text/plain', 'image/jpeg').
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments.MaxAge">
            <summary>
            Optional maximum age for caching the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments.Headers">
            <summary>
            Optional list of additional HTTP headers for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments.EnableAliasing">
            <summary>
            Optional flag to enable aliasing for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments.AllowRawAccess">
            <summary>
            Optional flag to allow raw access to the asset.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateAssetArguments.#ctor(System.String,System.String,EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64},EdjCase.ICP.Candid.Models.OptionalValue{System.Collections.Generic.List{System.ValueTuple{System.String,System.String}}},EdjCase.ICP.Candid.Models.OptionalValue{System.Boolean},EdjCase.ICP.Candid.Models.OptionalValue{System.Boolean})">
            <summary>
            Constructor for creating asset arguments with specified properties.
            </summary>
            <param name="key">Asset key.</param>
            <param name="contentType">Content type of the asset.</param>
            <param name="maxAge">Maximum age for caching.</param>
            <param name="headers">Additional HTTP headers.</param>
            <param name="enableAliasing">Flag for enabling aliasing.</param>
            <param name="allowRawAccess">Flag for allowing raw access.</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateBatchResult">
            <summary>
            Represents the result of creating a new batch in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateBatchResult.BatchId">
            <summary>
            Unique identifier for the created batch.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateBatchResult.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateBatchResult"/> class with a specified batch ID.
            </summary>
            <param name="batchId">Unique identifier for the batch.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateBatchResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateBatchResult"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkRequest">
            <summary>
            Represents a request to create a chunk in an asset canister batch.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkRequest.BatchId">
            <summary>
            Unique identifier for the batch to which the chunk belongs.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkRequest.Content">
            <summary>
            Content of the chunk as a byte array.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkRequest.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt,System.Byte[])">
            <summary>
            Initializes a new instance of the CreateChunkRequest class with specified batch ID and content.
            </summary>
            <param name="batchId">Unique identifier for the batch.</param>
            <param name="content">Content of the chunk as a byte array.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkRequest.#ctor">
            <summary>
            Initializes a new instance of the CreateChunkRequest class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkResult">
            <summary>
            Represents the result of a 'create_chunk' operation on an asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkResult.ChunkId">
            <summary>
            Unique identifier for the created chunk.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkResult.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Initializes a new instance of the CreateChunkResult class with a specified chunk ID.
            </summary>
            <param name="chunkId">Unique identifier for the chunk.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.CreateChunkResult.#ctor">
            <summary>
            Initializes a new instance of the CreateChunkResult class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteAssetArguments">
            <summary>
            Represents the arguments for deleting an asset in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteAssetArguments.Key">
            <summary>
            The key of the asset to delete.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteAssetArguments.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DeleteAssetArguments class with a specified asset key.
            </summary>
            <param name="key">The key of the asset to delete.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteAssetArguments.#ctor">
            <summary>
            Initializes a new instance of the DeleteAssetArguments class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteBatchArguments">
            <summary>
            Represents the arguments for deleting a batch in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteBatchArguments.BatchId">
            <summary>
            Unique identifier for the batch to be deleted.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteBatchArguments.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Initializes a new instance of DeleteBatchArguments with a specified batch ID.
            </summary>
            <param name="batchId">Unique identifier for the batch.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.DeleteBatchArguments.#ctor">
            <summary>
            Initializes a new instance of DeleteBatchArguments.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetAssetPropertiesResult">
            <summary>
            Represents the result of a request to get asset properties from an asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetAssetPropertiesResult.MaxAge">
            <summary>
            Maximum age of the asset for caching purposes.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetAssetPropertiesResult.Headers">
            <summary>
            List of additional HTTP headers to be set when serving the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetAssetPropertiesResult.AllowRawAccess">
            <summary>
            Indicates whether the asset can be retrieved from raw.ic0.app or raw.icp0.io.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetAssetPropertiesResult.IsAliased">
            <summary>
            Indicates if the asset's key might be an alias for another asset.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetAssetPropertiesResult.#ctor(EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64},EdjCase.ICP.Candid.Models.OptionalValue{System.Collections.Generic.List{System.ValueTuple{System.String,System.String}}},EdjCase.ICP.Candid.Models.OptionalValue{System.Boolean},EdjCase.ICP.Candid.Models.OptionalValue{System.Boolean})">
            <summary>
            Constructor for initializing GetAssetPropertiesResult with specific values.
            </summary>
            <param name="maxAge">Maximum age of the asset for caching.</param>
            <param name="headers">List of additional HTTP headers for the asset.</param>
            <param name="allowRawAccess">Flag for raw access availability of the asset.</param>
            <param name="isAliased">Flag indicating if the asset key is an alias.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetAssetPropertiesResult.#ctor">
            <summary>
            Default constructor for GetAssetPropertiesResult.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkRequest">
            <summary>
            Represents a request to retrieve a specific chunk of an asset's content encoding from an asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkRequest.Key">
            <summary>
            Unique identifier for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkRequest.ContentEncoding">
            <summary>
            Content encoding type of the asset (e.g., 'gzip', 'identity').
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkRequest.Index">
            <summary>
            Index of the chunk within the asset's content encoding.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkRequest.Sha256">
            <summary>
            Optional SHA-256 hash of the entire asset encoding for validation.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkRequest.#ctor(System.String,System.String,EdjCase.ICP.Candid.Models.UnboundedUInt,EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]})">
            <summary>
            Initializes a new instance of the GetChunkRequest class with specified parameters.
            </summary>
            <param name="key">Asset key.</param>
            <param name="contentEncoding">Content encoding type.</param>
            <param name="index">Chunk index.</param>
            <param name="sha256">Optional SHA-256 hash for validation.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkRequest.#ctor">
            <summary>
            Initializes a new instance of the GetChunkRequest class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkResult">
            <summary>
            Represents the result of a 'get_chunk' method call to an asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkResult.Content">
            <summary>
            Content of the asset chunk.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkResult.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the GetChunkResult class with specified content.
            </summary>
            <param name="content">Byte array representing the content of the chunk.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetChunkResult.#ctor">
            <summary>
            Initializes a new instance of the GetChunkResult class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetRequest">
            <summary>
            Represents a request for retrieving an asset from the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetRequest.Key">
            <summary>
            The key identifying the asset to retrieve.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetRequest.AcceptEncodings">
            <summary>
            List of acceptable content encodings for the asset.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetRequest.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the GetRequest class with specified key and acceptable encodings.
            </summary>
            <param name="key">The asset key.</param>
            <param name="acceptEncodings">List of acceptable content encodings.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetRequest.#ctor">
            <summary>
            Initializes a new instance of the GetRequest class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetResult">
            <summary>
            Represents the result of a 'get' operation from the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetResult.Content">
            <summary>
            The content of the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetResult.ContentType">
            <summary>
            The MIME type of the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetResult.ContentEncoding">
            <summary>
            The encoding of the asset content.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetResult.Sha256">
            <summary>
            The SHA-256 hash of the asset, if available.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetResult.TotalLength">
            <summary>
            The total length of the asset in chunks.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetResult.#ctor(System.Byte[],System.String,System.String,EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]},EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Initializes a new instance of the GetResult class with specified details.
            </summary>
            <param name="content">The content of the asset.</param>
            <param name="contentType">The MIME type of the asset.</param>
            <param name="contentEncoding">The encoding of the asset content.</param>
            <param name="sha256">The SHA-256 hash of the asset, if available.</param>
            <param name="totalLength">The total length of the asset in chunks.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GetResult.#ctor">
            <summary>
            Initializes a new instance of the GetResult class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GrantPermission">
            <summary>
            Represents a request to grant a permission to a principal in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GrantPermission.ToPrincipal">
            <summary>
            The principal to which the permission will be granted.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GrantPermission.Permission">
            <summary>
            The permission to be granted.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GrantPermission.#ctor(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission)">
            <summary>
            Initializes a new instance of the GrantPermission class with specified principal and permission.
            </summary>
            <param name="toPrincipal">The principal to grant permission to.</param>
            <param name="permission">The permission to be granted.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.GrantPermission.#ctor">
            <summary>
            Initializes a new instance of the GrantPermission class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpRequest">
            <summary>
            Represents an HTTP request for the Asset Canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpRequest.Method">
            <summary>
            HTTP method (e.g., GET, POST).
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpRequest.Url">
            <summary>
            URL of the request.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpRequest.Headers">
            <summary>
            List of HTTP headers.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpRequest.Body">
            <summary>
            Body of the request as a list of bytes.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpRequest.CertificateVersion">
            <summary>
            Optional certificate version.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpRequest.#ctor(System.String,System.String,System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},System.Collections.Generic.List{System.Byte},EdjCase.ICP.Candid.Models.OptionalValue{System.UInt16})">
            <summary>
            Constructs an HttpRequest with specified parameters.
            </summary>
            <param name="method">HTTP method.</param>
            <param name="url">URL of the request.</param>
            <param name="headers">List of HTTP headers.</param>
            <param name="body">Body of the request as a list of bytes.</param>
            <param name="certificateVersion">Optional certificate version.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpRequest.#ctor">
            <summary>
            Default constructor for HttpRequest.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpResponse">
            <summary>
            Represents an HTTP response from the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpResponse.StatusCode">
            <summary>
            HTTP status code of the response.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpResponse.Headers">
            <summary>
            List of headers included in the response.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpResponse.Body">
            <summary>
            Body of the response as a list of bytes.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpResponse.StreamingStrategy">
            <summary>
            Optional streaming strategy for the response.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpResponse.#ctor(System.UInt16,System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},System.Collections.Generic.List{System.Byte},EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy})">
            <summary>
            Initializes a new instance of the HttpResponse class with specified parameters.
            </summary>
            <param name="statusCode">HTTP status code of the response.</param>
            <param name="headers">List of headers included in the response.</param>
            <param name="body">Body of the response as a list of bytes.</param>
            <param name="streamingStrategy">Optional streaming strategy for the response.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.HttpResponse.#ctor">
            <summary>
            Initializes a new instance of the HttpResponse class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ListPermitted">
            <summary>
            Represents a request to list principals with a specified permission in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ListPermitted.Permission">
            <summary>
            The specific permission to query for.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ListPermitted.#ctor(EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission)">
            <summary>
            Initializes a new instance of the ListPermitted class with a specified permission.
            </summary>
            <param name="permission">The permission to query for.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ListPermitted.#ctor">
            <summary>
            Initializes a new instance of the ListPermitted class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission">
            <summary>
            Enum representing the different types of permissions for interacting with an asset canister.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission.Commit">
            <summary>
            Permission allowing changes to the assets served by the asset canister.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission.ManagePermissions">
            <summary>
            Permission allowing a principal to grant and revoke permissions to other principals.
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission.Prepare">
            <summary>
            Permission allowing the upload of data to the canister to be committed later by a principal with the Commit permission.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.RevokePermission">
            <summary>
            Represents a request to revoke a permission from a principal in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.RevokePermission.OfPrincipal">
            <summary>
            The principal from whom the permission will be revoked.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.RevokePermission.Permission">
            <summary>
            The permission to be revoked.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.RevokePermission.#ctor(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Agent.Standards.AssetCanister.Models.Permission)">
            <summary>
            Initializes a new instance of the RevokePermission class with specified principal and permission.
            </summary>
            <param name="ofPrincipal">The principal from whom the permission will be revoked.</param>
            <param name="permission">The permission to be revoked.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.RevokePermission.#ctor">
            <summary>
            Initializes a new instance of the RevokePermission class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetContentArguments">
            <summary>
            Represents a request to set asset content with chunks in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetContentArguments.Key">
            <summary>
            Unique identifier for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetContentArguments.ContentEncoding">
            <summary>
            The content encoding of the asset (e.g UTF-8)
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetContentArguments.ChunkIds">
            <summary>
            A list of chunk ids that have been uploaded, to use as the content bytes
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetContentArguments.Sha256">
            <summary>
            Optional. The SHA256 hash of the entire content bytes, for validation of the chunk bytes
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetContentArguments.#ctor(System.String,System.String,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.UnboundedUInt},EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]})">
            <param name="key">Unique identifier for the asset.</param>
            <param name="contentEncoding">The content encoding of the asset (e.g UTF-8)</param>
            <param name="chunkIds">A list of chunk ids that have been uploaded, to use as the content bytes</param>
            <param name="sha256">Optional. The SHA256 hash of the entire content bytes, for validation of the chunk bytes</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest">
            <summary>
            Represents a request to set properties of an asset in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest.Key">
            <summary>
            Unique identifier for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest.MaxAge">
            <summary>
            Optional. The max age (in nanoseconds) for the asset
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest.Headers">
            <summary>
            Optional. The headers for the asset
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest.AllowRawAccess">
            <summary>
            Optional. Whether to allow raw access to the asset
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest.IsAliased">
            <summary>
            Optional. Whether the asset is aliased
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest.#ctor(System.String,EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64}},EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Candid.Models.OptionalValue{System.Collections.Generic.List{System.ValueTuple{System.String,System.String}}}},EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Candid.Models.OptionalValue{System.Boolean}},EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Candid.Models.OptionalValue{System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetAssetPropertiesRequest"/> class.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="maxAge">The maximum age of the asset.</param>
            <param name="headers">The headers of the asset.</param>
            <param name="allowRawAccess">Indicates whether raw access is allowed for the asset.</param>
            <param name="isAliased">Indicates whether the asset is aliased.</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetPermissions">
            <summary>
            Represents a request to set permessions for identities in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetPermissions.Prepare">
            <summary>
            A list of identities that can prepare an asset
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetPermissions.Commit">
            <summary>
            A list of identities that can commit an asset
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetPermissions.ManagePermissions">
            <summary>
            A list of identities that can manage permissions
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetPermissions.#ctor(System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal},System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal},System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Principal})">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetPermissions"/> class.
            </summary>
            <param name="prepare">The list of principals with prepare permissions.</param>
            <param name="commit">The list of principals with commit permissions.</param>
            <param name="managePermissions">The list of principals with manage permissions.</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StoreRequest">
            <summary>
            Represents a request to store a small asset in the asset canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StoreRequest.Key">
            <summary>
            Unique identifier for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StoreRequest.ContentType">
            <summary>
            The content type of the asset (e.g text/plain)
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StoreRequest.ContentEncoding">
            <summary>
            The content encoding of the asset (e.g UTF-8)
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StoreRequest.Content">
            <summary>
            The content bytes of the asset
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StoreRequest.Sha256">
            <summary>
            Optional. The SHA256 hash of the entire content bytes, for validation of the bytes
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StoreRequest.#ctor(System.String,System.String,System.String,System.Byte[],EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]})">
            <summary>
            Represents a request to store an asset in the canister.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentType">The content type of the asset.</param>
            <param name="contentEncoding">The content encoding of the asset.</param>
            <param name="content">The content of the asset.</param>
            <param name="sha256">The SHA256 hash of the asset content.</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackHttpResponse">
            <summary>
            Represents a response from the streaming callback method
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackHttpResponse.Body">
            <summary>
            The returned bytes for the streaming callback
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackHttpResponse.Token">
            <summary>
            Optional. The token to use for the next streaming callback
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackHttpResponse.#ctor(System.Byte[],EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken})">
            <summary>
            Represents an HTTP response for a streaming callback.
            </summary>
            <param name="body">The body of the response.</param>
            <param name="token">The optional token associated with the response.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackHttpResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackHttpResponse"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken">
            <summary>
            Represents a single result of streaming an asset from the asset canister
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken.Key">
            <summary>
            Unique identifier for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken.ContentEncoding">
            <summary>
            The content encoding of the asset (e.g UTF-8)
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken.Index">
            <summary>
            The index of the chunk to stream
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken.Sha256">
            <summary>
            Optional. The SHA256 hash of the entire content bytes, for validation of the bytes
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken.#ctor(System.String,System.String,EdjCase.ICP.Candid.Models.UnboundedUInt,EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]})">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken"/> class.
            </summary>
            <param name="key">The key associated with the token.</param>
            <param name="contentEncoding">The content encoding of the token.</param>
            <param name="index">The index of the token.</param>
            <param name="sha256">The SHA256 value of the token.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy">
            <summary>
            Represents a strategy for streaming from an asset canister
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.Tag">
            <summary>
            The tag for the streaming strategy variant
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.Value">
            <summary>
            The value for the streaming strategy variant
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.#ctor(EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategyTag,System.Object)">
            <summary>
            Represents a strategy for streaming from an asset canister
            </summary>
            <param name="tag">The tag for the streaming strategy variant</param>
            <param name="value">The value for the streaming strategy variant</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.Callback(EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.CallbackInfo)">
            <summary>
            Creates a new streaming strategy with a callback
            </summary>
            <param name="info">The callback info</param>
            <returns>The streaming strategy variant</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.AsCallback">
            <summary>
            Casts the streaming strategy to a callback
            </summary>
            <returns>The Callback info</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.CallbackInfo">
            <summary>
            Represents information about a callback function and its associated token.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.CallbackInfo.Callback">
            <summary>
            The callback function
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.CallbackInfo.Token">
            <summary>
            The streaming callback token
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.CallbackInfo.#ctor(EdjCase.ICP.Candid.Models.Values.CandidFunc,EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingCallbackToken)">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.CallbackInfo"/> class.
            </summary>
            <param name="callback">The callback function.</param>
            <param name="token">The streaming callback token.</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.CallbackInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategy.CallbackInfo"/> class.
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategyTag">
            <summary>
            Represents all the options for the streaming strategy variant
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.StreamingStrategyTag.Callback">
            <summary>
            For callback streaming
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UnsetAssetContentArguments">
            <summary>
            Represents a request to remove the content encoding for an asset
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UnsetAssetContentArguments.Key">
            <summary>
            Unique identifier for the asset.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UnsetAssetContentArguments.ContentEncoding">
            <summary>
            The content encoding of the asset (e.g UTF-8)
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UnsetAssetContentArguments.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UnsetAssetContentArguments"/> class.
            </summary>
            <param name="key">The key of the asset.</param>
            <param name="contentEncoding">The encoding of the asset content.</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UpgradeArgs">
            <summary>
            Represents a request for upgrading the asset canister with options
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UpgradeArgs.SetPermissions">
            <summary>
            Optional. The permissions to set for the asset canister
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UpgradeArgs.#ctor(EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Agent.Standards.AssetCanister.Models.SetPermissions})">
            <summary>
            Creates a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.UpgradeArgs"/> class.
            </summary>
            <param name="setPermissions">Optional value for setting permissions.</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult">
            <summary>
            Represents a result from calling a validation method
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult.Tag">
            <summary>
            The tag for the validation result variant
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult.Value">
            <summary>
            The value for the validation result variant
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult.#ctor(EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResultTag,System.Object)">
            <summary>
            Represents a result from calling a validation method
            </summary>
            <param name="tag">The tag for the validation result variant</param>
            <param name="value">The value for the validation result variant</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult"/> class.
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult.Ok(System.String)">
            <summary>
            Creates a new validation result with an ok value
            </summary>
            <param name="message">The validation message</param>
            <returns>The OK validation result variant</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult.Err(System.String)">
            <summary>
            Creates a new validation result with an error value
            </summary>
            <param name="message">The error message</param>
            <returns>The error validation result variant</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult.AsOk">
            <summary>
            Casts the validation result to an ok message
            </summary>
            <returns>The ok message</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResult.AsErr">
            <summary>
            Casts the validation result to an error message
            </summary>
            <returns>The error message</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResultTag">
            <summary>
            The tag for the validation result variant
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResultTag.Ok">
            <summary>
            The ok variant
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.AssetCanister.Models.ValidationResultTag.Err">
            <summary>
            The error variant
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client">
            <summary>
            A pre-generated client for the ICRC1 standard
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.Agent">
            <summary>
            Agent to use to make requests to the IC
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.CanisterId">
            <summary>
            The id of the canister to make requests to
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.#ctor(EdjCase.ICP.Agent.Agents.IAgent,EdjCase.ICP.Candid.Models.Principal)">
            <summary>
            Primary constructor
            </summary>
            <param name="agent">Agent to use to make requests to the IC</param>
            <param name="canisterId">The id of the canister to make requests to</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.MetaData">
            <summary>
            Returns the list of metadata entries for this ledger. See the "Metadata" section below.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.Name">
            <summary>
            Returns the name of the token (e.g., MyToken).
            </summary>
            <returns>The name of the token (e.g., MyToken).</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.Symbol">
            <summary>
            Returns the symbol of the token (e.g., ICP).
            </summary>
            <returns>The symbol of the token (e.g., ICP).</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.Decimals">
            <summary>
            Returns the number of decimals the token uses (e.g., 8 means to divide the token amount by 100000000 to get its user representation).
            </summary>
            <returns>The number of decimals the token uses (e.g., 8 means to divide the token amount by 100000000 to get its user representation).</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.Fee">
            <summary>
            Returns the default transfer fee.
            </summary>
            <returns>The default transfer fee.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.TotalSupply">
            <summary>
            Returns the total number of tokens on all accounts except for the minting account.
            </summary>
            <returns>The total number of tokens on all accounts except for the minting account.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.MintingAccount">
            <summary>
            Returns the minting account if this ledger supports minting and burning tokens.
            </summary>
            <returns>The minting account if this ledger supports minting and burning tokens.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.BalanceOf(EdjCase.ICP.Agent.Standards.ICRC1.Models.Account)">
            <summary>
            Returns the balance of the account given as an argument.
            </summary>
            <param name="account">Account to check balance for</param>
            <returns>The balance of the account given as an argument.</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.Transfer(EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs)">
            <summary>
            Transfers amount of tokens from account record { of = caller; subaccount = from_subaccount } to the to account. The caller pays fee tokens for the transfer.
            </summary>
            <param name="args">Arguments for the transfer</param>
            <returns>The result information from the transfer</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.ICRC1Client.SupportedStandards">
            <summary>
            Returns the list of standards this ledger implements
            </summary>
            <returns>The list of standards this ledger implements</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.Account">
            <summary>
            This class represents an ICRC1 account
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.Account.Owner">
            <summary>
            The owner of the account, represented as a Principal object
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.Account.Subaccount">
            <summary>
            The subaccount of the account, represented as an OptionalValue object
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.Account.#ctor(EdjCase.ICP.Candid.Models.Principal,EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]})">
            <summary>
            Primary constructor for the Account class
            </summary>
            <param name="owner">The owner of the account, represented as a Principal object</param>
            <param name="subaccount">The subaccount of the account, represented as an OptionalValue object</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaData">
            <summary>
            A model representing metadata from an icrc1 token
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaData.Key">
            <summary>
            The key or name of the metadata value
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaData.Value">
            <summary>
            The associated value for the metadata key
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaData.#ctor(System.String,EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue)">
            <summary>
            Primary constructor
            </summary>
            <param name="key">The key or name of the metadata value</param>
            <param name="value">The associated value for the metadata key</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue">
            <summary>
            A model representing the metadata value from an icrc1 token
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.Tag">
            <summary>
            The metadata variant option tag/type
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.Value">
            <summary>
            The metadata variant option raw value
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.#ctor">
            <summary>
            Constructor for reflection
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.Nat(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Constructs a metadata value with a Nat
            </summary>
            <param name="value">The Nat value to use</param>
            <returns>A metadata value with a Nat</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.AsNat">
            <summary>
            Gets the Nat value from the metadata. If the variant is not a Nat, will throw an error
            </summary>
            <returns>The Nat value of the metadata</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.Int(EdjCase.ICP.Candid.Models.UnboundedInt)">
            <summary>
            Constructs a metadata value with a Int
            </summary>
            <param name="value">The Int value to use</param>
            <returns>A metadata value with a Int</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.AsInt">
            <summary>
            Gets the Int value from the metadata. If the variant is not a Int, will throw an error
            </summary>
            <returns>The Int value of the metadata</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.Text(System.String)">
            <summary>
            Constructs a metadata value with a Text
            </summary>
            <param name="value">The Text value to use</param>
            <returns>A metadata value with a Text</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.AsText">
            <summary>
            Gets the Text value from the metadata. If the variant is not a Text, will throw an error
            </summary>
            <returns>The Text value of the metadata</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.Blob(System.Byte[])">
            <summary>
            Constructs a metadata value with a Blob
            </summary>
            <param name="value">The Blob value to use</param>
            <returns>A metadata value with a Blob</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValue.AsBlob">
            <summary>
            Gets the Blob value from the metadata. If the variant is not a Blob, will throw an error
            </summary>
            <returns>The Blob value of the metadata</returns>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValueTag">
            <summary>
            An enum representing the meta data value types
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValueTag.Nat">
            <summary>
            Nat value
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValueTag.Int">
            <summary>
            Int value
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValueTag.Text">
            <summary>
            Text value
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.MetaDataValueTag.Blob">
            <summary>
            Blob value
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.SupportedStandard">
            <summary>
            This class represents a supported standard with a name and URL
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.SupportedStandard.Name">
            <summary>
            The name of the supported standard
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.SupportedStandard.Url">
            <summary>
            The Url of the supported standard
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.SupportedStandard.#ctor(System.String,System.String)">
            <summary>
            Primary constructor
            </summary>
            <param name="name">The name of the supported standard</param>
            <param name="url">The URL of the supported standard</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs">
            <summary>
            This class represents the arguments for transferring an ICRC1 token
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs.FromSubaccount">
            <summary>
            The subaccount from which the transfer is made, represented as an OptionalValue object
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs.To">
            <summary>
            The account to which the transfer is made, represented as an Account object
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs.Amount">
            <summary>
            The amount of the token being transferred, represented as an UnboundedUInt object
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs.Fee">
            <summary>
            The fee for the transfer, represented as an OptionalValue object
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs.Memo">
            <summary>
            The memo for the transfer, represented as an OptionalValue object
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs.CreatedAtTime">
            <summary>
            The time at which the transfer is created, represented as an OptionalValue object
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferArgs.#ctor(EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]},EdjCase.ICP.Agent.Standards.ICRC1.Models.Account,EdjCase.ICP.Candid.Models.UnboundedUInt,EdjCase.ICP.Candid.Models.OptionalValue{EdjCase.ICP.Candid.Models.UnboundedUInt},EdjCase.ICP.Candid.Models.OptionalValue{System.Byte[]},EdjCase.ICP.Candid.Models.OptionalValue{System.UInt64})">
            <summary>
            Primary constructor for the TransferArgs class
            </summary>
            <param name="fromSubaccount">The subaccount from which the transfer is made, represented as an OptionalValue object</param>
            <param name="to">The account to which the transfer is made, represented as an Account object</param>
            <param name="amount">The amount of the token being transferred, represented as an UnboundedUInt object</param>
            <param name="fee">The fee for the transfer, represented as an OptionalValue object</param>
            <param name="memo">The memo for the transfer, represented as an OptionalValue object</param>
            <param name="createdAtTime">The time at which the transfer is created, represented as an OptionalValue object</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError">
            <summary>
            This class represents an error that can occur during a transfer
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.Tag">
            <summary>
            The tag that indicates the type of transfer error
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.Value">
            <summary>
            The value that contains the error information, represented as an object
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.#ctor">
            <summary>
            Constructor for reflection
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.BadFee(EdjCase.ICP.Agent.Standards.ICRC1.Models.BadFeeError)">
            <summary>
            Creates a new instance of TransferError with a BadFeeError object as the value
            </summary>
            <param name="info">The BadFeeError object containing the error information</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.BadBurn(EdjCase.ICP.Agent.Standards.ICRC1.Models.BadBurnError)">
            <summary>
            Creates a new instance of TransferError with a BadBurnError object as the value
            </summary>
            <param name="info">The BadBurnError object containing the error information</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.InsufficientFunds(EdjCase.ICP.Agent.Standards.ICRC1.Models.InsufficientFundsError)">
            <summary>
            Creates a new instance of TransferError with an InsufficientFundsError object as the value
            </summary>
            <param name="info">The InsufficientFundsError object containing the error information</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.TooOld">
            <summary>
            Creates a new instance of TransferError with a TooOld tag and null value
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.CreatedInFuture(EdjCase.ICP.Agent.Standards.ICRC1.Models.CreatedInFutureError)">
            <summary>
            Creates a new instance of TransferError with a CreatedInFutureError object as the value
            </summary>
            <param name="info">The CreatedInFutureError object containing the error information</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.Duplicate(EdjCase.ICP.Agent.Standards.ICRC1.Models.DuplicateError)">
            <summary>
            Creates a new instance of TransferError with a DuplicateError object as the value
            </summary>
            <param name="info">The DuplicateError object containing the error information</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.TemporarilyUnavailable">
            <summary>
            Creates a new instance of TransferError with a TemporarilyUnavailable tag and null value
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.GenericError(EdjCase.ICP.Agent.Standards.ICRC1.Models.GenericError)">
            <summary>
            Creates a new instance of TransferError with a GenericError object as the value
            </summary>
            <param name="info">The GenericError object containing the error information</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.AsBadFee">
            <summary>
            Gets the value of this TransferError object as a BadFeeError object
            </summary>
            <returns>The BadFeeError object representing the error information</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.AsBadBurn">
            <summary>
            Gets the value of this TransferError object as a BadBurnError object
            </summary>
            <returns>The BadBurnError object representing the error information</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.AsInsufficientFunds">
            <summary>
            Gets the value of this TransferError object as an InsufficientFundsError object
            </summary>
            <returns>The InsufficientFundsError object representing the error information</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.AsCreatedInFuture">
            <summary>
            Gets the value of this TransferError object as a CreatedInFutureError object
            </summary>
            <returns>The CreatedInFutureError object representing the error information</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.AsDuplicate">
            <summary>
            Gets the value of this TransferError object as a DuplicateError object
            </summary>
            <returns>The DuplicateError object representing the error information</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.AsGenericError">
            <summary>
            Gets the value of this TransferError object as a GenericError object
            </summary>
            <returns>The GenericError object representing the error information</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError.ValidateTag(EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag)">
            <summary>
            Throws an exception if the current tag of this TransferError object does not match the given tag
            </summary>
            <param name="tag">The expected tag</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.BadFeeError">
            <summary>
            This class represents an error that occurs when a fee is incorrect
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.BadFeeError.ExpectedFee">
            <summary>
            The expected fee for the transaction, represented as an UnboundedUInt object
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.BadFeeError.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Primary constructor for the BadFeeError class
            </summary>
            <param name="expectedFee">The expected fee for the transaction, represented as an UnboundedUInt object</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.BadBurnError">
            <summary>
            This class represents an error that occurs when a burn amount is incorrect
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.BadBurnError.MinBurnAmount">
            <summary>
            The minimum burn amount for the transaction, represented as an UnboundedUInt object
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.BadBurnError.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Primary constructor for the BadBurnError class
            </summary>
            <param name="minBurnAmount">The minimum burn amount for the transaction, represented as an UnboundedUInt object</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.InsufficientFundsError">
            <summary>
            This class represents an error that occurs when there are insufficient funds for a transaction
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.InsufficientFundsError.Balance">
            <summary>
            The balance of the account, represented as an UnboundedUInt object
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.InsufficientFundsError.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Primary constructor for the InsufficientFundsError class
            </summary>
            <param name="balance">The balance of the account, represented as an UnboundedUInt object</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.CreatedInFutureError">
            <summary>
            This class represents an error that occurs when a transaction is created in the future
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.CreatedInFutureError.LedgerTime">
            <summary>
            The ledger time, represented as a Timestamp object
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.CreatedInFutureError.#ctor(System.UInt64)">
            <summary>
            Primary constructor for the CreatedInFutureError class
            </summary>
            <param name="ledgerTime">The ledger time, represented as a Timestamp object</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.DuplicateError">
            <summary>
            This class represents an error that occurs when a transaction is a duplicate
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.DuplicateError.DuplicateOf">
            <summary>
            The ID of the transaction that this transaction is a duplicate
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.DuplicateError.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Primary constructor for the DuplicateError class
            </summary>
            <param name="duplicateOf">The ID of the transaction that this transaction is a duplicate of, represented as an UnboundedUInt object</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.GenericError">
            <summary>
            This class represents a generic error that can occur during a transaction
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.GenericError.ErrorCode">
            <summary>
            The error code, represented as an UnboundedUInt object
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.GenericError.Message">
            <summary>
            The error message, represented as a string
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.GenericError.#ctor(EdjCase.ICP.Candid.Models.UnboundedUInt,System.String)">
            <summary>
            Primary constructor for the GenericError class
            </summary>
            <param name="errorCode">The error code, represented as an UnboundedUInt object</param>
            <param name="message">The error message, represented as a string</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag">
            <summary>
            This enum represents the possible types of errors that can occur during a transfer
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag.BadFee">
            <summary>
            Indicates an error due to an incorrect fee
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag.BadBurn">
            <summary>
            Indicates an error due to an incorrect burn amount
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag.InsufficientFunds">
            <summary>
            Indicates an error due to insufficient funds for the transaction
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag.TooOld">
            <summary>
            Indicates an error due to a transaction being too old
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag.CreatedInFuture">
            <summary>
            Indicates an error due to a transaction being created in the future
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag.Duplicate">
            <summary>
            Indicates an error due to a transaction being a duplicate
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag.TemporarilyUnavailable">
            <summary>
            Indicates that the service is temporarily unavailable
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferErrorTag.GenericError">
            <summary>
            Indicates a generic error that can occur during a transfer
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult">
            <summary>
            Represents the result of a transfer operation, which can either be Ok with a value or Err with an error object
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult.Tag">
            <summary>
            The tag indicating whether the transfer operation was successful or resulted in an error
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult.Value">
            <summary>
            The value of this TransferResult object, which can be either an UnboundedUInt or a TransferError object
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult.#ctor">
            <summary>
            Private default constructor used for reflection
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult.Ok(EdjCase.ICP.Candid.Models.UnboundedUInt)">
            <summary>
            Creates a new instance of TransferResult with the Ok tag and the given UnboundedUInt value
            </summary>
            <param name="info">The value associated with this Ok TransferResult object</param>
            <returns>A new instance of TransferResult with the Ok tag and the given value</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult.Err(EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferError)">
            <summary>
            Creates a new instance of TransferResult with the Err tag and the given TransferError object as the value
            </summary>
            <param name="info">The TransferError object containing the error information</param>
            <returns>A new instance of TransferResult with the Err tag and the given value</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult.AsOk">
            <summary>
            Gets the value of this TransferResult object as an UnboundedUInt
            </summary>
            <returns>The UnboundedUInt value associated with this TransferResult object</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult.AsErr">
            <summary>
            Gets the value of this TransferResult object as a TransferError object
            </summary>
            <returns>The TransferError object associated with this TransferResult object</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResult.ValidateTag(EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResultTag)">
            <summary>
            Throws an exception if the current tag of this TransferResult object does not match the given tag
            </summary>
            <param name="tag">The expected tag</param>
        </member>
        <member name="T:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResultTag">
            <summary>
            An enumeration of possible tags for a TransferResult object, which can either be Ok with an UnboundedUInt value or Err with a TransferError object
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResultTag.Ok">
            <summary>
            Indicates a successful transfer operation with the associated UnboundedUInt value
            </summary>
        </member>
        <member name="F:EdjCase.ICP.Agent.Standards.ICRC1.Models.TransferResultTag.Err">
            <summary>
            Indicates a failed transfer operation with the associated TransferError object containing information about the error
            </summary>
        </member>
        <member name="T:EdjCase.ICP.Agent.SubjectPublicKeyInfo">
            <summary>
            A model representing a public key value and the cryptographic algorithm that is for
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.SubjectPublicKeyInfo.Algorithm">
            <summary>
            The cryptographic algorithm that the public key is for
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.SubjectPublicKeyInfo.PublicKey">
            <summary>
            The raw public key bytes
            </summary>
        </member>
        <member name="M:EdjCase.ICP.Agent.SubjectPublicKeyInfo.#ctor(EdjCase.ICP.Agent.AlgorithmIdentifier,System.Byte[])">
            <summary>
            Default constructor
            </summary>
            <param name="algorithm">The cryptographic algorithm that the public key is for</param>
            <param name="subjectPublicKey">The raw public key bytes</param>
        </member>
        <member name="M:EdjCase.ICP.Agent.SubjectPublicKeyInfo.ToPrincipal">
            <summary>
            Converts the key to a self authenticating principal value
            </summary>
            <returns>Principal of the public key</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.SubjectPublicKeyInfo.ToDerEncoding">
            <summary>
            Converts the subject public key info into a DER encoded byte array
            </summary>
            <returns>A DER encoded byte array</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.SubjectPublicKeyInfo.FromDerEncoding(System.Byte[])">
            <summary>
            Parses a DER encoded subject public key info 
            </summary>
            <param name="derEncodedPublicKey">A DER encoded public key</param>
            <returns></returns>
            <exception cref="T:EdjCase.ICP.Agent.InvalidPublicKey"></exception>
        </member>
        <member name="M:EdjCase.ICP.Agent.SubjectPublicKeyInfo.Ed25519(System.Byte[])">
            <summary>
            Converts a raw ed25519 public key into a subject public key info
            </summary>
            <param name="publicKey">A raw ed25519 public key</param>
            <returns>Ed25519 SubjectPublicKeyInfo</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.SubjectPublicKeyInfo.Ecdsa(System.Byte[],System.String)">
            <summary>
            Converts a raw ed25519 public key into a subject public key info
            </summary>
            <param name="publicKey">A raw ed25519 public key</param>
            <param name="curveOid">The OID of the ecdsa curve (eg "1.3.132.0.10" for secp256k1)</param>
            <returns>Ed25519 SubjectPublicKeyInfo</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.SubjectPublicKeyInfo.Secp256k1(System.Byte[])">
            <summary>
            Converts a raw secp256k1 public key into a subject public key info
            </summary>
            <param name="publicKey">A raw secp256k1 public key</param>
            <returns>Secp256k1 SubjectPublicKeyInfo</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.SubjectPublicKeyInfo.Bls(System.Byte[])">
            <summary>
            Converts a raw bls public key into a subject public key info
            </summary>
            <param name="publicKey">A raw bls public key</param>
            <returns>Bls SubjectPublicKeyInfo</returns>
        </member>
        <member name="P:EdjCase.ICP.Agent.SubjectPublicKeyInfo.MainNetRootPublicKey">
            <summary>
            Gets the public key info for the IC main network
            </summary>
        </member>
    </members>
</doc>
