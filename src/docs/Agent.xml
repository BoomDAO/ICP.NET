<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EdjCase.ICP.Agent</name>
    </assembly>
    <members>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.GetPrincipal">
            <summary>
            Returns the principal ID associated with this agent (by default). It only shows
            the principal of the default identity in the agent, which is the principal used
            when calls don't specify it.
            </summary>
            <returns>Principal for agent</returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.ReadStateAsync(EdjCase.ICP.Candid.Models.Principal,System.Collections.Generic.List{EdjCase.ICP.Candid.Models.Path},EdjCase.ICP.Agent.Auth.IIdentity)">
            Send a read state query to the replica. This includes a list of paths to return,
            and will return a Certificate. This will only reject on communication errors,
            but the certificate might contain less information than requested.
            @param effectiveCanisterId A Canister ID related to this call.
            @param options The options for this call.
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.GetStatusAsync">
            Query the status endpoint of the replica. This normally has a few fields that
            corresponds to the version of the replica, its root public key, and any other
            information made public.
            @returns A JsonObject that is essentially a record of fields from the status
                endpoint.
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.QueryAsync(EdjCase.ICP.Candid.Models.Principal,System.String,EdjCase.ICP.Candid.Models.CandidArg,EdjCase.ICP.Agent.Auth.IIdentity)">
            Send a query call to a canister. See
            {@link https://sdk.ICP.org/docs/interface-spec/#http-query | the interface spec}.
            @param canisterId The Principal of the Canister to send the query to. Sending a query to
                the management canister is not supported (as it has no meaning from an agent).
            @param options Options to use to create and send the query.
            @returns The response from the replica. The Promise will only reject when the communication
                failed. If the query itself failed but no protocol errors happened, the response will
                be of type QueryResponseRejected.
        </member>
        <member name="M:EdjCase.ICP.Agent.Agents.IAgent.GetRootKeyAsync">
             By default, the agent is configured to talk to the main Internet Computer,
             and verifies responses using a hard-coded public key.
            
             This function will instruct the agent to ask the endpoint for its public
             key, and use that instead. This is required when talking to a local test
             instance, for example.
            
             Only use this when you are  _not_ talking to the main Internet Computer,
             otherwise you are prone to man-in-the-middle attacks! Do not call this
             function by default.
        </member>
        <member name="M:EdjCase.ICP.Agent.CanisterInterfaces.IManagementCanisterRecord.ProvisionalCreateCanisterWithCyclesAsync(EdjCase.ICP.Agent.CanisterInterfaces.CanisterSettings,System.UInt64)">
            <summary>
            As a provisional method on development instances, the provisional_create_canister_with_cycles method is provided. It behaves as create_canister, but initializes the canister’s balance with amount fresh cycles (using MAX_CANISTER_BALANCE if amount = null, else capping the balance at MAX_CANISTER_BALANCE).
            Cycles added to this call via ic0.call_cycles_add128 are returned to the caller.
            This method is only available in local development instances.
            </summary>
            <param name="settings">Optional. Settings for canister creation</param>
            <param name="cyclesToAdd">Optional. Adds cycles to the balance of canister identified by amount (implicitly capping it at MAX_CANISTER_BALANCE)</param>
            <returns></returns>
        </member>
        <member name="M:EdjCase.ICP.Agent.CanisterInterfaces.IManagementCanisterRecord.InstallCodeAsync(EdjCase.ICP.Agent.CanisterInterfaces.InstallType,EdjCase.ICP.Candid.Models.Principal,System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="canisterId"></param>
            <param name="wasmModule"></param>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="F:EdjCase.ICP.Agent.CanisterInterfaces.InstallType.Install">
            <summary>
            The canister must be empty before.
            This will instantiate the canister module and invoke its canister_init method (if present),
            passing the arg to the canister.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.CanisterInterfaces.CanisterSettings.Controllers">
            <summary>
            A list of principals.
            Must be between 0 and 10 in size.
            This value is assigned to the controllers attribute of the canister.
            Default value: A list containing only the caller of the create_canister call.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.CanisterInterfaces.CanisterSettings.ComputeAllocation">
            <summary>
            Must be a number between 0 and 100, inclusively.
            It indicates how much compute power should be guaranteed to this canister, expressed as a percentage 
            of the maximum compute power that a single canister can allocate. If the IC cannot provide the requested 
            allocation, for example because it is oversubscribed, the call will be rejected.
            Default value: 0
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.CanisterInterfaces.CanisterSettings.MemoryAllocation">
            <summary>
            Must be a number between 0 and 2^48 (i.e 256TB), inclusively.
            It indicates how much memory the canister is allowed to use in total.
            Any attempt to grow memory usage beyond this allocation will fail.
            If the IC cannot provide the requested allocation, for example because it is oversubscribed, the call will be rejected
            If set to 0, then memory growth of the canister will be best-effort and subject to the available memory on the IC.
            Default value: 0
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.CanisterInterfaces.CanisterSettings.FreezingThreshold">
            <summary>
            Must be a number between 0 and 2^64-1, inclusively, and indicates a length of time in seconds.
            A canister is considered frozen whenever the IC estimates that the canister would be depleted of cycles before 
            freezing_threshold seconds pass, given the canister’s current size and the IC’s current cost for storage.
            Calls to a frozen canister will be rejected(like for a stopping canister). Additionally, a canister cannot 
            perform calls if that would, due the cost of the call and transferred cycles, would push the balance into 
            frozen territory; these calls fail with ic0.call_perform returning a non-zero error code.
            Default value: 2592000 (approximately 30 days).
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.CanisterId">
            <summary>
            The principal of the canister to call
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.Method">
            <summary>
            Name of the canister method to call
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.EncodedArgument">
            <summary>
            Argument to pass to the canister method
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.Sender">
            <summary>
            The user who issued the request
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.IngressExpiry">
            <summary>
            An upper limit on the validity of the request, expressed in nanoseconds since 1970-01-01
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.CallRequest.Nonce">
            <summary>
            Optional. Arbitrary user-provided data, typically randomly generated. This can be used to create distinct requests with otherwise identical fields.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.CanisterId">
            <summary>
            The principal of the canister to call.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.Method">
            <summary>
            Name of the canister method to call
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.EncodedArgument">
            <summary>
            Argument to pass to the canister method
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.Sender">
            <summary>
            Required. The user who issued the request.
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.IngressExpiry">
            <summary>
            Required.  An upper limit on the validity of the request, expressed in nanoseconds since 
            1970-01-01 (like ic0.time()). This avoids replay attacks: The IC will not accept requests, 
            or transition requests from status received to status processing, if their expiry date is in 
            the past. The IC may refuse to accept requests with an ingress expiry date too far in the future. 
            This applies to synchronous and asynchronous requests alike (and could have been called request_expiry).
            </summary>
        </member>
        <member name="P:EdjCase.ICP.Agent.Requests.QueryRequest.Nonce">
            <summary>
            Optional. Arbitrary user-provided data, typically randomly generated. 
            This can be used to create distinct requests with otherwise identical fields.
            </summary>
        </member>
    </members>
</doc>
